# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gmat_py
else:
    import _gmat_py

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class doublep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.doublep_swiginit(self, _gmat_py.new_doublep())
    __swig_destroy__ = _gmat_py.delete_doublep

    def assign(self, value):
        return _gmat_py.doublep_assign(self, value)

    def value(self):
        return _gmat_py.doublep_value(self)

    def cast(self):
        return _gmat_py.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        return _gmat_py.doublep_frompointer(t)

# Register doublep in _gmat_py:
_gmat_py.doublep_swigregister(doublep)
class intp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.intp_swiginit(self, _gmat_py.new_intp())
    __swig_destroy__ = _gmat_py.delete_intp

    def assign(self, value):
        return _gmat_py.intp_assign(self, value)

    def value(self):
        return _gmat_py.intp_value(self)

    def cast(self):
        return _gmat_py.intp_cast(self)

    @staticmethod
    def frompointer(t):
        return _gmat_py.intp_frompointer(t)

# Register intp in _gmat_py:
_gmat_py.intp_swigregister(intp)
class stringp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.stringp_swiginit(self, _gmat_py.new_stringp())
    __swig_destroy__ = _gmat_py.delete_stringp

    def assign(self, value):
        return _gmat_py.stringp_assign(self, value)

    def value(self):
        return _gmat_py.stringp_value(self)

    def cast(self):
        return _gmat_py.stringp_cast(self)

    @staticmethod
    def frompointer(t):
        return _gmat_py.stringp_frompointer(t)

# Register stringp in _gmat_py:
_gmat_py.stringp_swigregister(stringp)
class boolp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.boolp_swiginit(self, _gmat_py.new_boolp())
    __swig_destroy__ = _gmat_py.delete_boolp

    def assign(self, value):
        return _gmat_py.boolp_assign(self, value)

    def value(self):
        return _gmat_py.boolp_value(self)

    def cast(self):
        return _gmat_py.boolp_cast(self)

    @staticmethod
    def frompointer(t):
        return _gmat_py.boolp_frompointer(t)

# Register boolp in _gmat_py:
_gmat_py.boolp_swigregister(boolp)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SwigPyIterator

    def value(self):
        return _gmat_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gmat_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gmat_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gmat_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gmat_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gmat_py.SwigPyIterator_copy(self)

    def next(self):
        return _gmat_py.SwigPyIterator_next(self)

    def __next__(self):
        return _gmat_py.SwigPyIterator___next__(self)

    def previous(self):
        return _gmat_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gmat_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gmat_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gmat_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gmat_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gmat_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gmat_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gmat_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gmat_py:
_gmat_py.SwigPyIterator_swigregister(SwigPyIterator)
class RealArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.RealArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.RealArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.RealArray___bool__(self)

    def __len__(self):
        return _gmat_py.RealArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.RealArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.RealArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.RealArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.RealArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.RealArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.RealArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.RealArray_pop(self)

    def append(self, x):
        return _gmat_py.RealArray_append(self, x)

    def empty(self):
        return _gmat_py.RealArray_empty(self)

    def size(self):
        return _gmat_py.RealArray_size(self)

    def swap(self, v):
        return _gmat_py.RealArray_swap(self, v)

    def begin(self):
        return _gmat_py.RealArray_begin(self)

    def end(self):
        return _gmat_py.RealArray_end(self)

    def rbegin(self):
        return _gmat_py.RealArray_rbegin(self)

    def rend(self):
        return _gmat_py.RealArray_rend(self)

    def clear(self):
        return _gmat_py.RealArray_clear(self)

    def get_allocator(self):
        return _gmat_py.RealArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.RealArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.RealArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.RealArray_swiginit(self, _gmat_py.new_RealArray(*args))

    def push_back(self, x):
        return _gmat_py.RealArray_push_back(self, x)

    def front(self):
        return _gmat_py.RealArray_front(self)

    def back(self):
        return _gmat_py.RealArray_back(self)

    def assign(self, n, x):
        return _gmat_py.RealArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.RealArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.RealArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.RealArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.RealArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_RealArray

# Register RealArray in _gmat_py:
_gmat_py.RealArray_swigregister(RealArray)
class IntegerArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.IntegerArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.IntegerArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.IntegerArray___bool__(self)

    def __len__(self):
        return _gmat_py.IntegerArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.IntegerArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.IntegerArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.IntegerArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.IntegerArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.IntegerArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.IntegerArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.IntegerArray_pop(self)

    def append(self, x):
        return _gmat_py.IntegerArray_append(self, x)

    def empty(self):
        return _gmat_py.IntegerArray_empty(self)

    def size(self):
        return _gmat_py.IntegerArray_size(self)

    def swap(self, v):
        return _gmat_py.IntegerArray_swap(self, v)

    def begin(self):
        return _gmat_py.IntegerArray_begin(self)

    def end(self):
        return _gmat_py.IntegerArray_end(self)

    def rbegin(self):
        return _gmat_py.IntegerArray_rbegin(self)

    def rend(self):
        return _gmat_py.IntegerArray_rend(self)

    def clear(self):
        return _gmat_py.IntegerArray_clear(self)

    def get_allocator(self):
        return _gmat_py.IntegerArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.IntegerArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.IntegerArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.IntegerArray_swiginit(self, _gmat_py.new_IntegerArray(*args))

    def push_back(self, x):
        return _gmat_py.IntegerArray_push_back(self, x)

    def front(self):
        return _gmat_py.IntegerArray_front(self)

    def back(self):
        return _gmat_py.IntegerArray_back(self)

    def assign(self, n, x):
        return _gmat_py.IntegerArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.IntegerArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.IntegerArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.IntegerArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.IntegerArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_IntegerArray

# Register IntegerArray in _gmat_py:
_gmat_py.IntegerArray_swigregister(IntegerArray)
class UnsignedIntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.UnsignedIntArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.UnsignedIntArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.UnsignedIntArray___bool__(self)

    def __len__(self):
        return _gmat_py.UnsignedIntArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.UnsignedIntArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.UnsignedIntArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.UnsignedIntArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.UnsignedIntArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.UnsignedIntArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.UnsignedIntArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.UnsignedIntArray_pop(self)

    def append(self, x):
        return _gmat_py.UnsignedIntArray_append(self, x)

    def empty(self):
        return _gmat_py.UnsignedIntArray_empty(self)

    def size(self):
        return _gmat_py.UnsignedIntArray_size(self)

    def swap(self, v):
        return _gmat_py.UnsignedIntArray_swap(self, v)

    def begin(self):
        return _gmat_py.UnsignedIntArray_begin(self)

    def end(self):
        return _gmat_py.UnsignedIntArray_end(self)

    def rbegin(self):
        return _gmat_py.UnsignedIntArray_rbegin(self)

    def rend(self):
        return _gmat_py.UnsignedIntArray_rend(self)

    def clear(self):
        return _gmat_py.UnsignedIntArray_clear(self)

    def get_allocator(self):
        return _gmat_py.UnsignedIntArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.UnsignedIntArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.UnsignedIntArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.UnsignedIntArray_swiginit(self, _gmat_py.new_UnsignedIntArray(*args))

    def push_back(self, x):
        return _gmat_py.UnsignedIntArray_push_back(self, x)

    def front(self):
        return _gmat_py.UnsignedIntArray_front(self)

    def back(self):
        return _gmat_py.UnsignedIntArray_back(self)

    def assign(self, n, x):
        return _gmat_py.UnsignedIntArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.UnsignedIntArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.UnsignedIntArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.UnsignedIntArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.UnsignedIntArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_UnsignedIntArray

# Register UnsignedIntArray in _gmat_py:
_gmat_py.UnsignedIntArray_swigregister(UnsignedIntArray)
class StringArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.StringArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.StringArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.StringArray___bool__(self)

    def __len__(self):
        return _gmat_py.StringArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.StringArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.StringArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.StringArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.StringArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.StringArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.StringArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.StringArray_pop(self)

    def append(self, x):
        return _gmat_py.StringArray_append(self, x)

    def empty(self):
        return _gmat_py.StringArray_empty(self)

    def size(self):
        return _gmat_py.StringArray_size(self)

    def swap(self, v):
        return _gmat_py.StringArray_swap(self, v)

    def begin(self):
        return _gmat_py.StringArray_begin(self)

    def end(self):
        return _gmat_py.StringArray_end(self)

    def rbegin(self):
        return _gmat_py.StringArray_rbegin(self)

    def rend(self):
        return _gmat_py.StringArray_rend(self)

    def clear(self):
        return _gmat_py.StringArray_clear(self)

    def get_allocator(self):
        return _gmat_py.StringArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.StringArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.StringArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.StringArray_swiginit(self, _gmat_py.new_StringArray(*args))

    def push_back(self, x):
        return _gmat_py.StringArray_push_back(self, x)

    def front(self):
        return _gmat_py.StringArray_front(self)

    def back(self):
        return _gmat_py.StringArray_back(self)

    def assign(self, n, x):
        return _gmat_py.StringArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.StringArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.StringArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.StringArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.StringArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_StringArray

# Register StringArray in _gmat_py:
_gmat_py.StringArray_swigregister(StringArray)
class BooleanArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.BooleanArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.BooleanArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.BooleanArray___bool__(self)

    def __len__(self):
        return _gmat_py.BooleanArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.BooleanArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.BooleanArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.BooleanArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.BooleanArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.BooleanArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.BooleanArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.BooleanArray_pop(self)

    def append(self, x):
        return _gmat_py.BooleanArray_append(self, x)

    def empty(self):
        return _gmat_py.BooleanArray_empty(self)

    def size(self):
        return _gmat_py.BooleanArray_size(self)

    def swap(self, v):
        return _gmat_py.BooleanArray_swap(self, v)

    def begin(self):
        return _gmat_py.BooleanArray_begin(self)

    def end(self):
        return _gmat_py.BooleanArray_end(self)

    def rbegin(self):
        return _gmat_py.BooleanArray_rbegin(self)

    def rend(self):
        return _gmat_py.BooleanArray_rend(self)

    def clear(self):
        return _gmat_py.BooleanArray_clear(self)

    def get_allocator(self):
        return _gmat_py.BooleanArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.BooleanArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.BooleanArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.BooleanArray_swiginit(self, _gmat_py.new_BooleanArray(*args))

    def push_back(self, x):
        return _gmat_py.BooleanArray_push_back(self, x)

    def front(self):
        return _gmat_py.BooleanArray_front(self)

    def back(self):
        return _gmat_py.BooleanArray_back(self)

    def assign(self, n, x):
        return _gmat_py.BooleanArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.BooleanArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.BooleanArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.BooleanArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.BooleanArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_BooleanArray

# Register BooleanArray in _gmat_py:
_gmat_py.BooleanArray_swigregister(BooleanArray)
class ObjectArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.ObjectArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.ObjectArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.ObjectArray___bool__(self)

    def __len__(self):
        return _gmat_py.ObjectArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.ObjectArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.ObjectArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.ObjectArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.ObjectArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.ObjectArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.ObjectArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.ObjectArray_pop(self)

    def append(self, x):
        return _gmat_py.ObjectArray_append(self, x)

    def empty(self):
        return _gmat_py.ObjectArray_empty(self)

    def size(self):
        return _gmat_py.ObjectArray_size(self)

    def swap(self, v):
        return _gmat_py.ObjectArray_swap(self, v)

    def begin(self):
        return _gmat_py.ObjectArray_begin(self)

    def end(self):
        return _gmat_py.ObjectArray_end(self)

    def rbegin(self):
        return _gmat_py.ObjectArray_rbegin(self)

    def rend(self):
        return _gmat_py.ObjectArray_rend(self)

    def clear(self):
        return _gmat_py.ObjectArray_clear(self)

    def get_allocator(self):
        return _gmat_py.ObjectArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.ObjectArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.ObjectArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.ObjectArray_swiginit(self, _gmat_py.new_ObjectArray(*args))

    def push_back(self, x):
        return _gmat_py.ObjectArray_push_back(self, x)

    def front(self):
        return _gmat_py.ObjectArray_front(self)

    def back(self):
        return _gmat_py.ObjectArray_back(self)

    def assign(self, n, x):
        return _gmat_py.ObjectArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.ObjectArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.ObjectArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.ObjectArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.ObjectArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_ObjectArray

# Register ObjectArray in _gmat_py:
_gmat_py.ObjectArray_swigregister(ObjectArray)
class WrapperArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.WrapperArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.WrapperArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.WrapperArray___bool__(self)

    def __len__(self):
        return _gmat_py.WrapperArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.WrapperArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.WrapperArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.WrapperArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.WrapperArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.WrapperArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.WrapperArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.WrapperArray_pop(self)

    def append(self, x):
        return _gmat_py.WrapperArray_append(self, x)

    def empty(self):
        return _gmat_py.WrapperArray_empty(self)

    def size(self):
        return _gmat_py.WrapperArray_size(self)

    def swap(self, v):
        return _gmat_py.WrapperArray_swap(self, v)

    def begin(self):
        return _gmat_py.WrapperArray_begin(self)

    def end(self):
        return _gmat_py.WrapperArray_end(self)

    def rbegin(self):
        return _gmat_py.WrapperArray_rbegin(self)

    def rend(self):
        return _gmat_py.WrapperArray_rend(self)

    def clear(self):
        return _gmat_py.WrapperArray_clear(self)

    def get_allocator(self):
        return _gmat_py.WrapperArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.WrapperArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.WrapperArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.WrapperArray_swiginit(self, _gmat_py.new_WrapperArray(*args))

    def push_back(self, x):
        return _gmat_py.WrapperArray_push_back(self, x)

    def front(self):
        return _gmat_py.WrapperArray_front(self)

    def back(self):
        return _gmat_py.WrapperArray_back(self)

    def assign(self, n, x):
        return _gmat_py.WrapperArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.WrapperArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.WrapperArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.WrapperArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.WrapperArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_WrapperArray

# Register WrapperArray in _gmat_py:
_gmat_py.WrapperArray_swigregister(WrapperArray)
class StateArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.StateArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.StateArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.StateArray___bool__(self)

    def __len__(self):
        return _gmat_py.StateArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.StateArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.StateArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.StateArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.StateArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.StateArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.StateArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.StateArray_pop(self)

    def append(self, x):
        return _gmat_py.StateArray_append(self, x)

    def empty(self):
        return _gmat_py.StateArray_empty(self)

    def size(self):
        return _gmat_py.StateArray_size(self)

    def swap(self, v):
        return _gmat_py.StateArray_swap(self, v)

    def begin(self):
        return _gmat_py.StateArray_begin(self)

    def end(self):
        return _gmat_py.StateArray_end(self)

    def rbegin(self):
        return _gmat_py.StateArray_rbegin(self)

    def rend(self):
        return _gmat_py.StateArray_rend(self)

    def clear(self):
        return _gmat_py.StateArray_clear(self)

    def get_allocator(self):
        return _gmat_py.StateArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.StateArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.StateArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.StateArray_swiginit(self, _gmat_py.new_StateArray(*args))

    def push_back(self, x):
        return _gmat_py.StateArray_push_back(self, x)

    def front(self):
        return _gmat_py.StateArray_front(self)

    def back(self):
        return _gmat_py.StateArray_back(self)

    def assign(self, n, x):
        return _gmat_py.StateArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.StateArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.StateArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.StateArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.StateArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_StateArray

# Register StateArray in _gmat_py:
_gmat_py.StateArray_swigregister(StateArray)
class EpochArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.EpochArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.EpochArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.EpochArray___bool__(self)

    def __len__(self):
        return _gmat_py.EpochArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.EpochArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.EpochArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.EpochArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.EpochArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.EpochArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.EpochArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.EpochArray_pop(self)

    def append(self, x):
        return _gmat_py.EpochArray_append(self, x)

    def empty(self):
        return _gmat_py.EpochArray_empty(self)

    def size(self):
        return _gmat_py.EpochArray_size(self)

    def swap(self, v):
        return _gmat_py.EpochArray_swap(self, v)

    def begin(self):
        return _gmat_py.EpochArray_begin(self)

    def end(self):
        return _gmat_py.EpochArray_end(self)

    def rbegin(self):
        return _gmat_py.EpochArray_rbegin(self)

    def rend(self):
        return _gmat_py.EpochArray_rend(self)

    def clear(self):
        return _gmat_py.EpochArray_clear(self)

    def get_allocator(self):
        return _gmat_py.EpochArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.EpochArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.EpochArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.EpochArray_swiginit(self, _gmat_py.new_EpochArray(*args))

    def push_back(self, x):
        return _gmat_py.EpochArray_push_back(self, x)

    def front(self):
        return _gmat_py.EpochArray_front(self)

    def back(self):
        return _gmat_py.EpochArray_back(self)

    def assign(self, n, x):
        return _gmat_py.EpochArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.EpochArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.EpochArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.EpochArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.EpochArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_EpochArray

# Register EpochArray in _gmat_py:
_gmat_py.EpochArray_swigregister(EpochArray)
class IntegerMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.IntegerMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.IntegerMap___nonzero__(self)

    def __bool__(self):
        return _gmat_py.IntegerMap___bool__(self)

    def __len__(self):
        return _gmat_py.IntegerMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gmat_py.IntegerMap___getitem__(self, key)

    def __delitem__(self, key):
        return _gmat_py.IntegerMap___delitem__(self, key)

    def has_key(self, key):
        return _gmat_py.IntegerMap_has_key(self, key)

    def keys(self):
        return _gmat_py.IntegerMap_keys(self)

    def values(self):
        return _gmat_py.IntegerMap_values(self)

    def items(self):
        return _gmat_py.IntegerMap_items(self)

    def __contains__(self, key):
        return _gmat_py.IntegerMap___contains__(self, key)

    def key_iterator(self):
        return _gmat_py.IntegerMap_key_iterator(self)

    def value_iterator(self):
        return _gmat_py.IntegerMap_value_iterator(self)

    def __setitem__(self, *args):
        return _gmat_py.IntegerMap___setitem__(self, *args)

    def asdict(self):
        return _gmat_py.IntegerMap_asdict(self)

    def __init__(self, *args):
        _gmat_py.IntegerMap_swiginit(self, _gmat_py.new_IntegerMap(*args))

    def empty(self):
        return _gmat_py.IntegerMap_empty(self)

    def size(self):
        return _gmat_py.IntegerMap_size(self)

    def swap(self, v):
        return _gmat_py.IntegerMap_swap(self, v)

    def begin(self):
        return _gmat_py.IntegerMap_begin(self)

    def end(self):
        return _gmat_py.IntegerMap_end(self)

    def rbegin(self):
        return _gmat_py.IntegerMap_rbegin(self)

    def rend(self):
        return _gmat_py.IntegerMap_rend(self)

    def clear(self):
        return _gmat_py.IntegerMap_clear(self)

    def get_allocator(self):
        return _gmat_py.IntegerMap_get_allocator(self)

    def count(self, x):
        return _gmat_py.IntegerMap_count(self, x)

    def erase(self, *args):
        return _gmat_py.IntegerMap_erase(self, *args)

    def find(self, x):
        return _gmat_py.IntegerMap_find(self, x)

    def lower_bound(self, x):
        return _gmat_py.IntegerMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _gmat_py.IntegerMap_upper_bound(self, x)
    __swig_destroy__ = _gmat_py.delete_IntegerMap

# Register IntegerMap in _gmat_py:
_gmat_py.IntegerMap_swigregister(IntegerMap)
class ObjectMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.ObjectMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.ObjectMap___nonzero__(self)

    def __bool__(self):
        return _gmat_py.ObjectMap___bool__(self)

    def __len__(self):
        return _gmat_py.ObjectMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gmat_py.ObjectMap___getitem__(self, key)

    def __delitem__(self, key):
        return _gmat_py.ObjectMap___delitem__(self, key)

    def has_key(self, key):
        return _gmat_py.ObjectMap_has_key(self, key)

    def keys(self):
        return _gmat_py.ObjectMap_keys(self)

    def values(self):
        return _gmat_py.ObjectMap_values(self)

    def items(self):
        return _gmat_py.ObjectMap_items(self)

    def __contains__(self, key):
        return _gmat_py.ObjectMap___contains__(self, key)

    def key_iterator(self):
        return _gmat_py.ObjectMap_key_iterator(self)

    def value_iterator(self):
        return _gmat_py.ObjectMap_value_iterator(self)

    def __setitem__(self, *args):
        return _gmat_py.ObjectMap___setitem__(self, *args)

    def asdict(self):
        return _gmat_py.ObjectMap_asdict(self)

    def __init__(self, *args):
        _gmat_py.ObjectMap_swiginit(self, _gmat_py.new_ObjectMap(*args))

    def empty(self):
        return _gmat_py.ObjectMap_empty(self)

    def size(self):
        return _gmat_py.ObjectMap_size(self)

    def swap(self, v):
        return _gmat_py.ObjectMap_swap(self, v)

    def begin(self):
        return _gmat_py.ObjectMap_begin(self)

    def end(self):
        return _gmat_py.ObjectMap_end(self)

    def rbegin(self):
        return _gmat_py.ObjectMap_rbegin(self)

    def rend(self):
        return _gmat_py.ObjectMap_rend(self)

    def clear(self):
        return _gmat_py.ObjectMap_clear(self)

    def get_allocator(self):
        return _gmat_py.ObjectMap_get_allocator(self)

    def count(self, x):
        return _gmat_py.ObjectMap_count(self, x)

    def erase(self, *args):
        return _gmat_py.ObjectMap_erase(self, *args)

    def find(self, x):
        return _gmat_py.ObjectMap_find(self, x)

    def lower_bound(self, x):
        return _gmat_py.ObjectMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _gmat_py.ObjectMap_upper_bound(self, x)
    __swig_destroy__ = _gmat_py.delete_ObjectMap

# Register ObjectMap in _gmat_py:
_gmat_py.ObjectMap_swigregister(ObjectMap)
class WrapperMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.WrapperMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.WrapperMap___nonzero__(self)

    def __bool__(self):
        return _gmat_py.WrapperMap___bool__(self)

    def __len__(self):
        return _gmat_py.WrapperMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gmat_py.WrapperMap___getitem__(self, key)

    def __delitem__(self, key):
        return _gmat_py.WrapperMap___delitem__(self, key)

    def has_key(self, key):
        return _gmat_py.WrapperMap_has_key(self, key)

    def keys(self):
        return _gmat_py.WrapperMap_keys(self)

    def values(self):
        return _gmat_py.WrapperMap_values(self)

    def items(self):
        return _gmat_py.WrapperMap_items(self)

    def __contains__(self, key):
        return _gmat_py.WrapperMap___contains__(self, key)

    def key_iterator(self):
        return _gmat_py.WrapperMap_key_iterator(self)

    def value_iterator(self):
        return _gmat_py.WrapperMap_value_iterator(self)

    def __setitem__(self, *args):
        return _gmat_py.WrapperMap___setitem__(self, *args)

    def asdict(self):
        return _gmat_py.WrapperMap_asdict(self)

    def __init__(self, *args):
        _gmat_py.WrapperMap_swiginit(self, _gmat_py.new_WrapperMap(*args))

    def empty(self):
        return _gmat_py.WrapperMap_empty(self)

    def size(self):
        return _gmat_py.WrapperMap_size(self)

    def swap(self, v):
        return _gmat_py.WrapperMap_swap(self, v)

    def begin(self):
        return _gmat_py.WrapperMap_begin(self)

    def end(self):
        return _gmat_py.WrapperMap_end(self)

    def rbegin(self):
        return _gmat_py.WrapperMap_rbegin(self)

    def rend(self):
        return _gmat_py.WrapperMap_rend(self)

    def clear(self):
        return _gmat_py.WrapperMap_clear(self)

    def get_allocator(self):
        return _gmat_py.WrapperMap_get_allocator(self)

    def count(self, x):
        return _gmat_py.WrapperMap_count(self, x)

    def erase(self, *args):
        return _gmat_py.WrapperMap_erase(self, *args)

    def find(self, x):
        return _gmat_py.WrapperMap_find(self, x)

    def lower_bound(self, x):
        return _gmat_py.WrapperMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _gmat_py.WrapperMap_upper_bound(self, x)
    __swig_destroy__ = _gmat_py.delete_WrapperMap

# Register WrapperMap in _gmat_py:
_gmat_py.WrapperMap_swigregister(WrapperMap)
class ObjectTypeMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.ObjectTypeMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.ObjectTypeMap___nonzero__(self)

    def __bool__(self):
        return _gmat_py.ObjectTypeMap___bool__(self)

    def __len__(self):
        return _gmat_py.ObjectTypeMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gmat_py.ObjectTypeMap___getitem__(self, key)

    def __delitem__(self, key):
        return _gmat_py.ObjectTypeMap___delitem__(self, key)

    def has_key(self, key):
        return _gmat_py.ObjectTypeMap_has_key(self, key)

    def keys(self):
        return _gmat_py.ObjectTypeMap_keys(self)

    def values(self):
        return _gmat_py.ObjectTypeMap_values(self)

    def items(self):
        return _gmat_py.ObjectTypeMap_items(self)

    def __contains__(self, key):
        return _gmat_py.ObjectTypeMap___contains__(self, key)

    def key_iterator(self):
        return _gmat_py.ObjectTypeMap_key_iterator(self)

    def value_iterator(self):
        return _gmat_py.ObjectTypeMap_value_iterator(self)

    def __setitem__(self, *args):
        return _gmat_py.ObjectTypeMap___setitem__(self, *args)

    def asdict(self):
        return _gmat_py.ObjectTypeMap_asdict(self)

    def __init__(self, *args):
        _gmat_py.ObjectTypeMap_swiginit(self, _gmat_py.new_ObjectTypeMap(*args))

    def empty(self):
        return _gmat_py.ObjectTypeMap_empty(self)

    def size(self):
        return _gmat_py.ObjectTypeMap_size(self)

    def swap(self, v):
        return _gmat_py.ObjectTypeMap_swap(self, v)

    def begin(self):
        return _gmat_py.ObjectTypeMap_begin(self)

    def end(self):
        return _gmat_py.ObjectTypeMap_end(self)

    def rbegin(self):
        return _gmat_py.ObjectTypeMap_rbegin(self)

    def rend(self):
        return _gmat_py.ObjectTypeMap_rend(self)

    def clear(self):
        return _gmat_py.ObjectTypeMap_clear(self)

    def get_allocator(self):
        return _gmat_py.ObjectTypeMap_get_allocator(self)

    def count(self, x):
        return _gmat_py.ObjectTypeMap_count(self, x)

    def erase(self, *args):
        return _gmat_py.ObjectTypeMap_erase(self, *args)

    def find(self, x):
        return _gmat_py.ObjectTypeMap_find(self, x)

    def lower_bound(self, x):
        return _gmat_py.ObjectTypeMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _gmat_py.ObjectTypeMap_upper_bound(self, x)
    __swig_destroy__ = _gmat_py.delete_ObjectTypeMap

# Register ObjectTypeMap in _gmat_py:
_gmat_py.ObjectTypeMap_swigregister(ObjectTypeMap)
class ObjectTypeArrayMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.ObjectTypeArrayMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.ObjectTypeArrayMap___nonzero__(self)

    def __bool__(self):
        return _gmat_py.ObjectTypeArrayMap___bool__(self)

    def __len__(self):
        return _gmat_py.ObjectTypeArrayMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gmat_py.ObjectTypeArrayMap___getitem__(self, key)

    def __delitem__(self, key):
        return _gmat_py.ObjectTypeArrayMap___delitem__(self, key)

    def has_key(self, key):
        return _gmat_py.ObjectTypeArrayMap_has_key(self, key)

    def keys(self):
        return _gmat_py.ObjectTypeArrayMap_keys(self)

    def values(self):
        return _gmat_py.ObjectTypeArrayMap_values(self)

    def items(self):
        return _gmat_py.ObjectTypeArrayMap_items(self)

    def __contains__(self, key):
        return _gmat_py.ObjectTypeArrayMap___contains__(self, key)

    def key_iterator(self):
        return _gmat_py.ObjectTypeArrayMap_key_iterator(self)

    def value_iterator(self):
        return _gmat_py.ObjectTypeArrayMap_value_iterator(self)

    def __setitem__(self, *args):
        return _gmat_py.ObjectTypeArrayMap___setitem__(self, *args)

    def asdict(self):
        return _gmat_py.ObjectTypeArrayMap_asdict(self)

    def __init__(self, *args):
        _gmat_py.ObjectTypeArrayMap_swiginit(self, _gmat_py.new_ObjectTypeArrayMap(*args))

    def empty(self):
        return _gmat_py.ObjectTypeArrayMap_empty(self)

    def size(self):
        return _gmat_py.ObjectTypeArrayMap_size(self)

    def swap(self, v):
        return _gmat_py.ObjectTypeArrayMap_swap(self, v)

    def begin(self):
        return _gmat_py.ObjectTypeArrayMap_begin(self)

    def end(self):
        return _gmat_py.ObjectTypeArrayMap_end(self)

    def rbegin(self):
        return _gmat_py.ObjectTypeArrayMap_rbegin(self)

    def rend(self):
        return _gmat_py.ObjectTypeArrayMap_rend(self)

    def clear(self):
        return _gmat_py.ObjectTypeArrayMap_clear(self)

    def get_allocator(self):
        return _gmat_py.ObjectTypeArrayMap_get_allocator(self)

    def count(self, x):
        return _gmat_py.ObjectTypeArrayMap_count(self, x)

    def erase(self, *args):
        return _gmat_py.ObjectTypeArrayMap_erase(self, *args)

    def find(self, x):
        return _gmat_py.ObjectTypeArrayMap_find(self, x)

    def lower_bound(self, x):
        return _gmat_py.ObjectTypeArrayMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _gmat_py.ObjectTypeArrayMap_upper_bound(self, x)
    __swig_destroy__ = _gmat_py.delete_ObjectTypeArrayMap

# Register ObjectTypeArrayMap in _gmat_py:
_gmat_py.ObjectTypeArrayMap_swigregister(ObjectTypeArrayMap)
class GmatCommandArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.GmatCommandArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.GmatCommandArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.GmatCommandArray___bool__(self)

    def __len__(self):
        return _gmat_py.GmatCommandArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.GmatCommandArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.GmatCommandArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.GmatCommandArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.GmatCommandArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.GmatCommandArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.GmatCommandArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.GmatCommandArray_pop(self)

    def append(self, x):
        return _gmat_py.GmatCommandArray_append(self, x)

    def empty(self):
        return _gmat_py.GmatCommandArray_empty(self)

    def size(self):
        return _gmat_py.GmatCommandArray_size(self)

    def swap(self, v):
        return _gmat_py.GmatCommandArray_swap(self, v)

    def begin(self):
        return _gmat_py.GmatCommandArray_begin(self)

    def end(self):
        return _gmat_py.GmatCommandArray_end(self)

    def rbegin(self):
        return _gmat_py.GmatCommandArray_rbegin(self)

    def rend(self):
        return _gmat_py.GmatCommandArray_rend(self)

    def clear(self):
        return _gmat_py.GmatCommandArray_clear(self)

    def get_allocator(self):
        return _gmat_py.GmatCommandArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.GmatCommandArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.GmatCommandArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.GmatCommandArray_swiginit(self, _gmat_py.new_GmatCommandArray(*args))

    def push_back(self, x):
        return _gmat_py.GmatCommandArray_push_back(self, x)

    def front(self):
        return _gmat_py.GmatCommandArray_front(self)

    def back(self):
        return _gmat_py.GmatCommandArray_back(self)

    def assign(self, n, x):
        return _gmat_py.GmatCommandArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.GmatCommandArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.GmatCommandArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.GmatCommandArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.GmatCommandArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_GmatCommandArray

# Register GmatCommandArray in _gmat_py:
_gmat_py.GmatCommandArray_swigregister(GmatCommandArray)
class GmatTimeArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.GmatTimeArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.GmatTimeArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.GmatTimeArray___bool__(self)

    def __len__(self):
        return _gmat_py.GmatTimeArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.GmatTimeArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.GmatTimeArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.GmatTimeArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.GmatTimeArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.GmatTimeArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.GmatTimeArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.GmatTimeArray_pop(self)

    def append(self, x):
        return _gmat_py.GmatTimeArray_append(self, x)

    def empty(self):
        return _gmat_py.GmatTimeArray_empty(self)

    def size(self):
        return _gmat_py.GmatTimeArray_size(self)

    def swap(self, v):
        return _gmat_py.GmatTimeArray_swap(self, v)

    def begin(self):
        return _gmat_py.GmatTimeArray_begin(self)

    def end(self):
        return _gmat_py.GmatTimeArray_end(self)

    def rbegin(self):
        return _gmat_py.GmatTimeArray_rbegin(self)

    def rend(self):
        return _gmat_py.GmatTimeArray_rend(self)

    def clear(self):
        return _gmat_py.GmatTimeArray_clear(self)

    def get_allocator(self):
        return _gmat_py.GmatTimeArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.GmatTimeArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.GmatTimeArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.GmatTimeArray_swiginit(self, _gmat_py.new_GmatTimeArray(*args))

    def push_back(self, x):
        return _gmat_py.GmatTimeArray_push_back(self, x)

    def front(self):
        return _gmat_py.GmatTimeArray_front(self)

    def back(self):
        return _gmat_py.GmatTimeArray_back(self)

    def assign(self, n, x):
        return _gmat_py.GmatTimeArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.GmatTimeArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.GmatTimeArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.GmatTimeArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.GmatTimeArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_GmatTimeArray

# Register GmatTimeArray in _gmat_py:
_gmat_py.GmatTimeArray_swigregister(GmatTimeArray)
class RealArrayArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.RealArrayArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.RealArrayArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.RealArrayArray___bool__(self)

    def __len__(self):
        return _gmat_py.RealArrayArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.RealArrayArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.RealArrayArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.RealArrayArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.RealArrayArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.RealArrayArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.RealArrayArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.RealArrayArray_pop(self)

    def append(self, x):
        return _gmat_py.RealArrayArray_append(self, x)

    def empty(self):
        return _gmat_py.RealArrayArray_empty(self)

    def size(self):
        return _gmat_py.RealArrayArray_size(self)

    def swap(self, v):
        return _gmat_py.RealArrayArray_swap(self, v)

    def begin(self):
        return _gmat_py.RealArrayArray_begin(self)

    def end(self):
        return _gmat_py.RealArrayArray_end(self)

    def rbegin(self):
        return _gmat_py.RealArrayArray_rbegin(self)

    def rend(self):
        return _gmat_py.RealArrayArray_rend(self)

    def clear(self):
        return _gmat_py.RealArrayArray_clear(self)

    def get_allocator(self):
        return _gmat_py.RealArrayArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.RealArrayArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.RealArrayArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.RealArrayArray_swiginit(self, _gmat_py.new_RealArrayArray(*args))

    def push_back(self, x):
        return _gmat_py.RealArrayArray_push_back(self, x)

    def front(self):
        return _gmat_py.RealArrayArray_front(self)

    def back(self):
        return _gmat_py.RealArrayArray_back(self)

    def assign(self, n, x):
        return _gmat_py.RealArrayArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.RealArrayArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.RealArrayArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.RealArrayArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.RealArrayArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_RealArrayArray

# Register RealArrayArray in _gmat_py:
_gmat_py.RealArrayArray_swigregister(RealArrayArray)
class IntegerArrayArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.IntegerArrayArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.IntegerArrayArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.IntegerArrayArray___bool__(self)

    def __len__(self):
        return _gmat_py.IntegerArrayArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.IntegerArrayArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.IntegerArrayArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.IntegerArrayArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.IntegerArrayArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.IntegerArrayArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.IntegerArrayArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.IntegerArrayArray_pop(self)

    def append(self, x):
        return _gmat_py.IntegerArrayArray_append(self, x)

    def empty(self):
        return _gmat_py.IntegerArrayArray_empty(self)

    def size(self):
        return _gmat_py.IntegerArrayArray_size(self)

    def swap(self, v):
        return _gmat_py.IntegerArrayArray_swap(self, v)

    def begin(self):
        return _gmat_py.IntegerArrayArray_begin(self)

    def end(self):
        return _gmat_py.IntegerArrayArray_end(self)

    def rbegin(self):
        return _gmat_py.IntegerArrayArray_rbegin(self)

    def rend(self):
        return _gmat_py.IntegerArrayArray_rend(self)

    def clear(self):
        return _gmat_py.IntegerArrayArray_clear(self)

    def get_allocator(self):
        return _gmat_py.IntegerArrayArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.IntegerArrayArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.IntegerArrayArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.IntegerArrayArray_swiginit(self, _gmat_py.new_IntegerArrayArray(*args))

    def push_back(self, x):
        return _gmat_py.IntegerArrayArray_push_back(self, x)

    def front(self):
        return _gmat_py.IntegerArrayArray_front(self)

    def back(self):
        return _gmat_py.IntegerArrayArray_back(self)

    def assign(self, n, x):
        return _gmat_py.IntegerArrayArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.IntegerArrayArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.IntegerArrayArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.IntegerArrayArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.IntegerArrayArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_IntegerArrayArray

# Register IntegerArrayArray in _gmat_py:
_gmat_py.IntegerArrayArray_swigregister(IntegerArrayArray)
class PhysicalModelArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.PhysicalModelArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.PhysicalModelArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.PhysicalModelArray___bool__(self)

    def __len__(self):
        return _gmat_py.PhysicalModelArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.PhysicalModelArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.PhysicalModelArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.PhysicalModelArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.PhysicalModelArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.PhysicalModelArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.PhysicalModelArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.PhysicalModelArray_pop(self)

    def append(self, x):
        return _gmat_py.PhysicalModelArray_append(self, x)

    def empty(self):
        return _gmat_py.PhysicalModelArray_empty(self)

    def size(self):
        return _gmat_py.PhysicalModelArray_size(self)

    def swap(self, v):
        return _gmat_py.PhysicalModelArray_swap(self, v)

    def begin(self):
        return _gmat_py.PhysicalModelArray_begin(self)

    def end(self):
        return _gmat_py.PhysicalModelArray_end(self)

    def rbegin(self):
        return _gmat_py.PhysicalModelArray_rbegin(self)

    def rend(self):
        return _gmat_py.PhysicalModelArray_rend(self)

    def clear(self):
        return _gmat_py.PhysicalModelArray_clear(self)

    def get_allocator(self):
        return _gmat_py.PhysicalModelArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.PhysicalModelArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.PhysicalModelArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.PhysicalModelArray_swiginit(self, _gmat_py.new_PhysicalModelArray(*args))

    def push_back(self, x):
        return _gmat_py.PhysicalModelArray_push_back(self, x)

    def front(self):
        return _gmat_py.PhysicalModelArray_front(self)

    def back(self):
        return _gmat_py.PhysicalModelArray_back(self)

    def assign(self, n, x):
        return _gmat_py.PhysicalModelArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.PhysicalModelArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.PhysicalModelArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.PhysicalModelArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.PhysicalModelArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_PhysicalModelArray

# Register PhysicalModelArray in _gmat_py:
_gmat_py.PhysicalModelArray_swigregister(PhysicalModelArray)
class SpaceObjectArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.SpaceObjectArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.SpaceObjectArray___nonzero__(self)

    def __bool__(self):
        return _gmat_py.SpaceObjectArray___bool__(self)

    def __len__(self):
        return _gmat_py.SpaceObjectArray___len__(self)

    def __getslice__(self, i, j):
        return _gmat_py.SpaceObjectArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gmat_py.SpaceObjectArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gmat_py.SpaceObjectArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gmat_py.SpaceObjectArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gmat_py.SpaceObjectArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gmat_py.SpaceObjectArray___setitem__(self, *args)

    def pop(self):
        return _gmat_py.SpaceObjectArray_pop(self)

    def append(self, x):
        return _gmat_py.SpaceObjectArray_append(self, x)

    def empty(self):
        return _gmat_py.SpaceObjectArray_empty(self)

    def size(self):
        return _gmat_py.SpaceObjectArray_size(self)

    def swap(self, v):
        return _gmat_py.SpaceObjectArray_swap(self, v)

    def begin(self):
        return _gmat_py.SpaceObjectArray_begin(self)

    def end(self):
        return _gmat_py.SpaceObjectArray_end(self)

    def rbegin(self):
        return _gmat_py.SpaceObjectArray_rbegin(self)

    def rend(self):
        return _gmat_py.SpaceObjectArray_rend(self)

    def clear(self):
        return _gmat_py.SpaceObjectArray_clear(self)

    def get_allocator(self):
        return _gmat_py.SpaceObjectArray_get_allocator(self)

    def pop_back(self):
        return _gmat_py.SpaceObjectArray_pop_back(self)

    def erase(self, *args):
        return _gmat_py.SpaceObjectArray_erase(self, *args)

    def __init__(self, *args):
        _gmat_py.SpaceObjectArray_swiginit(self, _gmat_py.new_SpaceObjectArray(*args))

    def push_back(self, x):
        return _gmat_py.SpaceObjectArray_push_back(self, x)

    def front(self):
        return _gmat_py.SpaceObjectArray_front(self)

    def back(self):
        return _gmat_py.SpaceObjectArray_back(self)

    def assign(self, n, x):
        return _gmat_py.SpaceObjectArray_assign(self, n, x)

    def resize(self, *args):
        return _gmat_py.SpaceObjectArray_resize(self, *args)

    def insert(self, *args):
        return _gmat_py.SpaceObjectArray_insert(self, *args)

    def reserve(self, n):
        return _gmat_py.SpaceObjectArray_reserve(self, n)

    def capacity(self):
        return _gmat_py.SpaceObjectArray_capacity(self)
    __swig_destroy__ = _gmat_py.delete_SpaceObjectArray

# Register SpaceObjectArray in _gmat_py:
_gmat_py.SpaceObjectArray_swigregister(SpaceObjectArray)
class ObjectArrayMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gmat_py.ObjectArrayMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gmat_py.ObjectArrayMap___nonzero__(self)

    def __bool__(self):
        return _gmat_py.ObjectArrayMap___bool__(self)

    def __len__(self):
        return _gmat_py.ObjectArrayMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gmat_py.ObjectArrayMap___getitem__(self, key)

    def __delitem__(self, key):
        return _gmat_py.ObjectArrayMap___delitem__(self, key)

    def has_key(self, key):
        return _gmat_py.ObjectArrayMap_has_key(self, key)

    def keys(self):
        return _gmat_py.ObjectArrayMap_keys(self)

    def values(self):
        return _gmat_py.ObjectArrayMap_values(self)

    def items(self):
        return _gmat_py.ObjectArrayMap_items(self)

    def __contains__(self, key):
        return _gmat_py.ObjectArrayMap___contains__(self, key)

    def key_iterator(self):
        return _gmat_py.ObjectArrayMap_key_iterator(self)

    def value_iterator(self):
        return _gmat_py.ObjectArrayMap_value_iterator(self)

    def __setitem__(self, *args):
        return _gmat_py.ObjectArrayMap___setitem__(self, *args)

    def asdict(self):
        return _gmat_py.ObjectArrayMap_asdict(self)

    def __init__(self, *args):
        _gmat_py.ObjectArrayMap_swiginit(self, _gmat_py.new_ObjectArrayMap(*args))

    def empty(self):
        return _gmat_py.ObjectArrayMap_empty(self)

    def size(self):
        return _gmat_py.ObjectArrayMap_size(self)

    def swap(self, v):
        return _gmat_py.ObjectArrayMap_swap(self, v)

    def begin(self):
        return _gmat_py.ObjectArrayMap_begin(self)

    def end(self):
        return _gmat_py.ObjectArrayMap_end(self)

    def rbegin(self):
        return _gmat_py.ObjectArrayMap_rbegin(self)

    def rend(self):
        return _gmat_py.ObjectArrayMap_rend(self)

    def clear(self):
        return _gmat_py.ObjectArrayMap_clear(self)

    def get_allocator(self):
        return _gmat_py.ObjectArrayMap_get_allocator(self)

    def count(self, x):
        return _gmat_py.ObjectArrayMap_count(self, x)

    def erase(self, *args):
        return _gmat_py.ObjectArrayMap_erase(self, *args)

    def find(self, x):
        return _gmat_py.ObjectArrayMap_find(self, x)

    def lower_bound(self, x):
        return _gmat_py.ObjectArrayMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _gmat_py.ObjectArrayMap_upper_bound(self, x)
    __swig_destroy__ = _gmat_py.delete_ObjectArrayMap

# Register ObjectArrayMap in _gmat_py:
_gmat_py.ObjectArrayMap_swigregister(ObjectArrayMap)
INTEGER_TYPE = _gmat_py.INTEGER_TYPE
UNSIGNED_INT_TYPE = _gmat_py.UNSIGNED_INT_TYPE
UNSIGNED_INTARRAY_TYPE = _gmat_py.UNSIGNED_INTARRAY_TYPE
INTARRAY_TYPE = _gmat_py.INTARRAY_TYPE
REAL_TYPE = _gmat_py.REAL_TYPE
REALARRAY_TYPE = _gmat_py.REALARRAY_TYPE
REAL_ELEMENT_TYPE = _gmat_py.REAL_ELEMENT_TYPE
STRING_TYPE = _gmat_py.STRING_TYPE
STRINGARRAY_TYPE = _gmat_py.STRINGARRAY_TYPE
BOOLEAN_TYPE = _gmat_py.BOOLEAN_TYPE
BOOLEANARRAY_TYPE = _gmat_py.BOOLEANARRAY_TYPE
RVECTOR_TYPE = _gmat_py.RVECTOR_TYPE
RMATRIX_TYPE = _gmat_py.RMATRIX_TYPE
TIME_TYPE = _gmat_py.TIME_TYPE
OBJECT_TYPE = _gmat_py.OBJECT_TYPE
OBJECTARRAY_TYPE = _gmat_py.OBJECTARRAY_TYPE
ON_OFF_TYPE = _gmat_py.ON_OFF_TYPE
ENUMERATION_TYPE = _gmat_py.ENUMERATION_TYPE
FILENAME_TYPE = _gmat_py.FILENAME_TYPE
COLOR_TYPE = _gmat_py.COLOR_TYPE
GMATTIME_TYPE = _gmat_py.GMATTIME_TYPE
GENERIC_TYPE = _gmat_py.GENERIC_TYPE
EQUATION_TYPE = _gmat_py.EQUATION_TYPE
TypeCount = _gmat_py.TypeCount
UNKNOWN_PARAMETER_TYPE = _gmat_py.UNKNOWN_PARAMETER_TYPE
PARAMETER_REMOVED = _gmat_py.PARAMETER_REMOVED
ERROR_ = _gmat_py.ERROR_
WARNING_ = _gmat_py.WARNING_
INFO_ = _gmat_py.INFO_
DEBUG_ = _gmat_py.DEBUG_
GENERAL_ = _gmat_py.GENERAL_
IDLE = _gmat_py.IDLE
RUNNING = _gmat_py.RUNNING
PAUSED = _gmat_py.PAUSED
TARGETING = _gmat_py.TARGETING
OPTIMIZING = _gmat_py.OPTIMIZING
ESTIMATING = _gmat_py.ESTIMATING
SOLVING = _gmat_py.SOLVING
SOLVEDPASS = _gmat_py.SOLVEDPASS
WAITING = _gmat_py.WAITING
CREATED = _gmat_py.CREATED
CONVERGED = _gmat_py.CONVERGED
COPIED = _gmat_py.COPIED
INITIALIZED = _gmat_py.INITIALIZED
RUN = _gmat_py.RUN
IN_TOLERANCE = _gmat_py.IN_TOLERANCE
EXCEEDED_ITERATIONS = _gmat_py.EXCEEDED_ITERATIONS
EXCEEDED_LINE_SEARCH = _gmat_py.EXCEEDED_LINE_SEARCH
UPHILL_SEARCH = _gmat_py.UPHILL_SEARCH
INFEASIBLE = _gmat_py.INFEASIBLE
FAILED = _gmat_py.FAILED
UNKNOWN_STATUS = _gmat_py.UNKNOWN_STATUS
NUMBER_WT = _gmat_py.NUMBER_WT
VECTOR_WT = _gmat_py.VECTOR_WT
MATRIX_WT = _gmat_py.MATRIX_WT
STRING_WT = _gmat_py.STRING_WT
STRING_OBJECT_WT = _gmat_py.STRING_OBJECT_WT
OBJECT_PROPERTY_WT = _gmat_py.OBJECT_PROPERTY_WT
VARIABLE_WT = _gmat_py.VARIABLE_WT
ARRAY_WT = _gmat_py.ARRAY_WT
ARRAY_ELEMENT_WT = _gmat_py.ARRAY_ELEMENT_WT
PARAMETER_WT = _gmat_py.PARAMETER_WT
OBJECT_WT = _gmat_py.OBJECT_WT
BOOLEAN_WT = _gmat_py.BOOLEAN_WT
INTEGER_WT = _gmat_py.INTEGER_WT
ON_OFF_WT = _gmat_py.ON_OFF_WT
EQUATION_WT = _gmat_py.EQUATION_WT
UNKNOWN_WRAPPER_TYPE = _gmat_py.UNKNOWN_WRAPPER_TYPE
SUNDAY = _gmat_py.SUNDAY
MONDAY = _gmat_py.MONDAY
TUESDAY = _gmat_py.TUESDAY
WEDNESDAY = _gmat_py.WEDNESDAY
THURSDAY = _gmat_py.THURSDAY
FRIDAY = _gmat_py.FRIDAY
SATURDAY = _gmat_py.SATURDAY
JANUARY = _gmat_py.JANUARY
FEBRUARY = _gmat_py.FEBRUARY
MARCH = _gmat_py.MARCH
APRIL = _gmat_py.APRIL
MAY = _gmat_py.MAY
JUNE = _gmat_py.JUNE
JULY = _gmat_py.JULY
AUGUST = _gmat_py.AUGUST
SEPTEMBER = _gmat_py.SEPTEMBER
OCTOBER = _gmat_py.OCTOBER
NOVEMBER = _gmat_py.NOVEMBER
DECEMBER = _gmat_py.DECEMBER
PLUS = _gmat_py.PLUS
MINUS = _gmat_py.MINUS
class BaseException(Exception):
    r"""
    This class provides base exception class, from which all GMAT exceptions must
    be derived.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFullMessage(self):
        return _gmat_py.BaseException_GetFullMessage(self)

    def GetDetails(self):
        return _gmat_py.BaseException_GetDetails(self)

    def IsFatal(self):
        return _gmat_py.BaseException_IsFatal(self)

    def SetMessage(self, message):
        return _gmat_py.BaseException_SetMessage(self, message)

    def SetFatal(self, fatal):
        return _gmat_py.BaseException_SetFatal(self, fatal)

    def SetDetails(self, *args):
        return _gmat_py.BaseException_SetDetails(self, *args)

    def GetMessageType(self):
        return _gmat_py.BaseException_GetMessageType(self)

    def SetMessageType(self, mt):
        return _gmat_py.BaseException_SetMessageType(self, mt)
    MAX_MESSAGE_LENGTH = _gmat_py.BaseException_MAX_MESSAGE_LENGTH

# Register BaseException in _gmat_py:
_gmat_py.BaseException_swigregister(BaseException)
cvar = _gmat_py.cvar
REAL_TOL = cvar.REAL_TOL
REAL_UNDEFINED = cvar.REAL_UNDEFINED
REAL_UNDEFINED_LARGE = cvar.REAL_UNDEFINED_LARGE
INTEGER_MAX = cvar.INTEGER_MAX
SHORT_REAL_RADIX = cvar.SHORT_REAL_RADIX
REAL_EPSILON = cvar.REAL_EPSILON
REAL_DIG = cvar.REAL_DIG
REAL_MIN_EXP = cvar.REAL_MIN_EXP
REAL_MIN = cvar.REAL_MIN
REAL_MIN_10_EXP = cvar.REAL_MIN_10_EXP
REAL_MAX_EXP = cvar.REAL_MAX_EXP
REAL_MAX = cvar.REAL_MAX
REAL_MAX_10_EXP = cvar.REAL_MAX_10_EXP
SPEED_OF_LIGHT_VACUUM = cvar.SPEED_OF_LIGHT_VACUUM
c = cvar.c
UNIVERSAL_GRAVITATIONAL_CONSTANT = cvar.UNIVERSAL_GRAVITATIONAL_CONSTANT
ASTRONOMICAL_UNIT = cvar.ASTRONOMICAL_UNIT
ABSOLUTE_ZERO_K = cvar.ABSOLUTE_ZERO_K
ABSOLUTE_ZERO_C = cvar.ABSOLUTE_ZERO_C
INTEGER_UNDEFINED = cvar.INTEGER_UNDEFINED
SECS_PER_DAY = cvar.SECS_PER_DAY
SECS_PER_HOUR = cvar.SECS_PER_HOUR
SECS_PER_MINUTE = cvar.SECS_PER_MINUTE
DAYS_PER_YEAR = cvar.DAYS_PER_YEAR
DAYS_PER_JULIAN_CENTURY = cvar.DAYS_PER_JULIAN_CENTURY
DAYS_PER_SEC = cvar.DAYS_PER_SEC
TIME_OF_J2000 = cvar.TIME_OF_J2000
JD_OF_J2000 = cvar.JD_OF_J2000
MJD_OF_J2000 = cvar.MJD_OF_J2000
A1MJD_OF_J2000 = cvar.A1MJD_OF_J2000
JD_MJD_OFFSET = cvar.JD_MJD_OFFSET
TT_TAI_OFFSET = cvar.TT_TAI_OFFSET
A1_TAI_OFFSET = cvar.A1_TAI_OFFSET
JD_JAN_5_1941 = cvar.JD_JAN_5_1941
JD_NOV_17_1858 = cvar.JD_NOV_17_1858
DAYS_BEFORE_MONTH = cvar.DAYS_BEFORE_MONTH
LEAP_YEAR_DAYS_BEFORE_MONTH = cvar.LEAP_YEAR_DAYS_BEFORE_MONTH
DAYS_IN_MONTH = cvar.DAYS_IN_MONTH
LEAP_YEAR_DAYS_IN_MONTH = cvar.LEAP_YEAR_DAYS_IN_MONTH
JULIAN_DATE_OF_010541 = cvar.JULIAN_DATE_OF_010541
MJD_EPOCH_PRECISION = cvar.MJD_EPOCH_PRECISION
MONTH_NAME_TEXT = cvar.MONTH_NAME_TEXT
PI_DEG = cvar.PI_DEG
PI_OVER_TWO_DEG = cvar.PI_OVER_TWO_DEG
TWO_PI_DEG = cvar.TWO_PI_DEG
PI = cvar.PI
TWO_PI = cvar.TWO_PI
PI_OVER_TWO = cvar.PI_OVER_TWO
E = cvar.E
RAD_PER_DEG = cvar.RAD_PER_DEG
DEG_PER_RAD = cvar.DEG_PER_RAD
ARCSEC_PER_DEGREE = cvar.ARCSEC_PER_DEGREE
DEG_PER_ARCSEC = cvar.DEG_PER_ARCSEC
RAD_PER_ARCSEC = cvar.RAD_PER_ARCSEC
LBM_TO_KG = cvar.LBM_TO_KG
SLUG_TO_KG = cvar.SLUG_TO_KG
INCH_TO_M = cvar.INCH_TO_M
FOOT_TO_M = cvar.FOOT_TO_M
STATUTE_MILE_TO_M = cvar.STATUTE_MILE_TO_M
M_TO_KM = cvar.M_TO_KM
KM_TO_M = cvar.KM_TO_M
QUIET_NAN = cvar.QUIET_NAN
ORBIT_REAL_UNDEFINED = cvar.ORBIT_REAL_UNDEFINED
KEP_TOL = cvar.KEP_TOL
KEP_ANOMALY_TOL = cvar.KEP_ANOMALY_TOL
KEP_ZERO_TOL = cvar.KEP_ZERO_TOL
KEP_ECC_TOL = cvar.KEP_ECC_TOL
ECC_RANGE_TOL = cvar.ECC_RANGE_TOL
ATTITUDE_REAL_UNDEFINED = cvar.ATTITUDE_REAL_UNDEFINED
QUAT_MIN_MAG = cvar.QUAT_MIN_MAG
EULER_ANGLE_TOLERANCE = cvar.EULER_ANGLE_TOLERANCE
DCM_ORTHONORMALITY_TOLERANCE = cvar.DCM_ORTHONORMALITY_TOLERANCE

class Date(object):
    r"""
    This class is abstrace base class which provides conversions among various
    ways of representing calendar dates and times.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetYear(self):
        return _gmat_py.Date_GetYear(self)

    def GetMonth(self):
        return _gmat_py.Date_GetMonth(self)

    def GetDay(self):
        return _gmat_py.Date_GetDay(self)

    def GetSecondsOfDay(self):
        return _gmat_py.Date_GetSecondsOfDay(self)

    def GetHour(self):
        return _gmat_py.Date_GetHour(self)

    def GetMinute(self):
        return _gmat_py.Date_GetMinute(self)

    def GetSecond(self):
        return _gmat_py.Date_GetSecond(self)

    def GetDayName(self):
        return _gmat_py.Date_GetDayName(self)

    def GetDaysPerMonth(self):
        return _gmat_py.Date_GetDaysPerMonth(self)

    def GetMonthName(self):
        return _gmat_py.Date_GetMonthName(self)

    def ToPackedCalendarReal(self):
        return _gmat_py.Date_ToPackedCalendarReal(self)

    def ToPackedYYYMMDD(self):
        return _gmat_py.Date_ToPackedYYYMMDD(self)

    def ToPackedHHMMSS(self):
        return _gmat_py.Date_ToPackedHHMMSS(self)

    def ToDayOfYear(self):
        return _gmat_py.Date_ToDayOfYear(self)

    def ToPackedCalendarString(self):
        return _gmat_py.Date_ToPackedCalendarString(self)

    def ToYearDOYHourMinSec(self, year, dayOfYear, hour, minute, second):
        return _gmat_py.Date_ToYearDOYHourMinSec(self, year, dayOfYear, hour, minute, second)

    def ToYearMonthDayHourMinSec(self, *args):
        return _gmat_py.Date_ToYearMonthDayHourMinSec(self, *args)

    def IsValid(self):
        return _gmat_py.Date_IsValid(self)

    def GetNumData(self):
        return _gmat_py.Date_GetNumData(self)

    def GetDataDescriptions(self):
        return _gmat_py.Date_GetDataDescriptions(self)

    def ToValueStrings(self):
        return _gmat_py.Date_ToValueStrings(self)

# Register Date in _gmat_py:
_gmat_py.Date_swigregister(Date)
class A1Date(Date):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.A1Date_swiginit(self, _gmat_py.new_A1Date(*args))

    def __gt__(self, a1date):
        return _gmat_py.A1Date___gt__(self, a1date)

    def __lt__(self, a1date):
        return _gmat_py.A1Date___lt__(self, a1date)
    __swig_destroy__ = _gmat_py.delete_A1Date

# Register A1Date in _gmat_py:
_gmat_py.A1Date_swigregister(A1Date)
class A1Mjd(object):
    r"""
    This class provides A1 Modified Julian Date(MJD). The zero date of the MJD
    12 noon on January 5th, 1941.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.A1Mjd_swiginit(self, _gmat_py.new_A1Mjd(*args))

    def Clone(self):
        return _gmat_py.A1Mjd_Clone(self)
    __swig_destroy__ = _gmat_py.delete_A1Mjd

    def __add__(self, *args):
        return _gmat_py.A1Mjd___add__(self, *args)

    def __sub__(self, *args):
        return _gmat_py.A1Mjd___sub__(self, *args)

    def __iadd__(self, *args):
        return _gmat_py.A1Mjd___iadd__(self, *args)

    def __isub__(self, *args):
        return _gmat_py.A1Mjd___isub__(self, *args)

    def __lt__(self, right):
        return _gmat_py.A1Mjd___lt__(self, right)

    def __gt__(self, right):
        return _gmat_py.A1Mjd___gt__(self, right)

    def __eq__(self, right):
        return _gmat_py.A1Mjd___eq__(self, right)

    def __ne__(self, right):
        return _gmat_py.A1Mjd___ne__(self, right)

    def __ge__(self, right):
        return _gmat_py.A1Mjd___ge__(self, right)

    def __le__(self, right):
        return _gmat_py.A1Mjd___le__(self, right)

    def Subtract(self, *args):
        return _gmat_py.A1Mjd_Subtract(self, *args)

    def Get(self):
        return _gmat_py.A1Mjd_Get(self)

    def Set(self, val):
        return _gmat_py.A1Mjd_Set(self, val)

    def GetReal(self):
        return _gmat_py.A1Mjd_GetReal(self)

    def SetReal(self, val):
        return _gmat_py.A1Mjd_SetReal(self, val)

    def ToUtcDate(self):
        return _gmat_py.A1Mjd_ToUtcDate(self)

    def ToA1Date(self, handleLeapSecond=False):
        return _gmat_py.A1Mjd_ToA1Date(self, handleLeapSecond)

    def UtcMjdToA1Mjd(self, utcMjd):
        return _gmat_py.A1Mjd_UtcMjdToA1Mjd(self, utcMjd)

    def ToUtcMjd(self):
        return _gmat_py.A1Mjd_ToUtcMjd(self)

    def GetNumData(self):
        return _gmat_py.A1Mjd_GetNumData(self)

    def GetDataDescriptions(self):
        return _gmat_py.A1Mjd_GetDataDescriptions(self)

    def ToValueStrings(self):
        return _gmat_py.A1Mjd_ToValueStrings(self)

# Register A1Mjd in _gmat_py:
_gmat_py.A1Mjd_swigregister(A1Mjd)
A1Mjd.J2000 = _gmat_py.cvar.A1Mjd_J2000

class AngleUtil(object):
    r"""Declares AngleUtil which provides various angle computation."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def PutAngleInDegRange(angleInDeg, minAngleInDeg, maxAngleInDeg):
        return _gmat_py.AngleUtil_PutAngleInDegRange(angleInDeg, minAngleInDeg, maxAngleInDeg)

    @staticmethod
    def PutAngleInRadRange(angleInRad, minAngleInRad, maxAngleInRad):
        return _gmat_py.AngleUtil_PutAngleInRadRange(angleInRad, minAngleInRad, maxAngleInRad)

    @staticmethod
    def ComputePhaseAngleInDeg(axis1, axis2):
        return _gmat_py.AngleUtil_ComputePhaseAngleInDeg(axis1, axis2)

    @staticmethod
    def ComputePhaseAngleInRad(axis1, axis2):
        return _gmat_py.AngleUtil_ComputePhaseAngleInRad(axis1, axis2)

    @staticmethod
    def ComputeAngleInDeg(vecA, vecB, tol=0.99):
        return _gmat_py.AngleUtil_ComputeAngleInDeg(vecA, vecB, tol)

    def __init__(self):
        _gmat_py.AngleUtil_swiginit(self, _gmat_py.new_AngleUtil())
    __swig_destroy__ = _gmat_py.delete_AngleUtil

# Register AngleUtil in _gmat_py:
_gmat_py.AngleUtil_swigregister(AngleUtil)
class ArrayTemplateReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ArrayTemplateReal_swiginit(self, _gmat_py.new_ArrayTemplateReal(*args))
    __swig_destroy__ = _gmat_py.delete_ArrayTemplateReal

    def __eq__(self, array):
        return _gmat_py.ArrayTemplateReal___eq__(self, array)

    def __ne__(self, array):
        return _gmat_py.ArrayTemplateReal___ne__(self, array)

    def IsSized(self):
        return _gmat_py.ArrayTemplateReal_IsSized(self)

    def SetSize(self, size):
        return _gmat_py.ArrayTemplateReal_SetSize(self, size)

    def GetSize(self):
        return _gmat_py.ArrayTemplateReal_GetSize(self)

    def Resize(self, size):
        return _gmat_py.ArrayTemplateReal_Resize(self, size)

    def GetElement(self, index):
        return _gmat_py.ArrayTemplateReal_GetElement(self, index)

    def SetElement(self, index, value):
        return _gmat_py.ArrayTemplateReal_SetElement(self, index, value)

    def GetDataVector(self):
        return _gmat_py.ArrayTemplateReal_GetDataVector(self)

    def __setitem__(self, index, value):
        if isinstance(index, slice):
            index_list = list(range(self.GetSize())[index])
            out = []
            for ii in range(len(index_list)):
                out.append(_gmat_py.ArrayTemplateReal___setitem__(self, index_list[ii], value[ii]))
            return out
        elif isinstance(index, list):
            out = []
            for ii in range(len(index)):
                out.append(_gmat_py.ArrayTemplateReal___setitem__(self, index[ii], value[ii]))
            return out
        else:
            if index < 0:
                index += self.GetSize()
            return _gmat_py.ArrayTemplateReal___setitem__(self, index, value)



    def __getitem__(self, index):
        if isinstance(index, slice): # Handle slice indexing
            index_list = list(range(self.GetSize())[index])
            return [_gmat_py.ArrayTemplateReal___getitem__(self, idx) for idx in index_list]
        elif isinstance(index, list):
            return [_gmat_py.ArrayTemplateReal___getitem__(self, idx) for idx in index]
        else:
            if index < 0: # Handle negative index
                index += self.GetSize()
            return _gmat_py.ArrayTemplateReal___getitem__(self, index)



# Register ArrayTemplateReal in _gmat_py:
_gmat_py.ArrayTemplateReal_swigregister(ArrayTemplateReal)
class AttitudeConversionUtility(object):
    r"""
    Definition of the static class containing methods to convert between
    attitude state representations.
    This is a static class: No instances of this class may be declared.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def ToCosineMatrix(*args):
        return _gmat_py.AttitudeConversionUtility_ToCosineMatrix(*args)

    @staticmethod
    def ToEulerAngles(*args):
        return _gmat_py.AttitudeConversionUtility_ToEulerAngles(*args)

    @staticmethod
    def ToQuaternion(*args):
        return _gmat_py.AttitudeConversionUtility_ToQuaternion(*args)

    @staticmethod
    def ToMRPs(quat1):
        return _gmat_py.AttitudeConversionUtility_ToMRPs(quat1)

    @staticmethod
    def ToEulerAngleRates(angularVel, eulerAngles, seq1, seq2, seq3):
        return _gmat_py.AttitudeConversionUtility_ToEulerAngleRates(angularVel, eulerAngles, seq1, seq2, seq3)

    @staticmethod
    def ToAngularVelocity(eulerRates, eulerAngles, seq1, seq2, seq3):
        return _gmat_py.AttitudeConversionUtility_ToAngularVelocity(eulerRates, eulerAngles, seq1, seq2, seq3)

    @staticmethod
    def EulerAxisAndAngleToDCM(eAxis, eAngle):
        return _gmat_py.AttitudeConversionUtility_EulerAxisAndAngleToDCM(eAxis, eAngle)

    @staticmethod
    def DCMToEulerAxisAndAngle(cosMat, eAxis, eAngle):
        return _gmat_py.AttitudeConversionUtility_DCMToEulerAxisAndAngle(cosMat, eAxis, eAngle)

    @staticmethod
    def IsValidEulerSequence(theSeq):
        return _gmat_py.AttitudeConversionUtility_IsValidEulerSequence(theSeq)

# Register AttitudeConversionUtility in _gmat_py:
_gmat_py.AttitudeConversionUtility_swigregister(AttitudeConversionUtility)

def BodyFixedStateConvert(*args):
    return _gmat_py.BodyFixedStateConvert(*args)

def CartesianToSpherical(cart, flattening, meanRadius):
    return _gmat_py.CartesianToSpherical(cart, flattening, meanRadius)

def SphericalToCartesian(spherical, flattening, meanRadius):
    return _gmat_py.SphericalToCartesian(spherical, flattening, meanRadius)

def SphericalEllipsoidToCartesian(sphEll, flattening, meanRadius):
    return _gmat_py.SphericalEllipsoidToCartesian(sphEll, flattening, meanRadius)

def CartesianToSphericalEllipsoid(cart, flattening, meanRadius):
    return _gmat_py.CartesianToSphericalEllipsoid(cart, flattening, meanRadius)

def SphericalToSphericalEllipsoid(spherical, flattening, meanRadius):
    return _gmat_py.SphericalToSphericalEllipsoid(spherical, flattening, meanRadius)

def SphericalEllipsoidToSpherical(sphEll, flattening, meanRadius):
    return _gmat_py.SphericalEllipsoidToSpherical(sphEll, flattening, meanRadius)

def IsValidStateRepresentation(rep):
    return _gmat_py.IsValidStateRepresentation(rep)

def GetValidRepresentations():
    return _gmat_py.GetValidRepresentations()

def CalculateBPlaneData(item, state, originMu):
    r"""
    This namespace provides Calculation Utilities that can be used to compute the
    GMAT Calculation Objects.

    NOTE: the input state must be in the coordinate system desired - no
          conversions are done here
    """
    return _gmat_py.CalculateBPlaneData(item, state, originMu)

def CalculateAngularData(item, state, originMu, originToSunUnit):
    return _gmat_py.CalculateAngularData(item, state, originMu, originToSunUnit)

def CalculateKeplerianData(item, state, originMu):
    return _gmat_py.CalculateKeplerianData(item, state, originMu)

def CalculatePlanetData(item, state, originRadius, originFlattening, originHourAngle):
    return _gmat_py.CalculatePlanetData(item, state, originRadius, originFlattening, originHourAngle)
class CCSDSEMReader(object):
    r"""
    Reads a CCSDS Ephemeris Message file, and manages segments.
    This is the abstract base class from which other classes must derive (e.g.
    a class to handle attitude files).
    TODO: Add assumptions and general file requirements here
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CCSDSEMReader

    def Clone(self):
        return _gmat_py.CCSDSEMReader_Clone(self)

    def Initialize(self):
        r"""
        Initialize will parse the file, initialize and validate each
        segment, and check to make sure the segments are ordered
        correctly by increasing time
        """
        return _gmat_py.CCSDSEMReader_Initialize(self)

    def IsInitialized(self):
        return _gmat_py.CCSDSEMReader_IsInitialized(self)

    def SetFile(self, theEMFile):
        r""" Set the EM file name"""
        return _gmat_py.CCSDSEMReader_SetFile(self, theEMFile)

    def GetVersion(self):
        r"""
        GetState method should be added to child class, to return
        data in needed form
        """
        return _gmat_py.CCSDSEMReader_GetVersion(self)

    def GetOriginator(self):
        return _gmat_py.CCSDSEMReader_GetOriginator(self)

    def GetCreationDate(self):
        return _gmat_py.CCSDSEMReader_GetCreationDate(self)

    def GetNumberOfSegments(self):
        return _gmat_py.CCSDSEMReader_GetNumberOfSegments(self)

    def GetSegmentNumber(self, epoch):
        r"""
        Returns the segment number for the segment containing the
        requested time (using usable start/stop time if they exist,
        otherwise using start and stop time)
        """
        return _gmat_py.CCSDSEMReader_GetSegmentNumber(self, epoch)

    def GetSegment(self, *args):
        r"""
        *Overload 1:*
        Returns the current segment

        |

        *Overload 2:*
        Returns the segment number requested

        |

        *Overload 3:*
        Returns the segment that contains the epoch specified
        (using usable start/stop time if they exist; otherwise,
        using start and stop time)
        """
        return _gmat_py.CCSDSEMReader_GetSegment(self, *args)

# Register CCSDSEMReader in _gmat_py:
_gmat_py.CCSDSEMReader_swigregister(CCSDSEMReader)
NUM_STATE_REPRESENTATIONS = cvar.NUM_STATE_REPRESENTATIONS
BODY_FIXED_STATE_REPRESENTATION_TEXT = cvar.BODY_FIXED_STATE_REPRESENTATION_TEXT

class CovarianceRecord(object):
    r"""
    Stores, validates, and manages meta data and real data read from, or
    to be written to, a CCSDS Ephemeris Message file.
    This is the abstract base class from which other classes must derive (e.g.
    a class to handle attitude segments).
    Currently, the common meta data fields handled in this base class are:
       COMMENT *
       OBJECT_NAME *
       OBJECT_ID *
       CENTER_NAME **
       TIME_SYSTEM
       START_TIME
       USEABLE_START_TIME
       USEABLE_STOP_TIME
       STOP_TIME
       INTERPOLATION_DEGREE
          * GMAT saves but ignores these
          ** GMAT saves this but validates in child classes

    In addition, the data fields handled here are:
       COMMENT

       All others needed must be handled in the appropriate child class.


     struct hold a covariance record
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    epoch = property(_gmat_py.CovarianceRecord_epoch_get, _gmat_py.CovarianceRecord_epoch_set)
    refFrame = property(_gmat_py.CovarianceRecord_refFrame_get, _gmat_py.CovarianceRecord_refFrame_set)
    comment = property(_gmat_py.CovarianceRecord_comment_get, _gmat_py.CovarianceRecord_comment_set)
    covar = property(_gmat_py.CovarianceRecord_covar_get, _gmat_py.CovarianceRecord_covar_set)

    def SetValue(self, ep, frame, commt, cov):
        return _gmat_py.CovarianceRecord_SetValue(self, ep, frame, commt, cov)

    def __init__(self):
        _gmat_py.CovarianceRecord_swiginit(self, _gmat_py.new_CovarianceRecord())
    __swig_destroy__ = _gmat_py.delete_CovarianceRecord

# Register CovarianceRecord in _gmat_py:
_gmat_py.CovarianceRecord_swigregister(CovarianceRecord)
class CCSDSEMSegment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def ParseEpoch(epochString):
        r"""
        Parse a time string read from the EM file and convert it to
        a Real (A1Mjd) epoch
        """
        return _gmat_py.CCSDSEMSegment_ParseEpoch(epochString)
    __swig_destroy__ = _gmat_py.delete_CCSDSEMSegment

    def Clone(self):
        return _gmat_py.CCSDSEMSegment_Clone(self)

    def Validate(self, checkData=True):
        return _gmat_py.CCSDSEMSegment_Validate(self, checkData)

    def SetMetaData(self, fieldName, value):
        r""" Sets a meta data field - assumes fields are all Caps"""
        return _gmat_py.CCSDSEMSegment_SetMetaData(self, fieldName, value)

    def GetStringMetaData(self, fieldName):
        return _gmat_py.CCSDSEMSegment_GetStringMetaData(self, fieldName)

    def GetRealMetaData(self, fieldName):
        return _gmat_py.CCSDSEMSegment_GetRealMetaData(self, fieldName)

    def GetIntegerMetaData(self, fieldName):
        return _gmat_py.CCSDSEMSegment_GetIntegerMetaData(self, fieldName)

    def SetMetaDataForWriting(self, fieldName, value):
        return _gmat_py.CCSDSEMSegment_SetMetaDataForWriting(self, fieldName, value)

    def AddData(self, epoch, data, justCheckDataSize=False):
        return _gmat_py.CCSDSEMSegment_AddData(self, epoch, data, justCheckDataSize)

    def AddMetaComment(self, comment):
        return _gmat_py.CCSDSEMSegment_AddMetaComment(self, comment)

    def AddDataComment(self, comment):
        return _gmat_py.CCSDSEMSegment_AddDataComment(self, comment)

    def ClearMetaComments(self):
        return _gmat_py.CCSDSEMSegment_ClearMetaComments(self)

    def ClearDataComments(self):
        return _gmat_py.CCSDSEMSegment_ClearDataComments(self)

    def ClearMetaData(self):
        return _gmat_py.CCSDSEMSegment_ClearMetaData(self)

    def ClearDataStore(self):
        return _gmat_py.CCSDSEMSegment_ClearDataStore(self)

    def GetDataSize(self):
        return _gmat_py.CCSDSEMSegment_GetDataSize(self)

    def SetDataSize(self, size):
        return _gmat_py.CCSDSEMSegment_SetDataSize(self, size)

    def CoversEpoch(self, theEpoch):
        return _gmat_py.CCSDSEMSegment_CoversEpoch(self, theEpoch)

    def GetStartTime(self):
        return _gmat_py.CCSDSEMSegment_GetStartTime(self)

    def GetStopTime(self):
        return _gmat_py.CCSDSEMSegment_GetStopTime(self)

    def GetMetaDataForWriting(self):
        return _gmat_py.CCSDSEMSegment_GetMetaDataForWriting(self)

    def GetMetaComments(self):
        return _gmat_py.CCSDSEMSegment_GetMetaComments(self)

    def GetDataComments(self):
        return _gmat_py.CCSDSEMSegment_GetDataComments(self)

    def GetNumberOfDataPoints(self):
        return _gmat_py.CCSDSEMSegment_GetNumberOfDataPoints(self)

    def GetEpochAndData(self, index, epoch, data):
        return _gmat_py.CCSDSEMSegment_GetEpochAndData(self, index, epoch, data)

    def GetFormatVersion(self):
        return _gmat_py.CCSDSEMSegment_GetFormatVersion(self)

    def SetFormatVersion(self, ver):
        return _gmat_py.CCSDSEMSegment_SetFormatVersion(self, ver)

    def GetRefFrame(self):
        return _gmat_py.CCSDSEMSegment_GetRefFrame(self)

    def GetCovarianceRecord(self, recNum):
        return _gmat_py.CCSDSEMSegment_GetCovarianceRecord(self, recNum)

    def GetCovarianceRecordNumber(self):
        return _gmat_py.CCSDSEMSegment_GetCovarianceRecordNumber(self)

    def ClearAllCovarianceRecords(self):
        return _gmat_py.CCSDSEMSegment_ClearAllCovarianceRecords(self)

    def AddCovarianceRecord(self, rec):
        return _gmat_py.CCSDSEMSegment_AddCovarianceRecord(self, rec)

# Register CCSDSEMSegment in _gmat_py:
_gmat_py.CCSDSEMSegment_swigregister(CCSDSEMSegment)
class CCSDSAEMReader(CCSDSEMReader):
    r"""Reads a CCSDS Attitude Ephemeris Message file, and manages segments."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.CCSDSAEMReader_swiginit(self, _gmat_py.new_CCSDSAEMReader(*args))
    __swig_destroy__ = _gmat_py.delete_CCSDSAEMReader

    def Clone(self):
        return _gmat_py.CCSDSAEMReader_Clone(self)

    def Initialize(self):
        r"""
        Initialize will parse the file, initialize and validate each
        segment, and check to make sure the segments are ordered
        correctly by increasing time
        """
        return _gmat_py.CCSDSAEMReader_Initialize(self)

    def GetState(self, atEpoch):
        r""" Returns the DCM from inertial-to-body given the input epoch"""
        return _gmat_py.CCSDSAEMReader_GetState(self, atEpoch)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CCSDSAEMReader_SetClass(base)

# Register CCSDSAEMReader in _gmat_py:
_gmat_py.CCSDSAEMReader_swigregister(CCSDSAEMReader)
class CCSDSAEMSegment(CCSDSEMSegment):
    r"""
    Stores, validates, and manages meta data and real data read from, or
    to be written to, a CCSDS Attitude Ephemeris Message (AEM) file.
    This is the attitude base class from which other attitude classes must
    derive (e.g. a class to handle quaternion segments).
    This class currently handles the following meta data fields:
       REF_FRAME_A
       REF_FRAME_B
       ATTITUDE_DIR
       ATTITUDE_TYPE
       INTERPOLATION_METHOD
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CCSDSAEMSegment

    def GetState(self, atEpoch):
        return _gmat_py.CCSDSAEMSegment_GetState(self, atEpoch)

    def Validate(self, checkData=True):
        return _gmat_py.CCSDSAEMSegment_Validate(self, checkData)

    def SetMetaData(self, fieldName, value):
        return _gmat_py.CCSDSAEMSegment_SetMetaData(self, fieldName, value)

    def IsRotationInertialToBody(self):
        r"""
        Returns true of the rotation is inertial-to-body; false
        if the rotation is body-to-inertial
        """
        return _gmat_py.CCSDSAEMSegment_IsRotationInertialToBody(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CCSDSAEMSegment_SetClass(base)

# Register CCSDSAEMSegment in _gmat_py:
_gmat_py.CCSDSAEMSegment_swigregister(CCSDSAEMSegment)
class CCSDSAEMEulerAngleSegment(CCSDSAEMSegment):
    r"""
    Stores, validates, and manages meta data and Euler Angle real data read from,
    or to be written to, a CCSDS Attitude Ephemeris Message file.
    Currently, the meta data fields handled in this base class are:
       EULER_ROT_SEQ
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.CCSDSAEMEulerAngleSegment_swiginit(self, _gmat_py.new_CCSDSAEMEulerAngleSegment(*args))
    __swig_destroy__ = _gmat_py.delete_CCSDSAEMEulerAngleSegment

    def Clone(self):
        return _gmat_py.CCSDSAEMEulerAngleSegment_Clone(self)

    def Validate(self, checkData=True):
        return _gmat_py.CCSDSAEMEulerAngleSegment_Validate(self, checkData)

    def GetState(self, atEpoch):
        return _gmat_py.CCSDSAEMEulerAngleSegment_GetState(self, atEpoch)

    def SetMetaData(self, fieldName, value):
        return _gmat_py.CCSDSAEMEulerAngleSegment_SetMetaData(self, fieldName, value)

    def AddData(self, epoch, data, justCheckDataSize=False):
        return _gmat_py.CCSDSAEMEulerAngleSegment_AddData(self, epoch, data, justCheckDataSize)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CCSDSAEMEulerAngleSegment_SetClass(base)

# Register CCSDSAEMEulerAngleSegment in _gmat_py:
_gmat_py.CCSDSAEMEulerAngleSegment_swigregister(CCSDSAEMEulerAngleSegment)
class CCSDSAEMQuaternionSegment(CCSDSAEMSegment):
    r"""
    Stores, validates, and manages meta data and Quaternion real data read from,
    or to be written to, a CCSDS Attitude Ephemeris Message file.
    Currently, the meta data fields handled in this base class are:
       QUATERNION_TYPE
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.CCSDSAEMQuaternionSegment_swiginit(self, _gmat_py.new_CCSDSAEMQuaternionSegment(*args))
    __swig_destroy__ = _gmat_py.delete_CCSDSAEMQuaternionSegment

    def Clone(self):
        return _gmat_py.CCSDSAEMQuaternionSegment_Clone(self)

    def Validate(self, checkData=True):
        return _gmat_py.CCSDSAEMQuaternionSegment_Validate(self, checkData)

    def GetState(self, atEpoch):
        return _gmat_py.CCSDSAEMQuaternionSegment_GetState(self, atEpoch)

    def SetMetaData(self, fieldName, value):
        return _gmat_py.CCSDSAEMQuaternionSegment_SetMetaData(self, fieldName, value)

    def AddData(self, epoch, data, justCheckDataSize=False):
        return _gmat_py.CCSDSAEMQuaternionSegment_AddData(self, epoch, data, justCheckDataSize)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CCSDSAEMQuaternionSegment_SetClass(base)

# Register CCSDSAEMQuaternionSegment in _gmat_py:
_gmat_py.CCSDSAEMQuaternionSegment_swigregister(CCSDSAEMQuaternionSegment)
class Code500EphemerisFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Code500EphemerisFile

    def __init__(self, *args):
        _gmat_py.Code500EphemerisFile_swiginit(self, _gmat_py.new_Code500EphemerisFile(*args))

    def Initialize(self):
        return _gmat_py.Code500EphemerisFile_Initialize(self)

    def Validate(self):
        return _gmat_py.Code500EphemerisFile_Validate(self)

    def OpenForRead(self, filename, fileFormat=0, logOption=0):
        return _gmat_py.Code500EphemerisFile_OpenForRead(self, filename, fileFormat, logOption)

    def OpenForWrite(self, filename, fileFormat=1):
        return _gmat_py.Code500EphemerisFile_OpenForWrite(self, filename, fileFormat)

    def CloseForRead(self):
        return _gmat_py.Code500EphemerisFile_CloseForRead(self)

    def CloseForWrite(self):
        return _gmat_py.Code500EphemerisFile_CloseForWrite(self)

    def IsProcessorLittleEndian(self):
        return _gmat_py.Code500EphemerisFile_IsProcessorLittleEndian(self)

    def IsFileEndianSwapped(self):
        return _gmat_py.Code500EphemerisFile_IsFileEndianSwapped(self)

    def ReadHeader1(self, logOption=0):
        return _gmat_py.Code500EphemerisFile_ReadHeader1(self, logOption)

    def ReadHeader2(self, logOption=0):
        return _gmat_py.Code500EphemerisFile_ReadHeader2(self, logOption)

    def ReadDataAt(self, dataRecNumber, logOption=0):
        return _gmat_py.Code500EphemerisFile_ReadDataAt(self, dataRecNumber, logOption)

    def ReadDataRecords(self, numRecordsToRead=-999, logOption=0):
        return _gmat_py.Code500EphemerisFile_ReadDataRecords(self, numRecordsToRead, logOption)

    def GetInitialAndFinalStates(self, initialEpoch, finalEpoch, initialState, finalState, centralBody, coordSystem, coordSysIndicator):
        return _gmat_py.Code500EphemerisFile_GetInitialAndFinalStates(self, initialEpoch, finalEpoch, initialState, finalState, centralBody, coordSystem, coordSysIndicator)

    def SetCentralBodyMu(self, mu):
        return _gmat_py.Code500EphemerisFile_SetCentralBodyMu(self, mu)

    def SetTimeIntervalBetweenPoints(self, secs):
        return _gmat_py.Code500EphemerisFile_SetTimeIntervalBetweenPoints(self, secs)

    def SetInitialEpoch(self, a1Mjd):
        return _gmat_py.Code500EphemerisFile_SetInitialEpoch(self, a1Mjd)

    def SetInitialState(self, kmsec):
        return _gmat_py.Code500EphemerisFile_SetInitialState(self, kmsec)

    def SetInitialCartesianState(self, cartState):
        return _gmat_py.Code500EphemerisFile_SetInitialCartesianState(self, cartState)

    def SetInitialKeplerianState(self, kepState):
        return _gmat_py.Code500EphemerisFile_SetInitialKeplerianState(self, kepState)

    def FinalizeHeaders(self):
        return _gmat_py.Code500EphemerisFile_FinalizeHeaders(self)

    def WriteHeader1(self):
        return _gmat_py.Code500EphemerisFile_WriteHeader1(self)

    def WriteHeader2(self):
        return _gmat_py.Code500EphemerisFile_WriteHeader2(self)

    def WriteDataAt(self, recNumber):
        return _gmat_py.Code500EphemerisFile_WriteDataAt(self, recNumber)

    def WriteDataSegment(self, epochArray, stateArray, canFinalize=False):
        return _gmat_py.Code500EphemerisFile_WriteDataSegment(self, epochArray, stateArray, canFinalize)

    def SetSwapEndian(self, swapEndian, fileMode):
        return _gmat_py.Code500EphemerisFile_SetSwapEndian(self, swapEndian, fileMode)

    def GetSwapEndian(self, fileMode):
        return _gmat_py.Code500EphemerisFile_GetSwapEndian(self, fileMode)

    def SwapDoubleEndian(self, value):
        return _gmat_py.Code500EphemerisFile_SwapDoubleEndian(self, value)

    def SwapIntegerEndian(self, value):
        return _gmat_py.Code500EphemerisFile_SwapIntegerEndian(self, value)

    def ConvertAsciiToEbcdic(self, ascii, ebcdic, numChars):
        return _gmat_py.Code500EphemerisFile_ConvertAsciiToEbcdic(self, ascii, ebcdic, numChars)

    def ConvertEbcdicToAscii(self, ebcdic, ascii, numChars):
        return _gmat_py.Code500EphemerisFile_ConvertEbcdicToAscii(self, ebcdic, ascii, numChars)

    def GetTimeSystem(self):
        return _gmat_py.Code500EphemerisFile_GetTimeSystem(self)

    def GetCentralBody(self):
        return _gmat_py.Code500EphemerisFile_GetCentralBody(self)

    def GetCoordSystemIndicator(self):
        return _gmat_py.Code500EphemerisFile_GetCoordSystemIndicator(self)

    def ReadDoubleField(self, field):
        return _gmat_py.Code500EphemerisFile_ReadDoubleField(self, field)

    def ReadIntegerField(self, field):
        return _gmat_py.Code500EphemerisFile_ReadIntegerField(self, field)
    RECORD_SIZE = _gmat_py.Code500EphemerisFile_RECORD_SIZE
    NUM_STATES_PER_RECORD = _gmat_py.Code500EphemerisFile_NUM_STATES_PER_RECORD

    def GetStartAndEndEpochs(self, startEpoch, endEpoch, records):
        return _gmat_py.Code500EphemerisFile_GetStartAndEndEpochs(self, startEpoch, endEpoch, records)

# Register Code500EphemerisFile in _gmat_py:
_gmat_py.Code500EphemerisFile_swigregister(Code500EphemerisFile)
class ColorDatabase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.ColorDatabase_Instance()

    def GetNumColors(self):
        return _gmat_py.ColorDatabase_GetNumColors(self)

    def GetAllColorNameArray(self):
        return _gmat_py.ColorDatabase_GetAllColorNameArray(self)

    def GetAllColorNames(self):
        return _gmat_py.ColorDatabase_GetAllColorNames(self)

    def GetAllIntColors(self):
        return _gmat_py.ColorDatabase_GetAllIntColors(self)

    def HasColor(self, *args):
        return _gmat_py.ColorDatabase_HasColor(self, *args)

    def GetIntColor(self, name):
        return _gmat_py.ColorDatabase_GetIntColor(self, name)

    def GetRgbColor(self, name):
        return _gmat_py.ColorDatabase_GetRgbColor(self, name)

    def GetColorName(self, intColor):
        return _gmat_py.ColorDatabase_GetColorName(self, intColor)

    def Add(self, *args):
        return _gmat_py.ColorDatabase_Add(self, *args)

    def Remove(self, name):
        return _gmat_py.ColorDatabase_Remove(self, name)

# Register ColorDatabase in _gmat_py:
_gmat_py.ColorDatabase_swigregister(ColorDatabase)
class ElapsedTime(object):
    r"""Declares elapsed time in operations. Internal elapsed time is in seconds."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ElapsedTime_swiginit(self, _gmat_py.new_ElapsedTime(*args))
    __swig_destroy__ = _gmat_py.delete_ElapsedTime

    def __add__(self, right):
        return _gmat_py.ElapsedTime___add__(self, right)

    def __sub__(self, right):
        return _gmat_py.ElapsedTime___sub__(self, right)

    def __iadd__(self, right):
        return _gmat_py.ElapsedTime___iadd__(self, right)

    def __isub__(self, right):
        return _gmat_py.ElapsedTime___isub__(self, right)

    def __lt__(self, right):
        return _gmat_py.ElapsedTime___lt__(self, right)

    def __gt__(self, right):
        return _gmat_py.ElapsedTime___gt__(self, right)

    def __eq__(self, right):
        return _gmat_py.ElapsedTime___eq__(self, right)

    def __ne__(self, right):
        return _gmat_py.ElapsedTime___ne__(self, right)

    def __ge__(self, right):
        return _gmat_py.ElapsedTime___ge__(self, right)

    def __le__(self, right):
        return _gmat_py.ElapsedTime___le__(self, right)

    def Get(self):
        return _gmat_py.ElapsedTime_Get(self)

    def Set(self, secs):
        return _gmat_py.ElapsedTime_Set(self, secs)

    def ToElapsedDate(self):
        return _gmat_py.ElapsedTime_ToElapsedDate(self)

    def GetNumData(self):
        return _gmat_py.ElapsedTime_GetNumData(self)

    def GetDataDescriptions(self):
        return _gmat_py.ElapsedTime_GetDataDescriptions(self)

    def ToValueStrings(self):
        return _gmat_py.ElapsedTime_ToValueStrings(self)

# Register ElapsedTime in _gmat_py:
_gmat_py.ElapsedTime_swigregister(ElapsedTime)
EOP_C04 = _gmat_py.EOP_C04
FINALS = _gmat_py.FINALS
class EopFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.EopFile_swiginit(self, _gmat_py.new_EopFile(*args))
    __swig_destroy__ = _gmat_py.delete_EopFile

    def Initialize(self):
        return _gmat_py.EopFile_Initialize(self)

    def ResetEopFile(self, *args):
        return _gmat_py.EopFile_ResetEopFile(self, *args)

    def GetFileName(self):
        return _gmat_py.EopFile_GetFileName(self)

    def GetUt1UtcOffset(self, taiMjd):
        return _gmat_py.EopFile_GetUt1UtcOffset(self, taiMjd)

    def GetPolarMotionData(self):
        return _gmat_py.EopFile_GetPolarMotionData(self)

    def GetPolarMotionAndLod(self, forUtcMjd, xval, yval, lodval):
        return _gmat_py.EopFile_GetPolarMotionAndLod(self, forUtcMjd, xval, yval, lodval)

    def GetTimeRange(self, timeMin, timeMax):
        return _gmat_py.EopFile_GetTimeRange(self, timeMin, timeMax)

# Register EopFile in _gmat_py:
_gmat_py.EopFile_swigregister(EopFile)
class FileManager(object):
    r"""
    Declares FileManager class. This is singleton class which manages list of
    file paths and names.

    The textures files and non-Earth gravity potential files not appear in the
    predefined enum FileType list can be retrieved by using file naming
    convention. The texture files should have PLANETNAME_TEXTURE_FILE.
    e.g. "EARTH_TEXTURE_FILE", "LUNA_TEXTURE_FILE", etc. The potential files
    should have PLANETNAME_POT_FILE.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BEGIN_OF_PATH = _gmat_py.FileManager_BEGIN_OF_PATH
    ROOT_PATH = _gmat_py.FileManager_ROOT_PATH
    TIME_PATH = _gmat_py.FileManager_TIME_PATH
    PLANETARY_COEFF_PATH = _gmat_py.FileManager_PLANETARY_COEFF_PATH
    PLANETARY_EPHEM_DE_PATH = _gmat_py.FileManager_PLANETARY_EPHEM_DE_PATH
    PLANETARY_EPHEM_SPK_PATH = _gmat_py.FileManager_PLANETARY_EPHEM_SPK_PATH
    VEHICLE_EPHEM_PATH = _gmat_py.FileManager_VEHICLE_EPHEM_PATH
    VEHICLE_EPHEM_SPK_PATH = _gmat_py.FileManager_VEHICLE_EPHEM_SPK_PATH
    VEHICLE_EPHEM_CCSDS_PATH = _gmat_py.FileManager_VEHICLE_EPHEM_CCSDS_PATH
    EARTH_POT_PATH = _gmat_py.FileManager_EARTH_POT_PATH
    LUNA_POT_PATH = _gmat_py.FileManager_LUNA_POT_PATH
    VENUS_POT_PATH = _gmat_py.FileManager_VENUS_POT_PATH
    MARS_POT_PATH = _gmat_py.FileManager_MARS_POT_PATH
    OTHER_POT_PATH = _gmat_py.FileManager_OTHER_POT_PATH
    TEXTURE_PATH = _gmat_py.FileManager_TEXTURE_PATH
    BODY_3D_MODEL_PATH = _gmat_py.FileManager_BODY_3D_MODEL_PATH
    MEASUREMENT_PATH = _gmat_py.FileManager_MEASUREMENT_PATH
    GUI_CONFIG_PATH = _gmat_py.FileManager_GUI_CONFIG_PATH
    SPLASH_PATH = _gmat_py.FileManager_SPLASH_PATH
    ICON_PATH = _gmat_py.FileManager_ICON_PATH
    STAR_PATH = _gmat_py.FileManager_STAR_PATH
    VEHICLE_MODEL_PATH = _gmat_py.FileManager_VEHICLE_MODEL_PATH
    SPAD_PATH = _gmat_py.FileManager_SPAD_PATH
    ATMOSPHERE_PATH = _gmat_py.FileManager_ATMOSPHERE_PATH
    MARS_ATMOSPHERE_PATH = _gmat_py.FileManager_MARS_ATMOSPHERE_PATH
    FILE_UPDATE_PATH = _gmat_py.FileManager_FILE_UPDATE_PATH
    HELP_PATH = _gmat_py.FileManager_HELP_PATH
    OUTPUT_PATH = _gmat_py.FileManager_OUTPUT_PATH
    END_OF_PATH = _gmat_py.FileManager_END_OF_PATH
    LOG_FILE = _gmat_py.FileManager_LOG_FILE
    REPORT_FILE = _gmat_py.FileManager_REPORT_FILE
    EPHEM_OUTPUT_FILE = _gmat_py.FileManager_EPHEM_OUTPUT_FILE
    SPLASH_FILE = _gmat_py.FileManager_SPLASH_FILE
    TIME_COEFF_FILE = _gmat_py.FileManager_TIME_COEFF_FILE
    DE405_FILE = _gmat_py.FileManager_DE405_FILE
    DE421_FILE = _gmat_py.FileManager_DE421_FILE
    DE424_FILE = _gmat_py.FileManager_DE424_FILE
    DE430_FILE = _gmat_py.FileManager_DE430_FILE
    IAUSOFA_FILE = _gmat_py.FileManager_IAUSOFA_FILE
    ICRF_FILE = _gmat_py.FileManager_ICRF_FILE
    PLANETARY_SPK_FILE = _gmat_py.FileManager_PLANETARY_SPK_FILE
    JGM2_FILE = _gmat_py.FileManager_JGM2_FILE
    JGM3_FILE = _gmat_py.FileManager_JGM3_FILE
    EGM96_FILE = _gmat_py.FileManager_EGM96_FILE
    LP165P_FILE = _gmat_py.FileManager_LP165P_FILE
    MGNP180U_FILE = _gmat_py.FileManager_MGNP180U_FILE
    MARS50C_FILE = _gmat_py.FileManager_MARS50C_FILE
    EOP_FILE = _gmat_py.FileManager_EOP_FILE
    PLANETARY_COEFF_FILE = _gmat_py.FileManager_PLANETARY_COEFF_FILE
    NUTATION_COEFF_FILE = _gmat_py.FileManager_NUTATION_COEFF_FILE
    PLANETARY_PCK_FILE = _gmat_py.FileManager_PLANETARY_PCK_FILE
    EARTH_LATEST_PCK_FILE = _gmat_py.FileManager_EARTH_LATEST_PCK_FILE
    EARTH_PCK_PREDICTED_FILE = _gmat_py.FileManager_EARTH_PCK_PREDICTED_FILE
    EARTH_PCK_CURRENT_FILE = _gmat_py.FileManager_EARTH_PCK_CURRENT_FILE
    LUNA_PCK_CURRENT_FILE = _gmat_py.FileManager_LUNA_PCK_CURRENT_FILE
    LUNA_FRAME_KERNEL_FILE = _gmat_py.FileManager_LUNA_FRAME_KERNEL_FILE
    LEAP_SECS_FILE = _gmat_py.FileManager_LEAP_SECS_FILE
    LSK_FILE = _gmat_py.FileManager_LSK_FILE
    PERSONALIZATION_FILE = _gmat_py.FileManager_PERSONALIZATION_FILE
    MAIN_ICON_FILE = _gmat_py.FileManager_MAIN_ICON_FILE
    STAR_FILE = _gmat_py.FileManager_STAR_FILE
    CONSTELLATION_FILE = _gmat_py.FileManager_CONSTELLATION_FILE
    SPACECRAFT_MODEL_FILE = _gmat_py.FileManager_SPACECRAFT_MODEL_FILE
    SPAD_SRP_FILE = _gmat_py.FileManager_SPAD_SRP_FILE
    CSSI_FLUX_FILE = _gmat_py.FileManager_CSSI_FLUX_FILE
    SCHATTEN_FILE = _gmat_py.FileManager_SCHATTEN_FILE
    MARINI_TROPO_FILE = _gmat_py.FileManager_MARINI_TROPO_FILE
    EARTH_EXPONENTIAL_FILE = _gmat_py.FileManager_EARTH_EXPONENTIAL_FILE
    MARS_EXPONENTIAL_FILE = _gmat_py.FileManager_MARS_EXPONENTIAL_FILE
    HELP_DIRECTORY_FILE = _gmat_py.FileManager_HELP_DIRECTORY_FILE
    HELP_HTML_FILE = _gmat_py.FileManager_HELP_HTML_FILE
    FileTypeCount = _gmat_py.FileManager_FileTypeCount

    @staticmethod
    def Instance(*args):
        return _gmat_py.FileManager_Instance(*args)
    __swig_destroy__ = _gmat_py.delete_FileManager

    def GetBinDirectory(self, *args):
        r""" GMAT application directory"""
        return _gmat_py.FileManager_GetBinDirectory(self, *args)

    def SetBinDirectory(self, *args):
        return _gmat_py.FileManager_SetBinDirectory(self, *args)

    def GetGmatWorkingDirectory(self):
        r""" GMAT working directory"""
        return _gmat_py.FileManager_GetGmatWorkingDirectory(self)

    def SetGmatWorkingDirectory(self, *args):
        return _gmat_py.FileManager_SetGmatWorkingDirectory(self, *args)

    def GetCurrentWorkingDirectory(self):
        r""" System's current working directory of the process"""
        return _gmat_py.FileManager_GetCurrentWorkingDirectory(self)

    def SetCurrentWorkingDirectory(self, *args):
        return _gmat_py.FileManager_SetCurrentWorkingDirectory(self, *args)

    def FindPath(self, *args):
        return _gmat_py.FileManager_FindPath(self, *args)

    def FindMainIconFile(self, writeInfo=False):
        return _gmat_py.FileManager_FindMainIconFile(self, writeInfo)

    def GetPathSeparator(self):
        return _gmat_py.FileManager_GetPathSeparator(self)

    def DoesDirectoryExist(self, dirPath, isBlankOk=True):
        return _gmat_py.FileManager_DoesDirectoryExist(self, dirPath, isBlankOk)

    def DoesFileExist(self, filename):
        return _gmat_py.FileManager_DoesFileExist(self, filename)

    def RenameFile(self, oldName, newName, retCode, overwriteIfExists=False):
        return _gmat_py.FileManager_RenameFile(self, oldName, newName, retCode, overwriteIfExists)

    def CopyFile(self, oldName, newName, retCode, overwriteIfExists=False):
        return _gmat_py.FileManager_CopyFile(self, oldName, newName, retCode, overwriteIfExists)

    def ValidatePaths(self):
        return _gmat_py.FileManager_ValidatePaths(self)

    def GetStartupFileDir(self):
        return _gmat_py.FileManager_GetStartupFileDir(self)

    def GetStartupFileName(self):
        return _gmat_py.FileManager_GetStartupFileName(self)

    def GetFullStartupFilePath(self):
        return _gmat_py.FileManager_GetFullStartupFilePath(self)

    def ReadStartupFile(self, *args):
        return _gmat_py.FileManager_ReadStartupFile(self, *args)

    def WriteStartupFile(self, *args):
        return _gmat_py.FileManager_WriteStartupFile(self, *args)

    def GetRootPath(self):
        return _gmat_py.FileManager_GetRootPath(self)

    def GetTextureMapFile(self, inFileName, bodyName, objName, outFileName, outFullPathName, writeWarning):
        return _gmat_py.FileManager_GetTextureMapFile(self, inFileName, bodyName, objName, outFileName, outFullPathName, writeWarning)

    def GetBody3dModelFile(self, inFileName, bodyName, objName, outFileName, outFullPathName, writeWarning):
        return _gmat_py.FileManager_GetBody3dModelFile(self, inFileName, bodyName, objName, outFileName, outFullPathName, writeWarning)

    def GetPathname(self, *args):
        return _gmat_py.FileManager_GetPathname(self, *args)

    def GetFilename(self, *args):
        return _gmat_py.FileManager_GetFilename(self, *args)

    def GetFullPathname(self, *args):
        return _gmat_py.FileManager_GetFullPathname(self, *args)

    def GetAbsPathname(self, *args):
        return _gmat_py.FileManager_GetAbsPathname(self, *args)

    def ConvertToAbsPath(self, relPath, appendPathSep=True):
        return _gmat_py.FileManager_ConvertToAbsPath(self, relPath, appendPathSep)

    def SetAbsPathname(self, *args):
        return _gmat_py.FileManager_SetAbsPathname(self, *args)

    def ClearGmatIncludePath(self):
        return _gmat_py.FileManager_ClearGmatIncludePath(self)

    def AddGmatIncludePath(self, *args):
        return _gmat_py.FileManager_AddGmatIncludePath(self, *args)

    def GetGmatIncludePath(self, *args):
        return _gmat_py.FileManager_GetGmatIncludePath(self, *args)

    def GetAllGmatIncludePaths(self):
        return _gmat_py.FileManager_GetAllGmatIncludePaths(self)

    def ClearGmatFunctionPath(self):
        return _gmat_py.FileManager_ClearGmatFunctionPath(self)

    def AddGmatFunctionPath(self, *args):
        return _gmat_py.FileManager_AddGmatFunctionPath(self, *args)

    def GetGmatFunctionPath(self, *args):
        return _gmat_py.FileManager_GetGmatFunctionPath(self, *args)

    def GetAllGmatFunctionPaths(self):
        return _gmat_py.FileManager_GetAllGmatFunctionPaths(self)

    def ClearMatlabFunctionPath(self):
        return _gmat_py.FileManager_ClearMatlabFunctionPath(self)

    def AddMatlabFunctionPath(self, *args):
        return _gmat_py.FileManager_AddMatlabFunctionPath(self, *args)

    def GetMatlabFunctionPath(self, *args):
        return _gmat_py.FileManager_GetMatlabFunctionPath(self, *args)

    def GetAllMatlabFunctionPaths(self):
        return _gmat_py.FileManager_GetAllMatlabFunctionPaths(self)

    def AddPythonModulePath(self, path):
        return _gmat_py.FileManager_AddPythonModulePath(self, path)

    def GetAllPythonModulePaths(self):
        return _gmat_py.FileManager_GetAllPythonModulePaths(self)

    def GetLastFilePathMessage(self):
        return _gmat_py.FileManager_GetLastFilePathMessage(self)

    def GetPluginList(self):
        return _gmat_py.FileManager_GetPluginList(self)

    def AdjustSettings(self, suffix, forEntries):
        return _gmat_py.FileManager_AdjustSettings(self, suffix, forEntries)

    def AddFileType(self, type, name):
        r""" Add a file (or path) type to the list - USE THIS WITH CARE!"""
        return _gmat_py.FileManager_AddFileType(self, type, name)

# Register FileManager in _gmat_py:
_gmat_py.FileManager_swigregister(FileManager)
class Frozen(object):
    r"""Definition of the Frozen Orbit Class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.Frozen_swiginit(self, _gmat_py.new_Frozen())
    __swig_destroy__ = _gmat_py.delete_Frozen

    def CalculateFrozen(self, ALT, altVal, INC, eccVal):
        return _gmat_py.Frozen_CalculateFrozen(self, ALT, altVal, INC, eccVal)

    def GetSMA(self):
        return _gmat_py.Frozen_GetSMA(self)

    def GetALT(self):
        return _gmat_py.Frozen_GetALT(self)

    def GetECC(self):
        return _gmat_py.Frozen_GetECC(self)

    def GetINC(self):
        return _gmat_py.Frozen_GetINC(self)

    def GetPALT(self):
        return _gmat_py.Frozen_GetPALT(self)

    def GetAALT(self):
        return _gmat_py.Frozen_GetAALT(self)

    def IsError(self):
        return _gmat_py.Frozen_IsError(self)

    def GetError(self):
        return _gmat_py.Frozen_GetError(self)

# Register Frozen in _gmat_py:
_gmat_py.Frozen_swigregister(Frozen)
MERCURY = _gmat_py.MERCURY
VENUS = _gmat_py.VENUS
EARTH = _gmat_py.EARTH
MARS = _gmat_py.MARS
JUPITER = _gmat_py.JUPITER
SATURN = _gmat_py.SATURN
URANUS = _gmat_py.URANUS
NEPTUNE = _gmat_py.NEPTUNE
PLUTO = _gmat_py.PLUTO
NumberOfDefaultPlanets = _gmat_py.NumberOfDefaultPlanets
LUNA = _gmat_py.LUNA
NumberOfDefaultMoons = _gmat_py.NumberOfDefaultMoons
class GmatGlobal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NORMAL = _gmat_py.GmatGlobal_NORMAL
    EXIT_AFTER_RUN = _gmat_py.GmatGlobal_EXIT_AFTER_RUN
    TESTING = _gmat_py.GmatGlobal_TESTING
    TESTING_NO_PLOTS = _gmat_py.GmatGlobal_TESTING_NO_PLOTS
    NORMAL_GUI = _gmat_py.GmatGlobal_NORMAL_GUI
    MINIMIZED_GUI = _gmat_py.GmatGlobal_MINIMIZED_GUI
    NORMAL_PLOT = _gmat_py.GmatGlobal_NORMAL_PLOT
    TILED_PLOT = _gmat_py.GmatGlobal_TILED_PLOT
    CASCADED_PLOT = _gmat_py.GmatGlobal_CASCADED_PLOT
    SINGLE_USE = _gmat_py.GmatGlobal_SINGLE_USE
    SHARED = _gmat_py.GmatGlobal_SHARED
    NO_MATLAB = _gmat_py.GmatGlobal_NO_MATLAB
    CMD_LINE = _gmat_py.GmatGlobal_CMD_LINE
    SCRIPT = _gmat_py.GmatGlobal_SCRIPT
    STARTUP = _gmat_py.GmatGlobal_STARTUP

    @staticmethod
    def Instance():
        return _gmat_py.GmatGlobal_Instance()

    def GetGmatVersion(self):
        return _gmat_py.GmatGlobal_GetGmatVersion(self)

    def IsGmatCompiledIn64Bit(self):
        return _gmat_py.GmatGlobal_IsGmatCompiledIn64Bit(self)
    DATA_PRECISION = _gmat_py.GmatGlobal_DATA_PRECISION
    TIME_PRECISION = _gmat_py.GmatGlobal_TIME_PRECISION
    DATA_WIDTH = _gmat_py.GmatGlobal_DATA_WIDTH
    TIME_WIDTH = _gmat_py.GmatGlobal_TIME_WIDTH
    INTEGER_WIDTH = _gmat_py.GmatGlobal_INTEGER_WIDTH

    def GetGMATBuildDate(self):
        return _gmat_py.GmatGlobal_GetGMATBuildDate(self)

    def GetGMATBuildTime(self):
        return _gmat_py.GmatGlobal_GetGMATBuildTime(self)

    def GetDataPrecision(self):
        return _gmat_py.GmatGlobal_GetDataPrecision(self)

    def GetTimePrecision(self):
        return _gmat_py.GmatGlobal_GetTimePrecision(self)

    def GetDataWidth(self):
        return _gmat_py.GmatGlobal_GetDataWidth(self)

    def GetTimeWidth(self):
        return _gmat_py.GmatGlobal_GetTimeWidth(self)

    def GetIntegerWidth(self):
        return _gmat_py.GmatGlobal_GetIntegerWidth(self)

    def GetOutputPath(self):
        return _gmat_py.GmatGlobal_GetOutputPath(self)

    def SetDataPrecision(self, p):
        return _gmat_py.GmatGlobal_SetDataPrecision(self, p)

    def SetTimePrecision(self, p):
        return _gmat_py.GmatGlobal_SetTimePrecision(self, p)

    def SetDataWidth(self, w):
        return _gmat_py.GmatGlobal_SetDataWidth(self, w)

    def SetTimeWidth(self, w):
        return _gmat_py.GmatGlobal_SetTimeWidth(self, w)

    def SetIntegerWidth(self, w):
        return _gmat_py.GmatGlobal_SetIntegerWidth(self, w)

    def SetOutputPath(self, path):
        return _gmat_py.GmatGlobal_SetOutputPath(self, path)

    def SetMatlabFuncNameExt(self, ext):
        return _gmat_py.GmatGlobal_SetMatlabFuncNameExt(self, ext)

    def GetMatlabFuncNameExt(self):
        return _gmat_py.GmatGlobal_GetMatlabFuncNameExt(self)

    def IsBatchMode(self):
        return _gmat_py.GmatGlobal_IsBatchMode(self)

    def SetBatchMode(self, flag):
        return _gmat_py.GmatGlobal_SetBatchMode(self, flag)

    def IsNitsClient(self):
        return _gmat_py.GmatGlobal_IsNitsClient(self)

    def SetNitsClient(self, flag):
        return _gmat_py.GmatGlobal_SetNitsClient(self, flag)

    def GetRunInterrupted(self):
        return _gmat_py.GmatGlobal_GetRunInterrupted(self)

    def SetRunInterrupted(self, flag):
        return _gmat_py.GmatGlobal_SetRunInterrupted(self, flag)

    def GetRunState(self):
        return _gmat_py.GmatGlobal_GetRunState(self)

    def SetRunState(self, rs):
        return _gmat_py.GmatGlobal_SetRunState(self, rs)

    def GetDetailedRunState(self):
        return _gmat_py.GmatGlobal_GetDetailedRunState(self)

    def SetDetailedRunState(self, drs):
        return _gmat_py.GmatGlobal_SetDetailedRunState(self, drs)

    def GetRunMode(self):
        return _gmat_py.GmatGlobal_GetRunMode(self)

    def SetBaseEpoch(self, theEpoch):
        return _gmat_py.GmatGlobal_SetBaseEpoch(self, theEpoch)

    def GetBaseEpoch(self):
        return _gmat_py.GmatGlobal_GetBaseEpoch(self)

    def SetCurrentEpoch(self, theEpoch):
        return _gmat_py.GmatGlobal_SetCurrentEpoch(self, theEpoch)

    def GetCurrentEpoch(self):
        return _gmat_py.GmatGlobal_GetCurrentEpoch(self)

    def GetRunModeStartUp(self):
        return _gmat_py.GmatGlobal_GetRunModeStartUp(self)

    def SetRunMode(self, mode):
        return _gmat_py.GmatGlobal_SetRunMode(self, mode)

    def GetGuiMode(self):
        return _gmat_py.GmatGlobal_GetGuiMode(self)

    def SetGuiMode(self, mode):
        return _gmat_py.GmatGlobal_SetGuiMode(self, mode)

    def GetPlotMode(self):
        return _gmat_py.GmatGlobal_GetPlotMode(self)

    def SetPlotMode(self, mode):
        return _gmat_py.GmatGlobal_SetPlotMode(self, mode)

    def InTestingMode(self):
        return _gmat_py.GmatGlobal_InTestingMode(self)

    def SetTestingMode(self, mode):
        return _gmat_py.GmatGlobal_SetTestingMode(self, mode)

    def SetCommandEchoMode(self, tf):
        return _gmat_py.GmatGlobal_SetCommandEchoMode(self, tf)

    def EchoCommands(self):
        return _gmat_py.GmatGlobal_EchoCommands(self)

    def SetSkipSplashMode(self, tfSplash):
        return _gmat_py.GmatGlobal_SetSkipSplashMode(self, tfSplash)

    def SkipSplashMode(self):
        return _gmat_py.GmatGlobal_SkipSplashMode(self)

    def GetMatlabMode(self):
        return _gmat_py.GmatGlobal_GetMatlabMode(self)

    def SetMatlabMode(self, mode):
        return _gmat_py.GmatGlobal_SetMatlabMode(self, mode)

    def IsMatlabAvailable(self):
        return _gmat_py.GmatGlobal_IsMatlabAvailable(self)

    def SetMatlabAvailable(self, flag):
        return _gmat_py.GmatGlobal_SetMatlabAvailable(self, flag)

    def IsMatlabDebugOn(self):
        return _gmat_py.GmatGlobal_IsMatlabDebugOn(self)

    def SetMatlabDebug(self, flag):
        return _gmat_py.GmatGlobal_SetMatlabDebug(self, flag)

    def IsMissionTreeDebugOn(self):
        return _gmat_py.GmatGlobal_IsMissionTreeDebugOn(self)

    def SetMissionTreeDebug(self, flag):
        return _gmat_py.GmatGlobal_SetMissionTreeDebug(self, flag)

    def IsWritingParameterInfo(self):
        return _gmat_py.GmatGlobal_IsWritingParameterInfo(self)

    def SetWriteParameterInfo(self, flag):
        return _gmat_py.GmatGlobal_SetWriteParameterInfo(self, flag)

    def IsWritingFilePathInfo(self):
        return _gmat_py.GmatGlobal_IsWritingFilePathInfo(self)

    def SetWriteFilePathInfo(self, flag):
        return _gmat_py.GmatGlobal_SetWriteFilePathInfo(self, flag)

    def IsWritingGmatKeyword(self):
        return _gmat_py.GmatGlobal_IsWritingGmatKeyword(self)

    def SetWriteGmatKeyword(self, flag):
        return _gmat_py.GmatGlobal_SetWriteGmatKeyword(self, flag)

    def SetEventLocationAvailable(self, flag):
        return _gmat_py.GmatGlobal_SetEventLocationAvailable(self, flag)

    def IsEventLocationAvailable(self):
        return _gmat_py.GmatGlobal_IsEventLocationAvailable(self)

    def SetIncludeFoundInScriptResource(self, flag):
        return _gmat_py.GmatGlobal_SetIncludeFoundInScriptResource(self, flag)

    def GetIncludeFoundInScriptResource(self):
        return _gmat_py.GmatGlobal_GetIncludeFoundInScriptResource(self)

    def SetWritePersonalizationFile(self, flag):
        return _gmat_py.GmatGlobal_SetWritePersonalizationFile(self, flag)

    def GetWritePersonalizationFile(self):
        return _gmat_py.GmatGlobal_GetWritePersonalizationFile(self)

    def IsGUISavable(self):
        return _gmat_py.GmatGlobal_IsGUISavable(self)

    def IsScientific(self):
        return _gmat_py.GmatGlobal_IsScientific(self)

    def ShowPoint(self):
        return _gmat_py.GmatGlobal_ShowPoint(self)

    def IsHorizontal(self):
        return _gmat_py.GmatGlobal_IsHorizontal(self)

    def IsBinaryIn(self):
        return _gmat_py.GmatGlobal_IsBinaryIn(self)

    def IsBinaryOut(self):
        return _gmat_py.GmatGlobal_IsBinaryOut(self)

    def GetSpacing(self):
        return _gmat_py.GmatGlobal_GetSpacing(self)

    def SetScientific(self, flag):
        return _gmat_py.GmatGlobal_SetScientific(self, flag)

    def SetShowPoint(self, flag):
        return _gmat_py.GmatGlobal_SetShowPoint(self, flag)

    def SetHorizontal(self, flag):
        return _gmat_py.GmatGlobal_SetHorizontal(self, flag)

    def SetBinaryIn(self, flag):
        return _gmat_py.GmatGlobal_SetBinaryIn(self, flag)

    def SetBinaryOut(self, flag):
        return _gmat_py.GmatGlobal_SetBinaryOut(self, flag)

    def SetSpacing(self, sp):
        return _gmat_py.GmatGlobal_SetSpacing(self, sp)

    def SetPrefix(self, prefix):
        return _gmat_py.GmatGlobal_SetPrefix(self, prefix)

    def SetAppendEol(self, flag):
        return _gmat_py.GmatGlobal_SetAppendEol(self, flag)

    def SetDefaultFormat(self):
        return _gmat_py.GmatGlobal_SetDefaultFormat(self)

    def SetCurrentFormat(self, *args):
        return _gmat_py.GmatGlobal_SetCurrentFormat(self, *args)

    def GetActualFormat(self, scientific, showPoint, precision, width, horizontal, spacing, prefix, appendEol):
        return _gmat_py.GmatGlobal_GetActualFormat(self, scientific, showPoint, precision, width, horizontal, spacing, prefix, appendEol)

    def SetActualFormat(self, *args):
        return _gmat_py.GmatGlobal_SetActualFormat(self, *args)

    def SetToDefaultFormat(self):
        return _gmat_py.GmatGlobal_SetToDefaultFormat(self)

    def SetToCurrentFormat(self):
        return _gmat_py.GmatGlobal_SetToCurrentFormat(self)

    def ClearHiddenCommands(self):
        return _gmat_py.GmatGlobal_ClearHiddenCommands(self)

    def AddHiddenCommand(self, cmd):
        return _gmat_py.GmatGlobal_AddHiddenCommand(self, cmd)

    def IsHiddenCommand(self, *args):
        return _gmat_py.GmatGlobal_IsHiddenCommand(self, *args)

    def RemoveHiddenCommand(self, cmd):
        return _gmat_py.GmatGlobal_RemoveHiddenCommand(self, cmd)

    def GetHiddenCommands(self):
        return _gmat_py.GmatGlobal_GetHiddenCommands(self)

    def SetSolverStatus(self, solverNmae, solverStatus):
        return _gmat_py.GmatGlobal_SetSolverStatus(self, solverNmae, solverStatus)

    def GetSolverStatus(self, forSolver):
        return _gmat_py.GmatGlobal_GetSolverStatus(self, forSolver)

    def GetSolverStatusString(self, forSolver):
        return _gmat_py.GmatGlobal_GetSolverStatusString(self, forSolver)

    def ClearSolverStatus(self):
        return _gmat_py.GmatGlobal_ClearSolverStatus(self)

    def GetEopFile(self):
        return _gmat_py.GmatGlobal_GetEopFile(self)

    def GetItrfCoefficientsFile(self):
        return _gmat_py.GmatGlobal_GetItrfCoefficientsFile(self)

    def SetEopFile(self, eop):
        return _gmat_py.GmatGlobal_SetEopFile(self, eop)

    def SetItrfCoefficientsFile(self, itrf):
        return _gmat_py.GmatGlobal_SetItrfCoefficientsFile(self, itrf)

    def SetLogfileSource(self, *args):
        return _gmat_py.GmatGlobal_SetLogfileSource(self, *args)

    def SetLogfileName(self, forSrc, logfileName):
        return _gmat_py.GmatGlobal_SetLogfileName(self, forSrc, logfileName)

    def GetLogfileSource(self):
        return _gmat_py.GmatGlobal_GetLogfileSource(self)

    def GetLogfileName(self, forSrc=0):
        return _gmat_py.GmatGlobal_GetLogfileName(self, forSrc)

# Register GmatGlobal in _gmat_py:
_gmat_py.GmatGlobal_swigregister(GmatGlobal)
SOLAR_SYSTEM_BARYCENTER_NAME = cvar.SOLAR_SYSTEM_BARYCENTER_NAME
SUN_NAME = cvar.SUN_NAME
MERCURY_NAME = cvar.MERCURY_NAME
VENUS_NAME = cvar.VENUS_NAME
EARTH_NAME = cvar.EARTH_NAME
MOON_NAME = cvar.MOON_NAME
MARS_NAME = cvar.MARS_NAME
PHOBOS_NAME = cvar.PHOBOS_NAME
DEIMOS_NAME = cvar.DEIMOS_NAME
JUPITER_NAME = cvar.JUPITER_NAME
METIS_NAME = cvar.METIS_NAME
ADRASTEA_NAME = cvar.ADRASTEA_NAME
AMALTHEA_NAME = cvar.AMALTHEA_NAME
THEBE_NAME = cvar.THEBE_NAME
IO_NAME = cvar.IO_NAME
EUROPA_NAME = cvar.EUROPA_NAME
GANYMEDE_NAME = cvar.GANYMEDE_NAME
CALLISTO_NAME = cvar.CALLISTO_NAME
SATURN_NAME = cvar.SATURN_NAME
PAN_NAME = cvar.PAN_NAME
ATLAS_NAME = cvar.ATLAS_NAME
PROMETHEUS_NAME = cvar.PROMETHEUS_NAME
PANDORA_NAME = cvar.PANDORA_NAME
EPIMETHEUS_NAME = cvar.EPIMETHEUS_NAME
JANUS_NAME = cvar.JANUS_NAME
MIMAS_NAME = cvar.MIMAS_NAME
ENCELADUS_NAME = cvar.ENCELADUS_NAME
TETHYS_NAME = cvar.TETHYS_NAME
TELESTO_NAME = cvar.TELESTO_NAME
CALYPSO_NAME = cvar.CALYPSO_NAME
DIONE_NAME = cvar.DIONE_NAME
HELENE_NAME = cvar.HELENE_NAME
RHEA_NAME = cvar.RHEA_NAME
TITAN_NAME = cvar.TITAN_NAME
IAPETUS_NAME = cvar.IAPETUS_NAME
PHOEBE_NAME = cvar.PHOEBE_NAME
URANUS_NAME = cvar.URANUS_NAME
CORDELIA_NAME = cvar.CORDELIA_NAME
OPHELIA_NAME = cvar.OPHELIA_NAME
BIANCA_NAME = cvar.BIANCA_NAME
CRESSIDA_NAME = cvar.CRESSIDA_NAME
DESDEMONA_NAME = cvar.DESDEMONA_NAME
JULIET_NAME = cvar.JULIET_NAME
PORTIA_NAME = cvar.PORTIA_NAME
ROSALIND_NAME = cvar.ROSALIND_NAME
BELINDA_NAME = cvar.BELINDA_NAME
PUCK_NAME = cvar.PUCK_NAME
MIRANDA_NAME = cvar.MIRANDA_NAME
ARIEL_NAME = cvar.ARIEL_NAME
UMBRIEL_NAME = cvar.UMBRIEL_NAME
TITANIA_NAME = cvar.TITANIA_NAME
OBERON_NAME = cvar.OBERON_NAME
NEPTUNE_NAME = cvar.NEPTUNE_NAME
NAIAD_NAME = cvar.NAIAD_NAME
THALASSA_NAME = cvar.THALASSA_NAME
DESPINA_NAME = cvar.DESPINA_NAME
GALATEA_NAME = cvar.GALATEA_NAME
LARISSA_NAME = cvar.LARISSA_NAME
PROTEUS_NAME = cvar.PROTEUS_NAME
TRITON_NAME = cvar.TRITON_NAME
PLUTO_NAME = cvar.PLUTO_NAME
CHARON_NAME = cvar.CHARON_NAME
SSB_NAIF_ID = cvar.SSB_NAIF_ID
SSB_MU = cvar.SSB_MU
PLANET_NAMES = cvar.PLANET_NAMES
PLANET_EQUATORIAL_RADIUS = cvar.PLANET_EQUATORIAL_RADIUS
PLANET_FLATTENING = cvar.PLANET_FLATTENING
PLANET_MU = cvar.PLANET_MU
PLANET_TWO_BODY_EPOCH = cvar.PLANET_TWO_BODY_EPOCH
PLANET_TWO_BODY_ELEMENTS = cvar.PLANET_TWO_BODY_ELEMENTS
PLANET_ORIENTATION_PARAMETERS = cvar.PLANET_ORIENTATION_PARAMETERS
PLANET_NAIF_IDS = cvar.PLANET_NAIF_IDS
PLANET_SPICE_FRAME_ID = cvar.PLANET_SPICE_FRAME_ID
MOON_NAMES = cvar.MOON_NAMES
MOON_CENTRAL_BODIES = cvar.MOON_CENTRAL_BODIES
MOON_EQUATORIAL_RADIUS = cvar.MOON_EQUATORIAL_RADIUS
MOON_FLATTENING = cvar.MOON_FLATTENING
MOON_MU = cvar.MOON_MU
MOON_TWO_BODY_EPOCH = cvar.MOON_TWO_BODY_EPOCH
MOON_TWO_BODY_ELEMENTS = cvar.MOON_TWO_BODY_ELEMENTS
MOON_ORIENTATION_PARAMETERS = cvar.MOON_ORIENTATION_PARAMETERS
MOON_NAIF_IDS = cvar.MOON_NAIF_IDS
MOON_SPICE_FRAME_ID = cvar.MOON_SPICE_FRAME_ID
STAR_EQUATORIAL_RADIUS = cvar.STAR_EQUATORIAL_RADIUS
STAR_FLATTENING = cvar.STAR_FLATTENING
STAR_MU = cvar.STAR_MU
STAR_TWO_BODY_EPOCH = cvar.STAR_TWO_BODY_EPOCH
STAR_TWO_BODY_ELEMENTS = cvar.STAR_TWO_BODY_ELEMENTS
STAR_ORIENTATION_PARAMETERS = cvar.STAR_ORIENTATION_PARAMETERS
STAR_NAIF_IDS = cvar.STAR_NAIF_IDS
STAR_SPICE_FRAME_ID = cvar.STAR_SPICE_FRAME_ID
STAR_RADIANT_POWER = cvar.STAR_RADIANT_POWER
STAR_REFERENCE_DISTANCE = cvar.STAR_REFERENCE_DISTANCE
STAR_PHOTOSPHERE_RADIUS = cvar.STAR_PHOTOSPHERE_RADIUS

class GmatTime(object):
    r"""
    This class is used to define GMAT time with a high precision. It has 2 parts:
    The first part stores number of seconds. The second part stores fraction of
    seconds.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_GmatTime

    def __init__(self, *args):
        _gmat_py.GmatTime_swiginit(self, _gmat_py.new_GmatTime(*args))

    def __add__(self, *args):
        return _gmat_py.GmatTime___add__(self, *args)

    def __sub__(self, *args):
        return _gmat_py.GmatTime___sub__(self, *args)

    def __mul__(self, num):
        return _gmat_py.GmatTime___mul__(self, num)

    def __truediv__(self, *args):
        return _gmat_py.GmatTime___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, *args):
        return _gmat_py.GmatTime___iadd__(self, *args)

    def __isub__(self, *args):
        return _gmat_py.GmatTime___isub__(self, *args)

    def __eq__(self, *args):
        return _gmat_py.GmatTime___eq__(self, *args)

    def __ne__(self, *args):
        return _gmat_py.GmatTime___ne__(self, *args)

    def __lt__(self, *args):
        return _gmat_py.GmatTime___lt__(self, *args)

    def __gt__(self, *args):
        return _gmat_py.GmatTime___gt__(self, *args)

    def __le__(self, *args):
        return _gmat_py.GmatTime___le__(self, *args)

    def __ge__(self, *args):
        return _gmat_py.GmatTime___ge__(self, *args)

    def Clone(self):
        return _gmat_py.GmatTime_Clone(self)

    def SetTimeInSec(self, sec):
        return _gmat_py.GmatTime_SetTimeInSec(self, sec)

    def GetMjd(self):
        return _gmat_py.GmatTime_GetMjd(self)

    def GetTimeInSec(self):
        return _gmat_py.GmatTime_GetTimeInSec(self)

    def GetDays(self):
        return _gmat_py.GmatTime_GetDays(self)

    def GetSec(self):
        return _gmat_py.GmatTime_GetSec(self)

    def GetFracSec(self):
        return _gmat_py.GmatTime_GetFracSec(self)

    def SetDays(self, days):
        return _gmat_py.GmatTime_SetDays(self, days)

    def SetSec(self, sec):
        return _gmat_py.GmatTime_SetSec(self, sec)

    def SetFracSec(self, fsec):
        return _gmat_py.GmatTime_SetFracSec(self, fsec)

    def SetMjdString(self, sMjd):
        return _gmat_py.GmatTime_SetMjdString(self, sMjd)

    def __str__(self):
        return _gmat_py.GmatTime___str__(self)

    def IsNearlyEqual(self, gt, tolerance):
        return _gmat_py.GmatTime_IsNearlyEqual(self, gt, tolerance)

    def AddSeconds(self, sec):
        return _gmat_py.GmatTime_AddSeconds(self, sec)

    def SubtractSeconds(self, sec):
        return _gmat_py.GmatTime_SubtractSeconds(self, sec)

# Register GmatTime in _gmat_py:
_gmat_py.GmatTime_swigregister(GmatTime)
class GregorianDate(object):
    r"""Definition of the GregorianDate class base"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.GregorianDate_swiginit(self, _gmat_py.new_GregorianDate(*args))
    __swig_destroy__ = _gmat_py.delete_GregorianDate

    def GetDate(self):
        return _gmat_py.GregorianDate_GetDate(self)

    def SetDate(self, *args):
        return _gmat_py.GregorianDate_SetDate(self, *args)

    def GetYMDHMS(self):
        return _gmat_py.GregorianDate_GetYMDHMS(self)

    @staticmethod
    def IsValid(*args):
        return _gmat_py.GregorianDate_IsValid(*args)

# Register GregorianDate in _gmat_py:
_gmat_py.GregorianDate_swigregister(GregorianDate)
class LeapSecondInformation(object):
    r"""
    Reads time coefficent file, creates a table of coefficients and converts
    to the utc.

    File found at : ftp://maia.usno.navy.mil/ser7/tai-utc.dat

    Structure defining internal leap second information.

    Moved here from inside of the LeapSecsFileReader class to clean up import/
    export issues with Visual Studio
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    julianDate = property(_gmat_py.LeapSecondInformation_julianDate_get, _gmat_py.LeapSecondInformation_julianDate_set)
    taiMJD = property(_gmat_py.LeapSecondInformation_taiMJD_get, _gmat_py.LeapSecondInformation_taiMJD_set)
    offset1 = property(_gmat_py.LeapSecondInformation_offset1_get, _gmat_py.LeapSecondInformation_offset1_set)
    offset2 = property(_gmat_py.LeapSecondInformation_offset2_get, _gmat_py.LeapSecondInformation_offset2_set)
    offset3 = property(_gmat_py.LeapSecondInformation_offset3_get, _gmat_py.LeapSecondInformation_offset3_set)

    def __init__(self):
        _gmat_py.LeapSecondInformation_swiginit(self, _gmat_py.new_LeapSecondInformation())
    __swig_destroy__ = _gmat_py.delete_LeapSecondInformation

# Register LeapSecondInformation in _gmat_py:
_gmat_py.LeapSecondInformation_swigregister(LeapSecondInformation)
class LeapSecsFileReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.LeapSecsFileReader_swiginit(self, _gmat_py.new_LeapSecsFileReader(*args))
    __swig_destroy__ = _gmat_py.delete_LeapSecsFileReader

    def Initialize(self):
        return _gmat_py.LeapSecsFileReader_Initialize(self)

    def NumberOfLeapSecondsFrom(self, utcMjd):
        return _gmat_py.LeapSecsFileReader_NumberOfLeapSecondsFrom(self, utcMjd)

    def GetFirstLeapSecondMJD(self, fromUtcMjd, toUtcMjd):
        return _gmat_py.LeapSecsFileReader_GetFirstLeapSecondMJD(self, fromUtcMjd, toUtcMjd)

    def IsInLeapSecond(self, theTaiMjd):
        r"""
        Determines whether or not the input time (in TAI MJD, referenced to
        GmatTimeConstants::JD_MJD_OFFSET) is in a leap second
        """
        return _gmat_py.LeapSecsFileReader_IsInLeapSecond(self, theTaiMjd)

# Register LeapSecsFileReader in _gmat_py:
_gmat_py.LeapSecsFileReader_swigregister(LeapSecsFileReader)
class OrbitDesignerTime(object):
    r"""Definition of the Orbit Designer time class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.OrbitDesignerTime_swiginit(self, _gmat_py.new_OrbitDesignerTime(*args))
    __swig_destroy__ = _gmat_py.delete_OrbitDesignerTime

    def FindRAAN(self):
        return _gmat_py.OrbitDesignerTime_FindRAAN(self)

    def FindStartTime(self, flag=False, lon=0):
        return _gmat_py.OrbitDesignerTime_FindStartTime(self, flag, lon)

    def SetEpoch(self, val):
        return _gmat_py.OrbitDesignerTime_SetEpoch(self, val)

    def SetStart(self, val):
        return _gmat_py.OrbitDesignerTime_SetStart(self, val)

    def SetRAAN(self, val):
        return _gmat_py.OrbitDesignerTime_SetRAAN(self, val)

    def GetRAAN(self):
        return _gmat_py.OrbitDesignerTime_GetRAAN(self)

    def GetStartTime(self):
        return _gmat_py.OrbitDesignerTime_GetStartTime(self)

    def GetEpoch(self):
        return _gmat_py.OrbitDesignerTime_GetEpoch(self)

    def GetEpochFormat(self):
        return _gmat_py.OrbitDesignerTime_GetEpochFormat(self)

    def IsError(self):
        return _gmat_py.OrbitDesignerTime_IsError(self)

    def GetError(self):
        return _gmat_py.OrbitDesignerTime_GetError(self)

# Register OrbitDesignerTime in _gmat_py:
_gmat_py.OrbitDesignerTime_swigregister(OrbitDesignerTime)

def Abs(*args):
    return _gmat_py.Abs(*args)

def NearestInt(theNumber):
    return _gmat_py.NearestInt(theNumber)

def Round(theNumber):
    return _gmat_py.Round(theNumber)

def Floor(theNumber):
    return _gmat_py.Floor(theNumber)

def Fix(theNumber):
    return _gmat_py.Fix(theNumber)

def Ceiling(theNumber):
    return _gmat_py.Ceiling(theNumber)

def Mod(left, right):
    return _gmat_py.Mod(left, right)

def Rem(left, right):
    return _gmat_py.Rem(left, right)

def Quotient(*args):
    return _gmat_py.Quotient(*args)

def Min(left, right):
    return _gmat_py.Min(left, right)

def Max(left, right):
    return _gmat_py.Max(left, right)

def IsPositive(theNumber):
    return _gmat_py.IsPositive(theNumber)

def IsNegative(theNumber):
    return _gmat_py.IsNegative(theNumber)

def IsNonNegative(theNumber):
    return _gmat_py.IsNonNegative(theNumber)

def IsZero(*args):
    return _gmat_py.IsZero(*args)

def IsEqual(*args):
    return _gmat_py.IsEqual(*args)

def SignOf(theNumber):
    return _gmat_py.SignOf(theNumber)

def IsOdd(theNumber):
    return _gmat_py.IsOdd(theNumber)

def IsEven(theNumber):
    return _gmat_py.IsEven(theNumber)

def Rad(angleInDeg, modBy2Pi=False):
    return _gmat_py.Rad(angleInDeg, modBy2Pi)

def Deg(angleInRad, modBy360=False):
    return _gmat_py.Deg(angleInRad, modBy360)

def DegToRad(deg, modBy2Pi=False):
    return _gmat_py.DegToRad(deg, modBy2Pi)

def RadToDeg(rad, modBy360=False):
    return _gmat_py.RadToDeg(rad, modBy360)

def ArcsecToDeg(asec, modBy360=False):
    return _gmat_py.ArcsecToDeg(asec, modBy360)

def ArcsecToRad(asec, modBy2Pi=False):
    return _gmat_py.ArcsecToRad(asec, modBy2Pi)

def Sin(*args):
    return _gmat_py.Sin(*args)

def SinXOverX(*args):
    return _gmat_py.SinXOverX(*args)

def Cos(*args):
    return _gmat_py.Cos(*args)

def Tan(*args):
    return _gmat_py.Tan(*args)

def Cosh(*args):
    return _gmat_py.Cosh(*args)

def Sinh(*args):
    return _gmat_py.Sinh(*args)

def Tanh(*args):
    return _gmat_py.Tanh(*args)

def ASin(*args):
    return _gmat_py.ASin(*args)

def ACos(*args):
    return _gmat_py.ACos(*args)

def ATan(*args):
    return _gmat_py.ATan(*args)

def ATan2(*args):
    return _gmat_py.ATan2(*args)

def ASinh(*args):
    return _gmat_py.ASinh(*args)

def ACosh(*args):
    return _gmat_py.ACosh(*args)

def ATanh(*args):
    return _gmat_py.ATanh(*args)

def Ln(x):
    return _gmat_py.Ln(x)

def Log10(x):
    return _gmat_py.Log10(x)

def Log(*args):
    return _gmat_py.Log(*args)

def Rand(lowerBound=0.0, upperBound=1.0):
    return _gmat_py.Rand(lowerBound, upperBound)

def Randn(mean=0.0, stdev=1.0):
    return _gmat_py.Randn(mean, stdev)

def SetSeed(seed):
    return _gmat_py.SetSeed(seed)

def Cbrt(x):
    return _gmat_py.Cbrt(x)

def Sqrt(x):
    return _gmat_py.Sqrt(x)

def Exp(x):
    return _gmat_py.Exp(x)

def Exp10(x):
    return _gmat_py.Exp10(x)

def Pow(*args):
    return _gmat_py.Pow(*args)

def IsNaN(x):
    return _gmat_py.IsNaN(x)

def IsInf(x):
    return _gmat_py.IsInf(x)
class RepeatGroundTrack(object):
    r"""Definition of the Repeat Ground Track Orbit Class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.RepeatGroundTrack_swiginit(self, _gmat_py.new_RepeatGroundTrack())
    __swig_destroy__ = _gmat_py.delete_RepeatGroundTrack

    def CalculateRepeatGroundTrack(self, eccVal, ECC, incVal, INC, rtrVal, revsToRepeat, dtrVal, daysToRepeat, rpdVal, revsPerDay):
        return _gmat_py.RepeatGroundTrack_CalculateRepeatGroundTrack(self, eccVal, ECC, incVal, INC, rtrVal, revsToRepeat, dtrVal, daysToRepeat, rpdVal, revsPerDay)

    def GetSMA(self):
        return _gmat_py.RepeatGroundTrack_GetSMA(self)

    def GetALT(self):
        return _gmat_py.RepeatGroundTrack_GetALT(self)

    def GetECC(self):
        return _gmat_py.RepeatGroundTrack_GetECC(self)

    def GetINC(self):
        return _gmat_py.RepeatGroundTrack_GetINC(self)

    def GetROP(self):
        return _gmat_py.RepeatGroundTrack_GetROP(self)

    def GetROA(self):
        return _gmat_py.RepeatGroundTrack_GetROA(self)

    def GetP(self):
        return _gmat_py.RepeatGroundTrack_GetP(self)

    def IsError(self):
        return _gmat_py.RepeatGroundTrack_IsError(self)

    def GetError(self):
        return _gmat_py.RepeatGroundTrack_GetError(self)

# Register RepeatGroundTrack in _gmat_py:
_gmat_py.RepeatGroundTrack_swigregister(RepeatGroundTrack)
class RepeatSunSync(object):
    r"""Definition of the Repeat Sun Sync Orbit Class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.RepeatSunSync_swiginit(self, _gmat_py.new_RepeatSunSync())
    __swig_destroy__ = _gmat_py.delete_RepeatSunSync

    def CalculateRepeatSunSync(self, eccVal, ECC, dtrVal, daysToRepeat, rtrVal, revsToRepeat, rpdVal, revsPerDay):
        return _gmat_py.RepeatSunSync_CalculateRepeatSunSync(self, eccVal, ECC, dtrVal, daysToRepeat, rtrVal, revsToRepeat, rpdVal, revsPerDay)

    def GetSMA(self):
        return _gmat_py.RepeatSunSync_GetSMA(self)

    def GetALT(self):
        return _gmat_py.RepeatSunSync_GetALT(self)

    def GetECC(self):
        return _gmat_py.RepeatSunSync_GetECC(self)

    def GetINC(self):
        return _gmat_py.RepeatSunSync_GetINC(self)

    def GetROP(self):
        return _gmat_py.RepeatSunSync_GetROP(self)

    def GetROA(self):
        return _gmat_py.RepeatSunSync_GetROA(self)

    def GetP(self):
        return _gmat_py.RepeatSunSync_GetP(self)

    def IsError(self):
        return _gmat_py.RepeatSunSync_IsError(self)

    def GetError(self):
        return _gmat_py.RepeatSunSync_GetError(self)

# Register RepeatSunSync in _gmat_py:
_gmat_py.RepeatSunSync_swigregister(RepeatSunSync)
class RgbColor(object):
    r"""
    Declares RgbColor class and provides conversion between RGB color and
    unsigned int color.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.RgbColor_swiginit(self, _gmat_py.new_RgbColor(*args))
    __swig_destroy__ = _gmat_py.delete_RgbColor

    def GetIntColor(self):
        return _gmat_py.RgbColor_GetIntColor(self)

    def Red(self):
        return _gmat_py.RgbColor_Red(self)

    def Green(self):
        return _gmat_py.RgbColor_Green(self)

    def Blue(self):
        return _gmat_py.RgbColor_Blue(self)

    def Alpha(self):
        return _gmat_py.RgbColor_Alpha(self)

    def Set(self, *args):
        return _gmat_py.RgbColor_Set(self, *args)

    @staticmethod
    def ToIntColor(colorString):
        return _gmat_py.RgbColor_ToIntColor(colorString)

    @staticmethod
    def ToRgbString(intColor):
        return _gmat_py.RgbColor_ToRgbString(intColor)

# Register RgbColor in _gmat_py:
_gmat_py.RgbColor_swigregister(RgbColor)
class TableTemplateReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TableTemplateReal_swiginit(self, _gmat_py.new_TableTemplateReal(*args))
    __swig_destroy__ = _gmat_py.delete_TableTemplateReal

    def __eq__(self, table):
        return _gmat_py.TableTemplateReal___eq__(self, table)

    def __ne__(self, table):
        return _gmat_py.TableTemplateReal___ne__(self, table)

    def GetElement(self, r, c):
        return _gmat_py.TableTemplateReal_GetElement(self, r, c)

    def SetElement(self, r, c, value):
        return _gmat_py.TableTemplateReal_SetElement(self, r, c, value)

    def IsSized(self):
        return _gmat_py.TableTemplateReal_IsSized(self)

    def SetSize(self, r, c, zeroElements=True):
        return _gmat_py.TableTemplateReal_SetSize(self, r, c, zeroElements)

    def ChangeSize(self, r, c, zeroElements):
        return _gmat_py.TableTemplateReal_ChangeSize(self, r, c, zeroElements)

    def GetSize(self, r, c):
        return _gmat_py.TableTemplateReal_GetSize(self, r, c)

    def GetNumColumns(self):
        return _gmat_py.TableTemplateReal_GetNumColumns(self)

    def GetNumRows(self):
        return _gmat_py.TableTemplateReal_GetNumRows(self)

    def GetDataVector(self):
        return _gmat_py.TableTemplateReal_GetDataVector(self)

    def __setitem__(self, index, value):
        if isinstance(index, tuple): # Handle tuple indexing
            r, c = index
            return self.__setitem__([r,c], value)

        if isinstance(index[0], slice): # Handle slice indexing
            row_list = list(range(self.GetNumRows())[index[0]])
        elif isinstance(index[0], list): # Handle list indexing
            row_list = index[0]
        else:
            if index[0] < 0: # Handle negative row index
                index[0] += self.GetNumRows()
            row_list = [index[0]]

        if isinstance(index[1], slice): # Handle slice indexing
            col_list = list(range(self.GetNumColumns())[index[1]])
        else:
            if index[1] < 0: # Handle negative column index
                index[1] += self.GetNumColumns()
            col_list = [index[1]]

        if not isinstance(value, list): # Handle scalar value
            value = [[value]]
        elif isinstance(index[1], list): # Handle list indexing
            col_list = index[1]
        elif not isinstance(value[0], list): # Handle 1D list
            if len(col_list) == 1:
                value = [[val] for val in value]
            else:
                value = [value]

        out = []
        for r_idx in range(len(row_list)):
            r = row_list[r_idx]
            col_out = []
            for c_idx in range(len(col_list)):
                c = col_list[c_idx]
                col_out.append(_gmat_py.TableTemplateReal___setitem__(self, [r, c], value[r_idx][c_idx]))
            out.append(col_out)

    # Flatten output if of size 1
        if len(out[0]) == 1:
            out = [l[0] for l in out]

        if len(out) == 1:
            out = out[0]

        return out



    def __getitem__(self, index):
        if isinstance(index, tuple): # Handle tuple indexing
            r, c = index
            return self[[r,c]]

        if not isinstance(index, list):
            raise TypeError("Expected a row and column to be specified")
        if len(index) > 2:
            raise TypeError("Expected a row and column to be specified")

        if isinstance(index[0], slice): # Handle slice indexing
            row_list = list(range(self.GetNumRows())[index[0]])
        elif isinstance(index[0], list): # Handle list indexing
            row_list = index[0]
        else:
            if index[0] < 0: # Handle negative row index
                index[0] += self.GetNumRows()
            row_list = [index[0]]

        if isinstance(index[1], slice): # Handle slice indexing
            col_list = list(range(self.GetNumColumns())[index[1]])
        elif isinstance(index[1], list): # Handle list indexing
            col_list = index[1]
        else:
            if index[1] < 0: # Handle negative column index
                index[1] += self.GetNumColumns()
            col_list = [index[1]]

        out = []
        for r in row_list:
            col_out = []
            for c in col_list:
                col_out.append(_gmat_py.TableTemplateReal___getitem__(self, [r, c]))
            out.append(col_out)

    # Flatten output if of size 1
        if len(out[0]) == 1:
            out = [l[0] for l in out]

        if len(out) == 1:
            out = out[0]

        return out



# Register TableTemplateReal in _gmat_py:
_gmat_py.TableTemplateReal_swigregister(TableTemplateReal)
class Rmatrix(TableTemplateReal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Rmatrix_swiginit(self, _gmat_py.new_Rmatrix(*args))
    __swig_destroy__ = _gmat_py.delete_Rmatrix

    @staticmethod
    def Identity(size):
        return _gmat_py.Rmatrix_Identity(size)

    @staticmethod
    def Diagonal(size, data):
        return _gmat_py.Rmatrix_Diagonal(size, data)

    def IsOrthogonal(self, *args):
        return _gmat_py.Rmatrix_IsOrthogonal(self, *args)

    def IsOrthonormal(self, *args):
        return _gmat_py.Rmatrix_IsOrthonormal(self, *args)

    def __eq__(self, m):
        return _gmat_py.Rmatrix___eq__(self, m)

    def __ne__(self, m):
        return _gmat_py.Rmatrix___ne__(self, m)

    def ElementWiseMultiply(self, m):
        return _gmat_py.Rmatrix_ElementWiseMultiply(self, m)

    def ElementWiseDivide(self, m):
        return _gmat_py.Rmatrix_ElementWiseDivide(self, m)

    def __add__(self, *args):
        return _gmat_py.Rmatrix___add__(self, *args)

    def __iadd__(self, *args):
        return _gmat_py.Rmatrix___iadd__(self, *args)

    def __sub__(self, *args):
        return _gmat_py.Rmatrix___sub__(self, *args)

    def __isub__(self, *args):
        return _gmat_py.Rmatrix___isub__(self, *args)

    def __imul__(self, *args):
        return _gmat_py.Rmatrix___imul__(self, *args)

    def __truediv__(self, *args):
        return _gmat_py.Rmatrix___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _gmat_py.Rmatrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        return _gmat_py.Rmatrix___neg__(self)

    def __mul__(self, *args):
        return _gmat_py.Rmatrix___mul__(self, *args)

    def Trace(self):
        return _gmat_py.Rmatrix_Trace(self)

    def Determinant(self):
        return _gmat_py.Rmatrix_Determinant(self)

    def Cofactor(self, r, c):
        return _gmat_py.Rmatrix_Cofactor(self, r, c)

    def Transpose(self):
        return _gmat_py.Rmatrix_Transpose(self)

    def Inverse(self, *args):
        return _gmat_py.Rmatrix_Inverse(self, *args)

    def Pseudoinverse(self, zeroValue=1e-12):
        return _gmat_py.Rmatrix_Pseudoinverse(self, zeroValue)

    def PsuedoInverseOfSymmetricMatrix(self, zeroValue=1e-12):
        return _gmat_py.Rmatrix_PsuedoInverseOfSymmetricMatrix(self, zeroValue)

    def Symmetric(self):
        return _gmat_py.Rmatrix_Symmetric(self)

    def AntiSymmetric(self):
        return _gmat_py.Rmatrix_AntiSymmetric(self)

    def GetRow(self, r):
        return _gmat_py.Rmatrix_GetRow(self, r)

    def GetColumn(self, c):
        return _gmat_py.Rmatrix_GetColumn(self, c)

    def GetRowOrColumn(self):
        return _gmat_py.Rmatrix_GetRowOrColumn(self)

    def MakeOneRowMatrix(self, vec):
        return _gmat_py.Rmatrix_MakeOneRowMatrix(self, vec)

    def MakeOneColumnMatrix(self, vec):
        return _gmat_py.Rmatrix_MakeOneColumnMatrix(self, vec)

    def GetStringVals(self, *args):
        return _gmat_py.Rmatrix_GetStringVals(self, *args)

    def __str__(self, *args):
        return _gmat_py.Rmatrix___str__(self, *args)

    def ToRowString(self, row, precision, width=1, zeroFill=False):
        return _gmat_py.Rmatrix_ToRowString(self, row, precision, width, zeroFill)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Rmatrix_SetClass(base)

# Register Rmatrix in _gmat_py:
_gmat_py.Rmatrix_swigregister(Rmatrix)

def Rmatrix_add(scalar, m):
    return _gmat_py.Rmatrix_add(scalar, m)

def Rmatrix_sub(scalar, m):
    return _gmat_py.Rmatrix_sub(scalar, m)

def Rmatrix_mul(scalar, m):
    return _gmat_py.Rmatrix_mul(scalar, m)

def Rmatrix_div(scalar, m):
    return _gmat_py.Rmatrix_div(scalar, m)

def SkewSymmetric4by4(v):
    return _gmat_py.SkewSymmetric4by4(v)

class Rmatrix33(Rmatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Rmatrix33_swiginit(self, _gmat_py.new_Rmatrix33(*args))
    __swig_destroy__ = _gmat_py.delete_Rmatrix33

    def __eq__(self, m):
        return _gmat_py.Rmatrix33___eq__(self, m)

    def __ne__(self, m):
        return _gmat_py.Rmatrix33___ne__(self, m)

    def Set(self, a00, a01, a02, a10, a11, a12, a20, a21, a22):
        return _gmat_py.Rmatrix33_Set(self, a00, a01, a02, a10, a11, a12, a20, a21, a22)

    def IsOrthogonal(self, *args):
        return _gmat_py.Rmatrix33_IsOrthogonal(self, *args)

    def IsOrthonormal(self, *args):
        return _gmat_py.Rmatrix33_IsOrthonormal(self, *args)

    def __add__(self, m):
        return _gmat_py.Rmatrix33___add__(self, m)

    def __iadd__(self, m):
        return _gmat_py.Rmatrix33___iadd__(self, m)

    def __sub__(self, m):
        return _gmat_py.Rmatrix33___sub__(self, m)

    def __isub__(self, m):
        return _gmat_py.Rmatrix33___isub__(self, m)

    def __imul__(self, *args):
        return _gmat_py.Rmatrix33___imul__(self, *args)

    def __truediv__(self, *args):
        return _gmat_py.Rmatrix33___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _gmat_py.Rmatrix33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        return _gmat_py.Rmatrix33___neg__(self)

    def __mul__(self, *args):
        return _gmat_py.Rmatrix33___mul__(self, *args)

    def Trace(self):
        return _gmat_py.Rmatrix33_Trace(self)

    def Determinant(self):
        return _gmat_py.Rmatrix33_Determinant(self)

    def Transpose(self):
        return _gmat_py.Rmatrix33_Transpose(self)

    def Inverse(self):
        return _gmat_py.Rmatrix33_Inverse(self)

    def Symmetric(self):
        return _gmat_py.Rmatrix33_Symmetric(self)

    def AntiSymmetric(self):
        return _gmat_py.Rmatrix33_AntiSymmetric(self)

    def GetDataDescriptions(self):
        return _gmat_py.Rmatrix33_GetDataDescriptions(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Rmatrix33_SetClass(base)

# Register Rmatrix33 in _gmat_py:
_gmat_py.Rmatrix33_swigregister(Rmatrix33)

def Rmatrix33_mul(scalar, m):
    return _gmat_py.Rmatrix33_mul(scalar, m)

class Rmatrix66(Rmatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Rmatrix66_swiginit(self, _gmat_py.new_Rmatrix66(*args))
    __swig_destroy__ = _gmat_py.delete_Rmatrix66

    def __eq__(self, m):
        return _gmat_py.Rmatrix66___eq__(self, m)

    def __ne__(self, m):
        return _gmat_py.Rmatrix66___ne__(self, m)

    def Set(self, nArgs, a1):
        return _gmat_py.Rmatrix66_Set(self, nArgs, a1)

    def SetUndefined(self):
        return _gmat_py.Rmatrix66_SetUndefined(self)

    def UpperLeft(self):
        return _gmat_py.Rmatrix66_UpperLeft(self)

    def UpperRight(self):
        return _gmat_py.Rmatrix66_UpperRight(self)

    def LowerLeft(self):
        return _gmat_py.Rmatrix66_LowerLeft(self)

    def LowerRight(self):
        return _gmat_py.Rmatrix66_LowerRight(self)

    def IsOrthogonal(self, *args):
        return _gmat_py.Rmatrix66_IsOrthogonal(self, *args)

    def IsOrthonormal(self, *args):
        return _gmat_py.Rmatrix66_IsOrthonormal(self, *args)

    def __add__(self, m):
        return _gmat_py.Rmatrix66___add__(self, m)

    def __iadd__(self, m):
        return _gmat_py.Rmatrix66___iadd__(self, m)

    def __sub__(self, m):
        return _gmat_py.Rmatrix66___sub__(self, m)

    def __isub__(self, m):
        return _gmat_py.Rmatrix66___isub__(self, m)

    def __imul__(self, *args):
        return _gmat_py.Rmatrix66___imul__(self, *args)

    def __truediv__(self, *args):
        return _gmat_py.Rmatrix66___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _gmat_py.Rmatrix66___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self):
        return _gmat_py.Rmatrix66___neg__(self)

    def __mul__(self, *args):
        return _gmat_py.Rmatrix66___mul__(self, *args)

    def Trace(self):
        return _gmat_py.Rmatrix66_Trace(self)

    def Determinant(self):
        return _gmat_py.Rmatrix66_Determinant(self)

    def Transpose(self):
        return _gmat_py.Rmatrix66_Transpose(self)

    def Inverse(self):
        return _gmat_py.Rmatrix66_Inverse(self)

    def Symmetric(self):
        return _gmat_py.Rmatrix66_Symmetric(self)

    def AntiSymmetric(self):
        return _gmat_py.Rmatrix66_AntiSymmetric(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Rmatrix66_SetClass(base)

# Register Rmatrix66 in _gmat_py:
_gmat_py.Rmatrix66_swigregister(Rmatrix66)

def Rmatrix66_mul(scalar, m):
    return _gmat_py.Rmatrix66_mul(scalar, m)

def SkewSymmetric(*args):
    return _gmat_py.SkewSymmetric(*args)

def TransposeTimesMatrix(*args):
    return _gmat_py.TransposeTimesMatrix(*args)

def MatrixTimesTranspose(*args):
    return _gmat_py.MatrixTimesTranspose(*args)

def TransposeTimesTranspose(*args):
    return _gmat_py.TransposeTimesTranspose(*args)

class Rvector(ArrayTemplateReal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Rvector_swiginit(self, _gmat_py.new_Rvector(*args))
    __swig_destroy__ = _gmat_py.delete_Rvector

    def Set(self, *args):
        return _gmat_py.Rvector_Set(self, *args)

    def GetRealArray(self):
        return _gmat_py.Rvector_GetRealArray(self)

    def GetMagnitude(self):
        return _gmat_py.Rvector_GetMagnitude(self)

    def GetUnitRvector(self):
        return _gmat_py.Rvector_GetUnitRvector(self)

    def Normalize(self):
        return _gmat_py.Rvector_Normalize(self)

    def __eq__(self, v):
        return _gmat_py.Rvector___eq__(self, v)

    def __ne__(self, v):
        return _gmat_py.Rvector___ne__(self, v)

    def __neg__(self):
        return _gmat_py.Rvector___neg__(self)

    def __add__(self, v):
        return _gmat_py.Rvector___add__(self, v)

    def __iadd__(self, v):
        return _gmat_py.Rvector___iadd__(self, v)

    def __sub__(self, v):
        return _gmat_py.Rvector___sub__(self, v)

    def __isub__(self, v):
        return _gmat_py.Rvector___isub__(self, v)

    def Max(self):
        return _gmat_py.Rvector_Max(self)

    def Min(self):
        return _gmat_py.Rvector_Min(self)

    def Sort(self, *args):
        return _gmat_py.Rvector_Sort(self, *args)

    def __mul__(self, *args):
        return _gmat_py.Rvector___mul__(self, *args)

    def __imul__(self, *args):
        return _gmat_py.Rvector___imul__(self, *args)

    def __truediv__(self, *args):
        return _gmat_py.Rvector___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _gmat_py.Rvector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def MakeZeroVector(self):
        return _gmat_py.Rvector_MakeZeroVector(self)

    def IsZeroVector(self):
        return _gmat_py.Rvector_IsZeroVector(self)

    def Norm(self):
        return _gmat_py.Rvector_Norm(self)

    def __str__(self, *args):
        return _gmat_py.Rvector___str__(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Rvector_SetClass(base)

# Register Rvector in _gmat_py:
_gmat_py.Rvector_swigregister(Rvector)

def Rvector_mul(s, v):
    return _gmat_py.Rvector_mul(s, v)

class Element(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_gmat_py.Element_value_get, _gmat_py.Element_value_set)
    index = property(_gmat_py.Element_index_get, _gmat_py.Element_index_set)

    def __init__(self):
        _gmat_py.Element_swiginit(self, _gmat_py.new_Element())
    __swig_destroy__ = _gmat_py.delete_Element

# Register Element in _gmat_py:
_gmat_py.Element_swigregister(Element)
class Rvector3(Rvector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Rvector3_swiginit(self, _gmat_py.new_Rvector3(*args))
    __swig_destroy__ = _gmat_py.delete_Rvector3

    def Get(self, index):
        return _gmat_py.Rvector3_Get(self, index)

    def Set(self, e1, e2, e3):
        return _gmat_py.Rvector3_Set(self, e1, e2, e3)

    def GetMagnitude(self):
        return _gmat_py.Rvector3_GetMagnitude(self)

    def GetUnitVector(self):
        return _gmat_py.Rvector3_GetUnitVector(self)

    def ComputeLongitudeLatitude(self, lon, lat):
        return _gmat_py.Rvector3_ComputeLongitudeLatitude(self, lon, lat)

    def __eq__(self, v):
        return _gmat_py.Rvector3___eq__(self, v)

    def __ne__(self, v):
        return _gmat_py.Rvector3___ne__(self, v)

    def __neg__(self):
        return _gmat_py.Rvector3___neg__(self)

    def __add__(self, v):
        return _gmat_py.Rvector3___add__(self, v)

    def __iadd__(self, v):
        return _gmat_py.Rvector3___iadd__(self, v)

    def __sub__(self, v):
        return _gmat_py.Rvector3___sub__(self, v)

    def __isub__(self, v):
        return _gmat_py.Rvector3___isub__(self, v)

    def __mul__(self, *args):
        return _gmat_py.Rvector3___mul__(self, *args)

    def __imul__(self, *args):
        return _gmat_py.Rvector3___imul__(self, *args)

    def __truediv__(self, *args):
        return _gmat_py.Rvector3___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _gmat_py.Rvector3___itruediv__(self, *args)
    __idiv__ = __itruediv__



    @staticmethod
    def Normalize(*args):
        return _gmat_py.Rvector3_Normalize(*args)

    @staticmethod
    def Copy(_from, to):
        return _gmat_py.Rvector3_Copy(_from, to)

    def GetNumData(self):
        return _gmat_py.Rvector3_GetNumData(self)

    def GetDataDescriptions(self):
        return _gmat_py.Rvector3_GetDataDescriptions(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Rvector3_SetClass(base)

# Register Rvector3 in _gmat_py:
_gmat_py.Rvector3_swigregister(Rvector3)

def Rvector3_mul(s, v):
    return _gmat_py.Rvector3_mul(s, v)

def Outerproduct(*args):
    return _gmat_py.Outerproduct(*args)

def Cross(v1, v2):
    return _gmat_py.Cross(v1, v2)
Rvector3.UTIL_REAL_UNDEFINED = _gmat_py.cvar.Rvector3_UTIL_REAL_UNDEFINED
Rvector3.RVECTOR3_UNDEFINED = _gmat_py.cvar.Rvector3_RVECTOR3_UNDEFINED

NUM_DATA_INIT = _gmat_py.NUM_DATA_INIT
class Rvector6(Rvector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Rvector6_swiginit(self, _gmat_py.new_Rvector6(*args))

    def Clone(self):
        return _gmat_py.Rvector6_Clone(self)
    __swig_destroy__ = _gmat_py.delete_Rvector6

    def Get(self, index):
        return _gmat_py.Rvector6_Get(self, index)

    def GetR(self, *args):
        return _gmat_py.Rvector6_GetR(self, *args)

    def GetV(self, *args):
        return _gmat_py.Rvector6_GetV(self, *args)

    def Set(self, *args):
        return _gmat_py.Rvector6_Set(self, *args)

    def SetR(self, v):
        return _gmat_py.Rvector6_SetR(self, v)

    def SetV(self, v):
        return _gmat_py.Rvector6_SetV(self, v)

    def __eq__(self, v):
        return _gmat_py.Rvector6___eq__(self, v)

    def __ne__(self, v):
        return _gmat_py.Rvector6___ne__(self, v)

    def __neg__(self):
        return _gmat_py.Rvector6___neg__(self)

    def __add__(self, v):
        return _gmat_py.Rvector6___add__(self, v)

    def __iadd__(self, v):
        return _gmat_py.Rvector6___iadd__(self, v)

    def __sub__(self, v):
        return _gmat_py.Rvector6___sub__(self, v)

    def __isub__(self, v):
        return _gmat_py.Rvector6___isub__(self, v)

    def __imul__(self, s):
        return _gmat_py.Rvector6___imul__(self, s)

    def __mul__(self, *args):
        return _gmat_py.Rvector6___mul__(self, *args)

    def __truediv__(self, *args):
        return _gmat_py.Rvector6___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _gmat_py.Rvector6___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def GetNumData(self):
        return _gmat_py.Rvector6_GetNumData(self)

    def GetDataDescriptions(self):
        return _gmat_py.Rvector6_GetDataDescriptions(self)

    def IsValid(self, val):
        return _gmat_py.Rvector6_IsValid(self, val)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Rvector6_SetClass(base)

# Register Rvector6 in _gmat_py:
_gmat_py.Rvector6_swigregister(Rvector6)
Rvector6.UTIL_REAL_UNDEFINED = _gmat_py.cvar.Rvector6_UTIL_REAL_UNDEFINED
Rvector6.RVECTOR6_UNDEFINED = _gmat_py.cvar.Rvector6_RVECTOR6_UNDEFINED

class StateConversionUtil(object):
    r"""
    Definition of the static class containing methods to convert between
    orbit state representations.
    This is a static class: No instances of this class may be declared.

    Notes: for BodyFixed states:
           Cartesian states are (x,y,z)
           Spherical and Spherical-Ellipsoid states are (latitude, longitude, height)
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CARTESIAN = _gmat_py.StateConversionUtil_CARTESIAN
    KEPLERIAN = _gmat_py.StateConversionUtil_KEPLERIAN
    MOD_KEPLERIAN = _gmat_py.StateConversionUtil_MOD_KEPLERIAN
    SPH_AZFPA = _gmat_py.StateConversionUtil_SPH_AZFPA
    SPH_RADEC = _gmat_py.StateConversionUtil_SPH_RADEC
    EQUINOCTIAL = _gmat_py.StateConversionUtil_EQUINOCTIAL
    MOD_EQUINOCTIAL = _gmat_py.StateConversionUtil_MOD_EQUINOCTIAL
    ALT_EQUINOCTIAL = _gmat_py.StateConversionUtil_ALT_EQUINOCTIAL
    DELAUNAY = _gmat_py.StateConversionUtil_DELAUNAY
    PLANETODETIC = _gmat_py.StateConversionUtil_PLANETODETIC
    OUT_ASYM = _gmat_py.StateConversionUtil_OUT_ASYM
    IN_ASYM = _gmat_py.StateConversionUtil_IN_ASYM
    BROLYD_SHORT = _gmat_py.StateConversionUtil_BROLYD_SHORT
    BROLYD_LONG = _gmat_py.StateConversionUtil_BROLYD_LONG
    StateTypeCount = _gmat_py.StateConversionUtil_StateTypeCount
    TA = _gmat_py.StateConversionUtil_TA
    MA = _gmat_py.StateConversionUtil_MA
    EA = _gmat_py.StateConversionUtil_EA
    HA = _gmat_py.StateConversionUtil_HA
    AnomalyTypeCount = _gmat_py.StateConversionUtil_AnomalyTypeCount

    @staticmethod
    def Convert(*args):
        return _gmat_py.StateConversionUtil_Convert(*args)

    @staticmethod
    def ConvertFromCartesian(*args):
        return _gmat_py.StateConversionUtil_ConvertFromCartesian(*args)

    @staticmethod
    def ConvertFromKeplerian(*args):
        return _gmat_py.StateConversionUtil_ConvertFromKeplerian(*args)

    @staticmethod
    def ConvertFromModKeplerian(*args):
        return _gmat_py.StateConversionUtil_ConvertFromModKeplerian(*args)

    @staticmethod
    def ConvertFromSphericalAZFPA(*args):
        return _gmat_py.StateConversionUtil_ConvertFromSphericalAZFPA(*args)

    @staticmethod
    def ConvertFromSphericalRADEC(*args):
        return _gmat_py.StateConversionUtil_ConvertFromSphericalRADEC(*args)

    @staticmethod
    def ConvertFromEquinoctial(*args):
        return _gmat_py.StateConversionUtil_ConvertFromEquinoctial(*args)

    @staticmethod
    def ConvertFromModEquinoctial(*args):
        return _gmat_py.StateConversionUtil_ConvertFromModEquinoctial(*args)

    @staticmethod
    def ConvertFromAltEquinoctial(*args):
        return _gmat_py.StateConversionUtil_ConvertFromAltEquinoctial(*args)

    @staticmethod
    def ConvertFromDelaunay(*args):
        return _gmat_py.StateConversionUtil_ConvertFromDelaunay(*args)

    @staticmethod
    def ConvertFromPlanetodetic(*args):
        return _gmat_py.StateConversionUtil_ConvertFromPlanetodetic(*args)

    @staticmethod
    def ConvertFromIncomingAsymptote(*args):
        return _gmat_py.StateConversionUtil_ConvertFromIncomingAsymptote(*args)

    @staticmethod
    def ConvertFromOutgoingAsymptote(*args):
        return _gmat_py.StateConversionUtil_ConvertFromOutgoingAsymptote(*args)

    @staticmethod
    def ConvertFromBrouwerMeanShort(*args):
        return _gmat_py.StateConversionUtil_ConvertFromBrouwerMeanShort(*args)

    @staticmethod
    def ConvertFromBrouwerMeanLong(*args):
        return _gmat_py.StateConversionUtil_ConvertFromBrouwerMeanLong(*args)

    @staticmethod
    def CartesianToKeplerian(*args):
        return _gmat_py.StateConversionUtil_CartesianToKeplerian(*args)

    @staticmethod
    def KeplerianToCartesian(*args):
        return _gmat_py.StateConversionUtil_KeplerianToCartesian(*args)

    @staticmethod
    def CartesianToSphericalAZFPA(cartesian):
        return _gmat_py.StateConversionUtil_CartesianToSphericalAZFPA(cartesian)

    @staticmethod
    def SphericalAZFPAToCartesian(spherical):
        return _gmat_py.StateConversionUtil_SphericalAZFPAToCartesian(spherical)

    @staticmethod
    def CartesianToSphericalRADEC(cartesian):
        return _gmat_py.StateConversionUtil_CartesianToSphericalRADEC(cartesian)

    @staticmethod
    def SphericalRADECToCartesian(spherical):
        return _gmat_py.StateConversionUtil_SphericalRADECToCartesian(spherical)

    @staticmethod
    def KeplerianToModKeplerian(keplerian):
        return _gmat_py.StateConversionUtil_KeplerianToModKeplerian(keplerian)

    @staticmethod
    def ModKeplerianToKeplerian(modKeplerian):
        return _gmat_py.StateConversionUtil_ModKeplerianToKeplerian(modKeplerian)

    @staticmethod
    def CartesianToEquinoctial(cartesian, mu):
        return _gmat_py.StateConversionUtil_CartesianToEquinoctial(cartesian, mu)

    @staticmethod
    def EquinoctialToCartesian(equinoctial, mu):
        return _gmat_py.StateConversionUtil_EquinoctialToCartesian(equinoctial, mu)

    @staticmethod
    def CartesianToModEquinoctial(cartesian, mu):
        return _gmat_py.StateConversionUtil_CartesianToModEquinoctial(cartesian, mu)

    @staticmethod
    def ModEquinoctialToCartesian(modequinoctial, mu):
        return _gmat_py.StateConversionUtil_ModEquinoctialToCartesian(modequinoctial, mu)

    @staticmethod
    def KeplerianToDelaunay(keplerian, mu):
        return _gmat_py.StateConversionUtil_KeplerianToDelaunay(keplerian, mu)

    @staticmethod
    def DelaunayToKeplerian(delaunay, mu):
        return _gmat_py.StateConversionUtil_DelaunayToKeplerian(delaunay, mu)

    @staticmethod
    def CartesianToPlanetodetic(cartesian, flattening, eqRadius):
        return _gmat_py.StateConversionUtil_CartesianToPlanetodetic(cartesian, flattening, eqRadius)

    @staticmethod
    def PlanetodeticToCartesian(planetodetic, flattening, eqRadius):
        return _gmat_py.StateConversionUtil_PlanetodeticToCartesian(planetodetic, flattening, eqRadius)

    @staticmethod
    def CartesianToIncomingAsymptote(mu, cartesian):
        return _gmat_py.StateConversionUtil_CartesianToIncomingAsymptote(mu, cartesian)

    @staticmethod
    def IncomingAsymptoteToCartesian(mu, inasym):
        return _gmat_py.StateConversionUtil_IncomingAsymptoteToCartesian(mu, inasym)

    @staticmethod
    def CartesianToOutgoingAsymptote(mu, cartesian):
        return _gmat_py.StateConversionUtil_CartesianToOutgoingAsymptote(mu, cartesian)

    @staticmethod
    def OutgoingAsymptoteToCartesian(mu, outasym):
        return _gmat_py.StateConversionUtil_OutgoingAsymptoteToCartesian(mu, outasym)

    @staticmethod
    def CartesianToBrouwerMeanShort(mu, cartesian):
        return _gmat_py.StateConversionUtil_CartesianToBrouwerMeanShort(mu, cartesian)

    @staticmethod
    def BrouwerMeanShortToOsculatingElements(mu, blms):
        return _gmat_py.StateConversionUtil_BrouwerMeanShortToOsculatingElements(mu, blms)

    @staticmethod
    def BrouwerMeanShortToCartesian(mu, blms):
        return _gmat_py.StateConversionUtil_BrouwerMeanShortToCartesian(mu, blms)

    @staticmethod
    def CartesianToBrouwerMeanLong(mu, cartesian):
        return _gmat_py.StateConversionUtil_CartesianToBrouwerMeanLong(mu, cartesian)

    @staticmethod
    def BrouwerMeanLongToOsculatingElements(mu, blml):
        return _gmat_py.StateConversionUtil_BrouwerMeanLongToOsculatingElements(mu, blml)

    @staticmethod
    def BrouwerMeanLongToCartesian(mu, blml):
        return _gmat_py.StateConversionUtil_BrouwerMeanLongToCartesian(mu, blml)

    @staticmethod
    def EquinoctialToAltEquinoctial(equinoctial):
        return _gmat_py.StateConversionUtil_EquinoctialToAltEquinoctial(equinoctial)

    @staticmethod
    def AltEquinoctialToEquinoctial(altequinoctial):
        return _gmat_py.StateConversionUtil_AltEquinoctialToEquinoctial(altequinoctial)

    @staticmethod
    def TrueToMeanAnomaly(taRadians, ecc, modBy2Pi=False):
        return _gmat_py.StateConversionUtil_TrueToMeanAnomaly(taRadians, ecc, modBy2Pi)

    @staticmethod
    def TrueToEccentricAnomaly(taRadians, ecc, modBy2Pi=False):
        return _gmat_py.StateConversionUtil_TrueToEccentricAnomaly(taRadians, ecc, modBy2Pi)

    @staticmethod
    def TrueToHyperbolicAnomaly(taRadians, ecc, modBy2Pi=False):
        return _gmat_py.StateConversionUtil_TrueToHyperbolicAnomaly(taRadians, ecc, modBy2Pi)

    @staticmethod
    def MeanToTrueAnomaly(maRadians, ecc, tol=1.0e-08):
        return _gmat_py.StateConversionUtil_MeanToTrueAnomaly(maRadians, ecc, tol)

    @staticmethod
    def EccentricToTrueAnomaly(eaRadians, ecc, modBy2Pi=False):
        return _gmat_py.StateConversionUtil_EccentricToTrueAnomaly(eaRadians, ecc, modBy2Pi)

    @staticmethod
    def HyperbolicToTrueAnomaly(haRadians, ecc, modBy2Pi=False):
        return _gmat_py.StateConversionUtil_HyperbolicToTrueAnomaly(haRadians, ecc, modBy2Pi)

    @staticmethod
    def ConvertFromTrueAnomaly(*args):
        return _gmat_py.StateConversionUtil_ConvertFromTrueAnomaly(*args)

    @staticmethod
    def ConvertToTrueAnomaly(*args):
        return _gmat_py.StateConversionUtil_ConvertToTrueAnomaly(*args)

    @staticmethod
    def CartesianToTA(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToTA(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToMA(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToMA(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToEA(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToEA(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToHA(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToHA(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToSMA(mu, pos, vel):
        return _gmat_py.StateConversionUtil_CartesianToSMA(mu, pos, vel)

    @staticmethod
    def CartesianToECC(mu, pos, vel):
        return _gmat_py.StateConversionUtil_CartesianToECC(mu, pos, vel)

    @staticmethod
    def CartesianToINC(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToINC(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToRAAN(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToRAAN(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToAOP(mu, pos, vel, inRadian=False):
        return _gmat_py.StateConversionUtil_CartesianToAOP(mu, pos, vel, inRadian)

    @staticmethod
    def CartesianToEccVector(mu, pos, vel):
        return _gmat_py.StateConversionUtil_CartesianToEccVector(mu, pos, vel)

    @staticmethod
    def CartesianToDirOfLineOfNode(pos, vel):
        return _gmat_py.StateConversionUtil_CartesianToDirOfLineOfNode(pos, vel)

    @staticmethod
    def CartesianToAngularMomentum(mu, pos, vel):
        return _gmat_py.StateConversionUtil_CartesianToAngularMomentum(mu, pos, vel)

    @staticmethod
    def StateConvJacobian(*args):
        return _gmat_py.StateConversionUtil_StateConvJacobian(*args)

    @staticmethod
    def JacobianOfCartesian(*args):
        return _gmat_py.StateConversionUtil_JacobianOfCartesian(*args)

    @staticmethod
    def JacobianWrtCartesian(*args):
        return _gmat_py.StateConversionUtil_JacobianWrtCartesian(*args)

    @staticmethod
    def CalculateEccentricAnomaly(e, M):
        return _gmat_py.StateConversionUtil_CalculateEccentricAnomaly(e, M)

    @staticmethod
    def CartesianToKeplerianDerivativeConversion(*args):
        return _gmat_py.StateConversionUtil_CartesianToKeplerianDerivativeConversion(*args)

    @staticmethod
    def CartesianToKeplerianDerivativeConversionWithKeplInput(*args):
        return _gmat_py.StateConversionUtil_CartesianToKeplerianDerivativeConversionWithKeplInput(*args)

    @staticmethod
    def CartesianToKeplerianDerivativeConversion_FiniteDiff(*args):
        return _gmat_py.StateConversionUtil_CartesianToKeplerianDerivativeConversion_FiniteDiff(*args)

    @staticmethod
    def CartesianToKeplerianDerivativeConversionWithKeplInput_FiniteDiff(*args):
        return _gmat_py.StateConversionUtil_CartesianToKeplerianDerivativeConversionWithKeplInput_FiniteDiff(*args)

    @staticmethod
    def KeplerianToCartesianDerivativeConversion(mu, cartesianState):
        return _gmat_py.StateConversionUtil_KeplerianToCartesianDerivativeConversion(mu, cartesianState)

    @staticmethod
    def CartesianToSphericalAzFPADerivativeConversion(mu, cartesianState):
        return _gmat_py.StateConversionUtil_CartesianToSphericalAzFPADerivativeConversion(mu, cartesianState)

    @staticmethod
    def SphericalAzFPAToCartesianDerivativeConversion(mu, cartesianState):
        return _gmat_py.StateConversionUtil_SphericalAzFPAToCartesianDerivativeConversion(mu, cartesianState)

    @staticmethod
    def ValidateValue(*args):
        return _gmat_py.StateConversionUtil_ValidateValue(*args)

    @staticmethod
    def GetTypeCount():
        return _gmat_py.StateConversionUtil_GetTypeCount()

    @staticmethod
    def GetStateTypeList():
        return _gmat_py.StateConversionUtil_GetStateTypeList()

    @staticmethod
    def RequiresCelestialBodyOrigin(type):
        return _gmat_py.StateConversionUtil_RequiresCelestialBodyOrigin(type)

    @staticmethod
    def RequiresFixedCoordinateSystem(type):
        return _gmat_py.StateConversionUtil_RequiresFixedCoordinateSystem(type)

    @staticmethod
    def GetAnomalyType(typeStr):
        return _gmat_py.StateConversionUtil_GetAnomalyType(typeStr)

    @staticmethod
    def IsValidAnomalyType(anomType):
        return _gmat_py.StateConversionUtil_IsValidAnomalyType(anomType)

    @staticmethod
    def IsRvValid(r, v):
        return _gmat_py.StateConversionUtil_IsRvValid(r, v)

    @staticmethod
    def GetLongTypeNameList():
        return _gmat_py.StateConversionUtil_GetLongTypeNameList()

    @staticmethod
    def GetAnomalyShortText(anomalyType):
        return _gmat_py.StateConversionUtil_GetAnomalyShortText(anomalyType)

    @staticmethod
    def GetAnomalyLongText(anomalyType):
        return _gmat_py.StateConversionUtil_GetAnomalyLongText(anomalyType)

# Register StateConversionUtil in _gmat_py:
_gmat_py.StateConversionUtil_swigregister(StateConversionUtil)
class StringTokenizer(object):
    r"""Definition of the StringTokenizer class base"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.StringTokenizer_swiginit(self, _gmat_py.new_StringTokenizer(*args))
    __swig_destroy__ = _gmat_py.delete_StringTokenizer

    def SetDelimiters(self, delim):
        return _gmat_py.StringTokenizer_SetDelimiters(self, delim)

    def GetDelimiters(self):
        return _gmat_py.StringTokenizer_GetDelimiters(self)

    def CountTokens(self):
        return _gmat_py.StringTokenizer_CountTokens(self)

    def GetToken(self, loc):
        return _gmat_py.StringTokenizer_GetToken(self, loc)

    def GetAllTokens(self):
        return _gmat_py.StringTokenizer_GetAllTokens(self)

    def Set(self, *args):
        return _gmat_py.StringTokenizer_Set(self, *args)

# Register StringTokenizer in _gmat_py:
_gmat_py.StringTokenizer_swigregister(StringTokenizer)
class SunSync(object):
    r"""Definition of the Sun Sync Orbit Class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.SunSync_swiginit(self, _gmat_py.new_SunSync(*args))
    __swig_destroy__ = _gmat_py.delete_SunSync

    def CalculateSunSync(self, aVal, a, altVal, alt, eVal, e, iVal, i, ropVal, RoP, roaVal, RoA, pVal, P):
        return _gmat_py.SunSync_CalculateSunSync(self, aVal, a, altVal, alt, eVal, e, iVal, i, ropVal, RoP, roaVal, RoA, pVal, P)

    def GetSMA(self):
        return _gmat_py.SunSync_GetSMA(self)

    def GetALT(self):
        return _gmat_py.SunSync_GetALT(self)

    def GetECC(self):
        return _gmat_py.SunSync_GetECC(self)

    def GetINC(self):
        return _gmat_py.SunSync_GetINC(self)

    def GetROP(self):
        return _gmat_py.SunSync_GetROP(self)

    def GetROA(self):
        return _gmat_py.SunSync_GetROA(self)

    def GetP(self):
        return _gmat_py.SunSync_GetP(self)

    def IsError(self):
        return _gmat_py.SunSync_IsError(self)

    def GetError(self):
        return _gmat_py.SunSync_GetError(self)

    def SolveA(self, e, i, flag):
        return _gmat_py.SunSync_SolveA(self, e, i, flag)

    def SolveE(self, a, i, flag, altFlag=False):
        return _gmat_py.SunSync_SolveE(self, a, i, flag, altFlag)

    def SolveI(self, a, e, flag, roaFlag=False, ropFlag=False, eFlag=True, aFlag=True, pFlag=False, altFlag=False):
        return _gmat_py.SunSync_SolveI(self, a, e, flag, roaFlag, ropFlag, eFlag, aFlag, pFlag, altFlag)

    def SolvePAE(self, P, i, a, e):
        return _gmat_py.SunSync_SolvePAE(self, P, i, a, e)

    def SolveRoAAE(self, RoA, i, a, e):
        return _gmat_py.SunSync_SolveRoAAE(self, RoA, i, a, e)

    def SolveRoPAE(self, RoP, i, a, e):
        return _gmat_py.SunSync_SolveRoPAE(self, RoP, i, a, e)

# Register SunSync in _gmat_py:
_gmat_py.SunSync_swigregister(SunSync)
COMMENT_BLOCK = _gmat_py.COMMENT_BLOCK
DEFINITION_BLOCK = _gmat_py.DEFINITION_BLOCK
COMMAND_BLOCK = _gmat_py.COMMAND_BLOCK
ASSIGNMENT_BLOCK = _gmat_py.ASSIGNMENT_BLOCK
FUNCTION_BLOCK = _gmat_py.FUNCTION_BLOCK
INCLUDE_BLOCK = _gmat_py.INCLUDE_BLOCK
METHOD_BLOCK = _gmat_py.METHOD_BLOCK
class TextParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.TextParser_swiginit(self, _gmat_py.new_TextParser())
    __swig_destroy__ = _gmat_py.delete_TextParser

    def GetPrefaceComment(self):
        return _gmat_py.TextParser_GetPrefaceComment(self)

    def GetInlineComment(self):
        return _gmat_py.TextParser_GetInlineComment(self)

    def GetInstruction(self):
        return _gmat_py.TextParser_GetInstruction(self)

    def Initialize(self, commandList):
        return _gmat_py.TextParser_Initialize(self, commandList)

    def GetChunks(self):
        return _gmat_py.TextParser_GetChunks(self)

    def IsFunctionCall(self):
        return _gmat_py.TextParser_IsFunctionCall(self)

    def Reset(self):
        return _gmat_py.TextParser_Reset(self)

    def PrependIncludeComment(self, incLine):
        return _gmat_py.TextParser_PrependIncludeComment(self, incLine)

    def EvaluateBlock(self, logicalBlock):
        return _gmat_py.TextParser_EvaluateBlock(self, logicalBlock)

    def DecomposeBlock(self, logicalBlock):
        return _gmat_py.TextParser_DecomposeBlock(self, logicalBlock)

    def ChunkLine(self):
        return _gmat_py.TextParser_ChunkLine(self)

    def Decompose(self, chunk, bracketPair, checkForArray=True, removeOuterBracket=False):
        return _gmat_py.TextParser_Decompose(self, chunk, bracketPair, checkForArray, removeOuterBracket)

    def SeparateBrackets(self, chunk, bracketPair, delim, checkOuterBracket=True):
        return _gmat_py.TextParser_SeparateBrackets(self, chunk, bracketPair, delim, checkOuterBracket)

    def SeparateAllBrackets(self, chunk, bracketPair):
        return _gmat_py.TextParser_SeparateAllBrackets(self, chunk, bracketPair)

    def SeparateSpaces(self, chunk):
        return _gmat_py.TextParser_SeparateSpaces(self, chunk)

    def SeparateDots(self, chunk):
        return _gmat_py.TextParser_SeparateDots(self, chunk)

    def SeparateBy(self, chunk, delim):
        return _gmat_py.TextParser_SeparateBy(self, chunk, delim)

# Register TextParser in _gmat_py:
_gmat_py.TextParser_swigregister(TextParser)
class TimeSystemConverter(object):
    r"""
    Time system conversion routines

    GMAT supports time representations in several different time systems.  This
    class provides routimes to convert between these time systems, and to
    show hte time as either a real modified Julian number or as a Gregorian date.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.TimeSystemConverter_Instance()
    TDB_COEFF1 = property(_gmat_py.TimeSystemConverter_TDB_COEFF1_get)
    TDB_COEFF2 = property(_gmat_py.TimeSystemConverter_TDB_COEFF2_get)
    M_E_OFFSET = property(_gmat_py.TimeSystemConverter_M_E_OFFSET_get)
    M_E_COEFF1 = property(_gmat_py.TimeSystemConverter_M_E_COEFF1_get)
    T_TT_OFFSET = property(_gmat_py.TimeSystemConverter_T_TT_OFFSET_get)
    T_TT_COEFF1 = property(_gmat_py.TimeSystemConverter_T_TT_COEFF1_get)
    L_B = property(_gmat_py.TimeSystemConverter_L_B_get)
    NUM_SECS = property(_gmat_py.TimeSystemConverter_NUM_SECS_get)
    A1MJD = _gmat_py.TimeSystemConverter_A1MJD
    TAIMJD = _gmat_py.TimeSystemConverter_TAIMJD
    UTCMJD = _gmat_py.TimeSystemConverter_UTCMJD
    UT1MJD = _gmat_py.TimeSystemConverter_UT1MJD
    TDBMJD = _gmat_py.TimeSystemConverter_TDBMJD
    TTMJD = _gmat_py.TimeSystemConverter_TTMJD
    A1 = _gmat_py.TimeSystemConverter_A1
    TAI = _gmat_py.TimeSystemConverter_TAI
    UTC = _gmat_py.TimeSystemConverter_UTC
    UT1 = _gmat_py.TimeSystemConverter_UT1
    TDB = _gmat_py.TimeSystemConverter_TDB
    TT = _gmat_py.TimeSystemConverter_TT
    TimeSystemCount = _gmat_py.TimeSystemConverter_TimeSystemCount

    def GetTimeTypeID(self, str):
        return _gmat_py.TimeSystemConverter_GetTimeTypeID(self, str)

    def ConvertToTaiMjd(self, *args):
        return _gmat_py.TimeSystemConverter_ConvertToTaiMjd(self, *args)

    def ConvertFromTaiMjd(self, *args):
        return _gmat_py.TimeSystemConverter_ConvertFromTaiMjd(self, *args)

    def NumberOfLeapSecondsFrom(self, *args):
        return _gmat_py.TimeSystemConverter_NumberOfLeapSecondsFrom(self, *args)

    def GetFirstLeapSecondMJD(self, *args):
        return _gmat_py.TimeSystemConverter_GetFirstLeapSecondMJD(self, *args)

    def SetEopFile(self, eopFile):
        return _gmat_py.TimeSystemConverter_SetEopFile(self, eopFile)

    def SetLeapSecsFileReader(self, leapSecsFileReader):
        return _gmat_py.TimeSystemConverter_SetLeapSecsFileReader(self, leapSecsFileReader)

    def GetTimeSystemAndFormat(self, type, system, format):
        return _gmat_py.TimeSystemConverter_GetTimeSystemAndFormat(self, type, system, format)

    def ConvertMjdToGregorian(self, mjd, handleLeapSecond=False, format=1):
        return _gmat_py.TimeSystemConverter_ConvertMjdToGregorian(self, mjd, handleLeapSecond, format)

    def ConvertGregorianToMjd(self, greg):
        return _gmat_py.TimeSystemConverter_ConvertGregorianToMjd(self, greg)

    def ConvertGregorianToMjdGT(self, greg):
        return _gmat_py.TimeSystemConverter_ConvertGregorianToMjdGT(self, greg)

    def Convert(self, *args):
        return _gmat_py.TimeSystemConverter_Convert(self, *args)

    def ValidateTimeSystem(self, sys):
        return _gmat_py.TimeSystemConverter_ValidateTimeSystem(self, sys)

    def ValidateTimeFormat(self, format, value, checkValue=True):
        return _gmat_py.TimeSystemConverter_ValidateTimeFormat(self, format, value, checkValue)

    def GetValidTimeRepresentations(self):
        return _gmat_py.TimeSystemConverter_GetValidTimeRepresentations(self)

    def IsValidTimeSystem(self, system):
        return _gmat_py.TimeSystemConverter_IsValidTimeSystem(self, system)
    __swig_destroy__ = _gmat_py.delete_TimeSystemConverter

# Register TimeSystemConverter in _gmat_py:
_gmat_py.TimeSystemConverter_swigregister(TimeSystemConverter)
TimeSystemConverter.TIME_SYSTEM_TEXT = _gmat_py.cvar.TimeSystemConverter_TIME_SYSTEM_TEXT

class CalDate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.CalDate_swiginit(self, _gmat_py.new_CalDate(*args))
    year = property(_gmat_py.CalDate_year_get, _gmat_py.CalDate_year_set)
    month = property(_gmat_py.CalDate_month_get, _gmat_py.CalDate_month_set)
    day = property(_gmat_py.CalDate_day_get, _gmat_py.CalDate_day_set)
    hour = property(_gmat_py.CalDate_hour_get, _gmat_py.CalDate_hour_set)
    minute = property(_gmat_py.CalDate_minute_get, _gmat_py.CalDate_minute_set)
    second = property(_gmat_py.CalDate_second_get, _gmat_py.CalDate_second_set)
    __swig_destroy__ = _gmat_py.delete_CalDate

# Register CalDate in _gmat_py:
_gmat_py.CalDate_swigregister(CalDate)
class ElapsedDate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ElapsedDate_swiginit(self, _gmat_py.new_ElapsedDate(*args))
    days = property(_gmat_py.ElapsedDate_days_get, _gmat_py.ElapsedDate_days_set)
    hours = property(_gmat_py.ElapsedDate_hours_get, _gmat_py.ElapsedDate_hours_set)
    minutes = property(_gmat_py.ElapsedDate_minutes_get, _gmat_py.ElapsedDate_minutes_set)
    seconds = property(_gmat_py.ElapsedDate_seconds_get, _gmat_py.ElapsedDate_seconds_set)
    __swig_destroy__ = _gmat_py.delete_ElapsedDate

# Register ElapsedDate in _gmat_py:
_gmat_py.ElapsedDate_swigregister(ElapsedDate)

def IsValidMonthName(str):
    return _gmat_py.IsValidMonthName(str)

def GetMonthName(month):
    return _gmat_py.GetMonthName(month)

def GetMonth(monthName):
    return _gmat_py.GetMonth(monthName)

def FormatCurrentTime(format=1):
    return _gmat_py.FormatCurrentTime(format)

def GetGregorianFormat():
    return _gmat_py.GetGregorianFormat()
class UtcDate(Date):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.UtcDate_swiginit(self, _gmat_py.new_UtcDate(*args))
    __swig_destroy__ = _gmat_py.delete_UtcDate

    def ToA1Mjd(self):
        return _gmat_py.UtcDate_ToA1Mjd(self)

# Register UtcDate in _gmat_py:
_gmat_py.UtcDate_swigregister(UtcDate)
class Interpolator(object):
    r"""
    Definition for the Interpolator base class

    Base class for the GMAT Interpolators
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Interpolator

    def IsInterpolationFeasible(self, ind):
        return _gmat_py.Interpolator_IsInterpolationFeasible(self, ind)

    def SetForceInterpolation(self, flag):
        return _gmat_py.Interpolator_SetForceInterpolation(self, flag)

    def GetForceInterpolation(self):
        return _gmat_py.Interpolator_GetForceInterpolation(self)

    def AddPoint(self, ind, data):
        return _gmat_py.Interpolator_AddPoint(self, ind, data)

    def Clear(self):
        return _gmat_py.Interpolator_Clear(self)

    def GetBufferSize(self):
        return _gmat_py.Interpolator_GetBufferSize(self)

    def GetPointCount(self):
        return _gmat_py.Interpolator_GetPointCount(self)

    def SetExtrapolation(self, flag):
        return _gmat_py.Interpolator_SetExtrapolation(self, flag)

    def GetName(self):
        return _gmat_py.Interpolator_GetName(self)

    def GetRange(self, lower, upper):
        return _gmat_py.Interpolator_GetRange(self, lower, upper)

    def Interpolate(self, ind, results):
        r"""
        Interpolate the data.

        Derived classes implement this method to provide the mathematics that
        perform the data interpolation, resulint in an array of interpolated data
        valid at the desired value of the independent variable.

        :type ind: float
        :param ind:     Value of the independent variable at which the data is
                           interpolated.
        :type results: float
        :param results: Array of interpolated data.

        :rtype: boolean
        :return: true on success, false (or throw) on failure.
        """
        return _gmat_py.Interpolator_Interpolate(self, ind, results)

    def Clone(self):
        return _gmat_py.Interpolator_Clone(self)

# Register Interpolator in _gmat_py:
_gmat_py.Interpolator_swigregister(Interpolator)
class BrentDekkerZero(object):
    r"""
    Defines interpolation class using the cubic spline algorithm described in
    Numerical Recipes in C, 2nd Ed., pp 113 ff
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BrentDekkerZero

    def __init__(self, *args):
        _gmat_py.BrentDekkerZero_swiginit(self, _gmat_py.new_BrentDekkerZero(*args))

    def SetInterval(self, a0, b0, fa0, fb0, tolerance):
        return _gmat_py.BrentDekkerZero_SetInterval(self, a0, b0, fa0, fb0, tolerance)

    def FindStep(self, lastStep, lastEval):
        return _gmat_py.BrentDekkerZero_FindStep(self, lastStep, lastEval)

    def CheckConvergence(self):
        return _gmat_py.BrentDekkerZero_CheckConvergence(self)

    def TestDriver(self, aVal, bVal, tVal):
        return _gmat_py.BrentDekkerZero_TestDriver(self, aVal, bVal, tVal)

# Register BrentDekkerZero in _gmat_py:
_gmat_py.BrentDekkerZero_swigregister(BrentDekkerZero)
class CubicSplineInterpolator(Interpolator):
    r"""
    Defines interpolation class using the cubic spline algorithm described in
    Numerical Recipes in C, 2nd Ed., pp 113 ff
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CubicSplineInterpolator

    def __init__(self, *args):
        _gmat_py.CubicSplineInterpolator_swiginit(self, _gmat_py.new_CubicSplineInterpolator(*args))

    def Interpolate(self, ind, results):
        return _gmat_py.CubicSplineInterpolator_Interpolate(self, ind, results)

    def Clone(self):
        return _gmat_py.CubicSplineInterpolator_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CubicSplineInterpolator_SetClass(base)

# Register CubicSplineInterpolator in _gmat_py:
_gmat_py.CubicSplineInterpolator_swigregister(CubicSplineInterpolator)
class HermiteInterpolator(Interpolator):
    r"""
    Hermite interpolation class

    The Hermite interpolator

    This implementation of Hermite interpolation allows for interpolation schemes
    that include derivative information.  The derivative data is used element by
    element.  That means that the vector that is interpolated can have derivative
    data for some terms and not for others.

    The current code implements Hermite-Newton interpolation, using divided
    differences to build a tableau of terms that are then used for interpolation.
    The current implementation follows the derivation presented at

      http://www.personal.psu.edu/jjb23/web/htmls/sl455SP12/ch3/CH03_4B.pdf

    along with other sources.

    The current implementation has 2 restrictions that can be removed by further
    work:

    1. It uses for first derivative inputs only, and does not allow for
       incorporation of higher order derivatives.  The code has structures in
       place to pull in higher order derivatives (see AddDerivative), but does
       not use them.

    2. The code requires that each point in the buffer of points used for
       interpolation have the same number of derivatives (i.e. either no
       derivatives, or first derivatives).  M.J.D. Powell, Approximation Theory
       and Methods, Ch. 5, shows how to accommodate derivative data at some
       points but not all.  This implementation does not currently suppor that
       option.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_HermiteInterpolator

    def __init__(self, *args):
        _gmat_py.HermiteInterpolator_swiginit(self, _gmat_py.new_HermiteInterpolator(*args))

    def Clone(self):
        return _gmat_py.HermiteInterpolator_Clone(self)

    def Clear(self):
        return _gmat_py.HermiteInterpolator_Clear(self)

    def AddDerivative(self, ind, data, order=1):
        return _gmat_py.HermiteInterpolator_AddDerivative(self, ind, data, order)

    def Interpolate(self, ind, results):
        return _gmat_py.HermiteInterpolator_Interpolate(self, ind, results)

    def InterpolateCartesianState(self, ind, results):
        return _gmat_py.HermiteInterpolator_InterpolateCartesianState(self, ind, results)

    @staticmethod
    def SetClass(base):
        return _gmat_py.HermiteInterpolator_SetClass(base)

# Register HermiteInterpolator in _gmat_py:
_gmat_py.HermiteInterpolator_swigregister(HermiteInterpolator)
class LagrangeInterpolator(Interpolator):
    r"""Declares LagrangeInterpolator class as specified in the GMAT Math Spec."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_LagrangeInterpolator

    def __init__(self, *args):
        _gmat_py.LagrangeInterpolator_swiginit(self, _gmat_py.new_LagrangeInterpolator(*args))

    def IsInterpolationFeasible(self, ind):
        return _gmat_py.LagrangeInterpolator_IsInterpolationFeasible(self, ind)

    def Clear(self):
        return _gmat_py.LagrangeInterpolator_Clear(self)

    def AddPoint(self, ind, data):
        return _gmat_py.LagrangeInterpolator_AddPoint(self, ind, data)

    def Interpolate(self, ind, results):
        return _gmat_py.LagrangeInterpolator_Interpolate(self, ind, results)

    def Clone(self):
        return _gmat_py.LagrangeInterpolator_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.LagrangeInterpolator_SetClass(base)

# Register LagrangeInterpolator in _gmat_py:
_gmat_py.LagrangeInterpolator_swigregister(LagrangeInterpolator)
class LinearInterpolator(Interpolator):
    r"""
    A basic linear interpolator.

    A linear interpolator for quick calculation of interpolated data
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_LinearInterpolator

    def __init__(self, *args):
        _gmat_py.LinearInterpolator_swiginit(self, _gmat_py.new_LinearInterpolator(*args))

    def Interpolate(self, ind, results):
        return _gmat_py.LinearInterpolator_Interpolate(self, ind, results)

    def Clone(self):
        return _gmat_py.LinearInterpolator_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.LinearInterpolator_SetClass(base)

# Register LinearInterpolator in _gmat_py:
_gmat_py.LinearInterpolator_swigregister(LinearInterpolator)
class NotAKnotInterpolator(Interpolator):
    r"""
    Defines interpolation class using the cubic spline algorithm with "not a
    knot" conditions at points 2 and 4, as described in the GMAT Math Spec.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_NotAKnotInterpolator

    def __init__(self, *args):
        _gmat_py.NotAKnotInterpolator_swiginit(self, _gmat_py.new_NotAKnotInterpolator(*args))

    def Interpolate(self, ind, results):
        return _gmat_py.NotAKnotInterpolator_Interpolate(self, ind, results)

    def Clone(self):
        return _gmat_py.NotAKnotInterpolator_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.NotAKnotInterpolator_SetClass(base)

# Register NotAKnotInterpolator in _gmat_py:
_gmat_py.NotAKnotInterpolator_swigregister(NotAKnotInterpolator)
class GEOPARMS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xtemp = property(_gmat_py.GEOPARMS_xtemp_get, _gmat_py.GEOPARMS_xtemp_set, doc=r""" minimum global exospheric temperature (degrees K)""")
    tkp = property(_gmat_py.GEOPARMS_tkp_get, _gmat_py.GEOPARMS_tkp_set, doc=r""" geomagnetic index""")

    def __init__(self):
        _gmat_py.GEOPARMS_swiginit(self, _gmat_py.new_GEOPARMS())
    __swig_destroy__ = _gmat_py.delete_GEOPARMS

# Register GEOPARMS in _gmat_py:
_gmat_py.GEOPARMS_swigregister(GEOPARMS)
SPACECRAFT = _gmat_py.SPACECRAFT
FORMATION = _gmat_py.FORMATION
SPACEOBJECT = _gmat_py.SPACEOBJECT
GROUND_STATION = _gmat_py.GROUND_STATION
PLATE = _gmat_py.PLATE
BURN = _gmat_py.BURN
IMPULSIVE_BURN = _gmat_py.IMPULSIVE_BURN
FINITE_BURN = _gmat_py.FINITE_BURN
COMMAND = _gmat_py.COMMAND
PROPAGATOR = _gmat_py.PROPAGATOR
ODE_MODEL = _gmat_py.ODE_MODEL
PHYSICAL_MODEL = _gmat_py.PHYSICAL_MODEL
TRANSIENT_FORCE = _gmat_py.TRANSIENT_FORCE
INTERPOLATOR = _gmat_py.INTERPOLATOR
SOLAR_SYSTEM = _gmat_py.SOLAR_SYSTEM
SPACE_POINT = _gmat_py.SPACE_POINT
CELESTIAL_BODY = _gmat_py.CELESTIAL_BODY
CALCULATED_POINT = _gmat_py.CALCULATED_POINT
LIBRATION_POINT = _gmat_py.LIBRATION_POINT
BARYCENTER = _gmat_py.BARYCENTER
ATMOSPHERE = _gmat_py.ATMOSPHERE
PARAMETER = _gmat_py.PARAMETER
VARIABLE = _gmat_py.VARIABLE
ARRAY = _gmat_py.ARRAY
STRING = _gmat_py.STRING
STOP_CONDITION = _gmat_py.STOP_CONDITION
SOLVER = _gmat_py.SOLVER
SUBSCRIBER = _gmat_py.SUBSCRIBER
REPORT_FILE = _gmat_py.REPORT_FILE
XY_PLOT = _gmat_py.XY_PLOT
ORBIT_VIEW = _gmat_py.ORBIT_VIEW
DYNAMIC_DATA_DISPLAY = _gmat_py.DYNAMIC_DATA_DISPLAY
EPHEMERIS_FILE = _gmat_py.EPHEMERIS_FILE
PROP_SETUP = _gmat_py.PROP_SETUP
FUNCTION = _gmat_py.FUNCTION
FUEL_TANK = _gmat_py.FUEL_TANK
THRUSTER = _gmat_py.THRUSTER
CHEMICAL_THRUSTER = _gmat_py.CHEMICAL_THRUSTER
ELECTRIC_THRUSTER = _gmat_py.ELECTRIC_THRUSTER
CHEMICAL_FUEL_TANK = _gmat_py.CHEMICAL_FUEL_TANK
ELECTRIC_FUEL_TANK = _gmat_py.ELECTRIC_FUEL_TANK
FIELD_OF_VIEW = _gmat_py.FIELD_OF_VIEW
CONICAL_FOV = _gmat_py.CONICAL_FOV
RECTANGULAR_FOV = _gmat_py.RECTANGULAR_FOV
CUSTOM_FOV = _gmat_py.CUSTOM_FOV
POWER_SYSTEM = _gmat_py.POWER_SYSTEM
SOLAR_POWER_SYSTEM = _gmat_py.SOLAR_POWER_SYSTEM
NUCLEAR_POWER_SYSTEM = _gmat_py.NUCLEAR_POWER_SYSTEM
HARDWARE = _gmat_py.HARDWARE
COORDINATE_SYSTEM = _gmat_py.COORDINATE_SYSTEM
AXIS_SYSTEM = _gmat_py.AXIS_SYSTEM
ATTITUDE = _gmat_py.ATTITUDE
MATH_NODE = _gmat_py.MATH_NODE
MATH_TREE = _gmat_py.MATH_TREE
BODY_FIXED_POINT = _gmat_py.BODY_FIXED_POINT
EVENT = _gmat_py.EVENT
EVENT_LOCATOR = _gmat_py.EVENT_LOCATOR
DATAINTERFACE_SOURCE = _gmat_py.DATAINTERFACE_SOURCE
MEASUREMENT_MODEL = _gmat_py.MEASUREMENT_MODEL
ERROR_MODEL = _gmat_py.ERROR_MODEL
DATASTREAM = _gmat_py.DATASTREAM
DATA_FILE = _gmat_py.DATA_FILE
OBTYPE = _gmat_py.OBTYPE
DATA_FILTER = _gmat_py.DATA_FILTER
INTERFACE = _gmat_py.INTERFACE
MEDIA_CORRECTION = _gmat_py.MEDIA_CORRECTION
IMAGER = _gmat_py.IMAGER
SENSOR = _gmat_py.SENSOR
RF_HARDWARE = _gmat_py.RF_HARDWARE
ANTENNA = _gmat_py.ANTENNA
THRUST_SEGMENT = _gmat_py.THRUST_SEGMENT
REGION = _gmat_py.REGION
USER_DEFINED_OBJECT = _gmat_py.USER_DEFINED_OBJECT
USER_OBJECT_ID_NEEDED = _gmat_py.USER_OBJECT_ID_NEEDED
GENERIC_OBJECT = _gmat_py.GENERIC_OBJECT
UNKNOWN_OBJECT = _gmat_py.UNKNOWN_OBJECT
SCRIPTING = _gmat_py.SCRIPTING
SHOW_SCRIPT = _gmat_py.SHOW_SCRIPT
OWNED_OBJECT = _gmat_py.OWNED_OBJECT
MATLAB_STRUCT = _gmat_py.MATLAB_STRUCT
EPHEM_HEADER = _gmat_py.EPHEM_HEADER
NO_COMMENTS = _gmat_py.NO_COMMENTS
DEBUG_INSPECT = _gmat_py.DEBUG_INSPECT
GUI_EDITOR = _gmat_py.GUI_EDITOR
OBJECT_EXPORT = _gmat_py.OBJECT_EXPORT
UNKNOWN_STATE = _gmat_py.UNKNOWN_STATE
CARTESIAN_STATE = _gmat_py.CARTESIAN_STATE
EQUINOCTIAL_STATE = _gmat_py.EQUINOCTIAL_STATE
ORBIT_STATE_TRANSITION_MATRIX = _gmat_py.ORBIT_STATE_TRANSITION_MATRIX
ORBIT_A_MATRIX = _gmat_py.ORBIT_A_MATRIX
ORBIT_COVARIANCE_MATRIX = _gmat_py.ORBIT_COVARIANCE_MATRIX
CD_EPSILON = _gmat_py.CD_EPSILON
ATMOS_DENSITY_EPSILON = _gmat_py.ATMOS_DENSITY_EPSILON
MASS_FLOW = _gmat_py.MASS_FLOW
PREDEFINED_STATE_MAX = _gmat_py.PREDEFINED_STATE_MAX
USER_DEFINED_BEGIN = _gmat_py.USER_DEFINED_BEGIN
USER_DEFINED_END = _gmat_py.USER_DEFINED_END
class PLUGIN_RESOURCE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.PLUGIN_RESOURCE_swiginit(self, _gmat_py.new_PLUGIN_RESOURCE())
    nodeName = property(_gmat_py.PLUGIN_RESOURCE_nodeName_get, _gmat_py.PLUGIN_RESOURCE_nodeName_set)
    parentNodeName = property(_gmat_py.PLUGIN_RESOURCE_parentNodeName_get, _gmat_py.PLUGIN_RESOURCE_parentNodeName_set)
    type = property(_gmat_py.PLUGIN_RESOURCE_type_get, _gmat_py.PLUGIN_RESOURCE_type_set)
    subtype = property(_gmat_py.PLUGIN_RESOURCE_subtype_get, _gmat_py.PLUGIN_RESOURCE_subtype_set)
    toolkit = property(_gmat_py.PLUGIN_RESOURCE_toolkit_get, _gmat_py.PLUGIN_RESOURCE_toolkit_set)
    widgetType = property(_gmat_py.PLUGIN_RESOURCE_widgetType_get, _gmat_py.PLUGIN_RESOURCE_widgetType_set)
    trigger = property(_gmat_py.PLUGIN_RESOURCE_trigger_get, _gmat_py.PLUGIN_RESOURCE_trigger_set)
    firstId = property(_gmat_py.PLUGIN_RESOURCE_firstId_get, _gmat_py.PLUGIN_RESOURCE_firstId_set)
    lastId = property(_gmat_py.PLUGIN_RESOURCE_lastId_get, _gmat_py.PLUGIN_RESOURCE_lastId_set)
    handler = property(_gmat_py.PLUGIN_RESOURCE_handler_get, _gmat_py.PLUGIN_RESOURCE_handler_set)
    __swig_destroy__ = _gmat_py.delete_PLUGIN_RESOURCE

# Register PLUGIN_RESOURCE in _gmat_py:
_gmat_py.PLUGIN_RESOURCE_swigregister(PLUGIN_RESOURCE)
ESTIMATION_TYPE_ALLOCATION = _gmat_py.ESTIMATION_TYPE_ALLOCATION
class GmatBase(object):
    r"""
    Definition for the base class for all GMAT extensible objects

    The following class hierarchy trees use this class as their basis:

        SpacePoint (hence Spacecraft and Formation, and all CelestialBody's)
        Propagator
        PhysicalModel (hence Force and ForceModel)
        PropConfig
        Parameter
        GmatCommand

    Every class that users can use to derive new classes, or that need to be
    accessed through generic pointers, should be derived from this class to
    ensure consistent interfaces accessed by the GMAT control systems (i.e. the
    Moderator, FactoryManager, Configuration, Interpreter, and Sandbox, along
    with the GUIInterpreter).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Help(self, *args):
        val = _gmat_py.GmatBase_Help(self, *args)

        print(val)
        val = ""


        return val


    def SetField(self, *args):
        return _gmat_py.GmatBase_SetField(self, *args)

    def SetReference(self, obj, index=-1):
        return _gmat_py.GmatBase_SetReference(self, obj, index)

    def GetField(self, *args):
        return _gmat_py.GmatBase_GetField(self, *args)

    def SetVector(self, *args):
        return _gmat_py.GmatBase_SetVector(self, *args)

    def GetVector(self, *args):
        return _gmat_py.GmatBase_GetVector(self, *args)

    def SetNumber(self, *args):
        return _gmat_py.GmatBase_SetNumber(self, *args)

    def GetNumber(self, *args):
        return _gmat_py.GmatBase_GetNumber(self, *args)

    def SetMatrix(self, *args):
        return _gmat_py.GmatBase_SetMatrix(self, *args)

    def GetMatrix(self, *args):
        return _gmat_py.GmatBase_GetMatrix(self, *args)

    def GetTypeAndValue(self, i):
        return _gmat_py.GmatBase_GetTypeAndValue(self, i)
    __swig_destroy__ = _gmat_py.delete_GmatBase

    def GetTypeName(self):
        return _gmat_py.GmatBase_GetTypeName(self)

    def GetName(self):
        return _gmat_py.GmatBase_GetName(self)

    def SetName(self, *args):
        return _gmat_py.GmatBase_SetName(self, *args)

    def GetFullName(self):
        return _gmat_py.GmatBase_GetFullName(self)

    def SetFullName(self, name):
        return _gmat_py.GmatBase_SetFullName(self, name)

    def __str__(self):
        return _gmat_py.GmatBase___str__(self)

    def GetParameterCount(self):
        return _gmat_py.GmatBase_GetParameterCount(self)

    def IsOfType(self, *args):
        return _gmat_py.GmatBase_IsOfType(self, *args)

    def GetTypeNames(self):
        return _gmat_py.GmatBase_GetTypeNames(self)

    def IsInitialized(self):
        return _gmat_py.GmatBase_IsInitialized(self)

    def SetShowPrefaceComment(self, show=True):
        return _gmat_py.GmatBase_SetShowPrefaceComment(self, show)

    def SetShowInlineComment(self, show=True):
        return _gmat_py.GmatBase_SetShowInlineComment(self, show)

    def GetShowPrefaceComment(self):
        return _gmat_py.GmatBase_GetShowPrefaceComment(self)

    def GetShowInlineComment(self):
        return _gmat_py.GmatBase_GetShowInlineComment(self)

    def GetCommentLine(self):
        return _gmat_py.GmatBase_GetCommentLine(self)

    def SetCommentLine(self, comment):
        return _gmat_py.GmatBase_SetCommentLine(self, comment)

    def GetInlineComment(self):
        return _gmat_py.GmatBase_GetInlineComment(self)

    def SetInlineComment(self, comment):
        return _gmat_py.GmatBase_SetInlineComment(self, comment)

    def GetAttributeCommentLine(self, index):
        return _gmat_py.GmatBase_GetAttributeCommentLine(self, index)

    def SetAttributeCommentLine(self, index, comment):
        return _gmat_py.GmatBase_SetAttributeCommentLine(self, index, comment)

    def GetInlineAttributeComment(self, index):
        return _gmat_py.GmatBase_GetInlineAttributeComment(self, index)

    def SetInlineAttributeComment(self, index, comment):
        return _gmat_py.GmatBase_SetInlineAttributeComment(self, index, comment)

    def GetRefObjectName(self, type):
        return _gmat_py.GmatBase_GetRefObjectName(self, type)

    def HasRefObjectTypeArray(self):
        return _gmat_py.GmatBase_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.GmatBase_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.GmatBase_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, *args):
        return _gmat_py.GmatBase_SetRefObjectName(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.GmatBase_RenameRefObject(self, type, oldName, newName)

    def GetRefObject(self, *args):
        return _gmat_py.GmatBase_GetRefObject(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.GmatBase_SetRefObject(self, *args)

    def GetRefObjectArray(self, *args):
        return _gmat_py.GmatBase_GetRefObjectArray(self, *args)

    def HasEquation(self):
        return _gmat_py.GmatBase_HasEquation(self)

    def SetupEquation(self, configObjectMap):
        return _gmat_py.GmatBase_SetupEquation(self, configObjectMap)

    def GetEquations(self, equations):
        return _gmat_py.GmatBase_GetEquations(self, equations)

    def InitializeEquations(self, lom, gom):
        return _gmat_py.GmatBase_InitializeEquations(self, lom, gom)

    def GetWrapperObjectNameArray(self, completeSet=False):
        r""" Returns the list of names used in the wrappers"""
        return _gmat_py.GmatBase_GetWrapperObjectNameArray(self, completeSet)

    def HasOtherReferenceToObject(self, withName):
        return _gmat_py.GmatBase_HasOtherReferenceToObject(self, withName)

    def IsOwnedObject(self, id):
        return _gmat_py.GmatBase_IsOwnedObject(self, id)

    def GetOwnedObjectCount(self):
        return _gmat_py.GmatBase_GetOwnedObjectCount(self)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.GmatBase_GetOwnedObject(self, whichOne)

    def IncludeOwnedObjectsInValidation(self):
        return _gmat_py.GmatBase_IncludeOwnedObjectsInValidation(self)

    def SetIsGlobal(self, globalFlag):
        return _gmat_py.GmatBase_SetIsGlobal(self, globalFlag)

    def IsGlobal(self):
        return _gmat_py.GmatBase_IsGlobal(self)

    def IsAutomaticGlobal(self):
        return _gmat_py.GmatBase_IsAutomaticGlobal(self)

    def SetIsLocal(self, localFlag):
        return _gmat_py.GmatBase_SetIsLocal(self, localFlag)

    def IsLocal(self):
        return _gmat_py.GmatBase_IsLocal(self)

    def IsObjectCloaked(self):
        return _gmat_py.GmatBase_IsObjectCloaked(self)

    def SaveAllAsDefault(self):
        return _gmat_py.GmatBase_SaveAllAsDefault(self)

    def SaveParameterAsDefault(self, *args):
        return _gmat_py.GmatBase_SaveParameterAsDefault(self, *args)

    def ExecuteCallback(self):
        r""" method to determine if a parameter value has been changed from the default -"""
        return _gmat_py.GmatBase_ExecuteCallback(self)

    def IsCallbackExecuting(self):
        return _gmat_py.GmatBase_IsCallbackExecuting(self)

    def PutCallbackData(self, data):
        return _gmat_py.GmatBase_PutCallbackData(self, data)

    def PutCallbackRealData(self, data):
        return _gmat_py.GmatBase_PutCallbackRealData(self, data)

    def GetCallbackResults(self):
        return _gmat_py.GmatBase_GetCallbackResults(self)

    def Clone(self):
        return _gmat_py.GmatBase_Clone(self)

    def Copy(self, arg2):
        return _gmat_py.GmatBase_Copy(self, arg2)

    def Validate(self):
        return _gmat_py.GmatBase_Validate(self)

    def Initialize(self):
        return _gmat_py.GmatBase_Initialize(self)

    def SetSolarSystem(self, ss):
        return _gmat_py.GmatBase_SetSolarSystem(self, ss)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.GmatBase_SetInternalCoordSystem(self, cs)

    def RequiresJ2000Body(self):
        return _gmat_py.GmatBase_RequiresJ2000Body(self)

    def GetParameterText(self, *args):
        return _gmat_py.GmatBase_GetParameterText(self, *args)

    def GetParameterUnit(self, id):
        return _gmat_py.GmatBase_GetParameterUnit(self, id)

    def HasDecoratedFields(self):
        return _gmat_py.GmatBase_HasDecoratedFields(self)

    def GetParameterID(self, str):
        return _gmat_py.GmatBase_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.GmatBase_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.GmatBase_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.GmatBase_IsParameterReadOnly(self, *args)

    def IsParameterEnabled(self, *args):
        return _gmat_py.GmatBase_IsParameterEnabled(self, *args)

    def IsParameterCloaked(self, *args):
        return _gmat_py.GmatBase_IsParameterCloaked(self, *args)

    def IsParameterEqualToDefault(self, *args):
        return _gmat_py.GmatBase_IsParameterEqualToDefault(self, *args)

    def IsParameterValid(self, *args):
        return _gmat_py.GmatBase_IsParameterValid(self, *args)

    def IsParameterVisible(self, *args):
        return _gmat_py.GmatBase_IsParameterVisible(self, *args)

    def ParameterAffectsDynamics(self, id):
        return _gmat_py.GmatBase_ParameterAffectsDynamics(self, id)

    def ParameterDvInitializesNonzero(self, id, r=0, c=0):
        return _gmat_py.GmatBase_ParameterDvInitializesNonzero(self, id, r, c)

    def ParameterDvInitialValue(self, id, r=0, c=0):
        return _gmat_py.GmatBase_ParameterDvInitialValue(self, id, r, c)

    def ParameterUpdatesAfterSuperposition(self, id):
        return _gmat_py.GmatBase_ParameterUpdatesAfterSuperposition(self, id)

    def GetPropertyObjectType(self, *args):
        return _gmat_py.GmatBase_GetPropertyObjectType(self, *args)

    def GetPropertyEnumStrings(self, *args):
        return _gmat_py.GmatBase_GetPropertyEnumStrings(self, *args)

    def CanAssignStringToObjectProperty(self, id):
        return _gmat_py.GmatBase_CanAssignStringToObjectProperty(self, id)

    def IsSquareBracketAllowedInSetting(self, id):
        return _gmat_py.GmatBase_IsSquareBracketAllowedInSetting(self, id)

    def GetIntegerArrayParameter(self, *args):
        return _gmat_py.GmatBase_GetIntegerArrayParameter(self, *args)

    def CheckGenericTypeSupport(self, *args):
        return _gmat_py.GmatBase_CheckGenericTypeSupport(self, *args)

    def GetGenericParameter(self, *args):
        return _gmat_py.GmatBase_GetGenericParameter(self, *args)

    def SetGenericParameter(self, *args):
        return _gmat_py.GmatBase_SetGenericParameter(self, *args)

    def GetType(self, *args):
        return _gmat_py.GmatBase_GetType(self, *args)

    def GetGmatTimeParameter(self, *args):
        return _gmat_py.GmatBase_GetGmatTimeParameter(self, *args)

    def SetGmatTimeParameter(self, *args):
        return _gmat_py.GmatBase_SetGmatTimeParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.GmatBase_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.GmatBase_SetRealParameter(self, *args)

    def GetIntegerParameter(self, *args):
        return _gmat_py.GmatBase_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.GmatBase_SetIntegerParameter(self, *args)

    def GetUnsignedIntParameter(self, *args):
        return _gmat_py.GmatBase_GetUnsignedIntParameter(self, *args)

    def SetUnsignedIntParameter(self, *args):
        return _gmat_py.GmatBase_SetUnsignedIntParameter(self, *args)

    def GetUnsignedIntArrayParameter(self, *args):
        return _gmat_py.GmatBase_GetUnsignedIntArrayParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.GmatBase_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.GmatBase_SetRvectorParameter(self, *args)

    def GetRmatrixParameter(self, *args):
        return _gmat_py.GmatBase_GetRmatrixParameter(self, *args)

    def SetRmatrixParameter(self, *args):
        return _gmat_py.GmatBase_SetRmatrixParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.GmatBase_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.GmatBase_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.GmatBase_GetStringArrayParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.GmatBase_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.GmatBase_SetBooleanParameter(self, *args)

    def GetBooleanArrayParameter(self, *args):
        return _gmat_py.GmatBase_GetBooleanArrayParameter(self, *args)

    def SetBooleanArrayParameter(self, *args):
        return _gmat_py.GmatBase_SetBooleanArrayParameter(self, *args)

    def GetOnOffParameter(self, *args):
        return _gmat_py.GmatBase_GetOnOffParameter(self, *args)

    def SetOnOffParameter(self, *args):
        return _gmat_py.GmatBase_SetOnOffParameter(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.GmatBase_TakeAction(self, *args)

    def TakeRequiredAction(self, *args):
        return _gmat_py.GmatBase_TakeRequiredAction(self, *args)

    def GetTypesForList(self, *args):
        return _gmat_py.GmatBase_GetTypesForList(self, *args)

    def WriteEmptyStringArray(self, id):
        return _gmat_py.GmatBase_WriteEmptyStringArray(self, id)

    def WriteEmptyStringParameter(self, id):
        return _gmat_py.GmatBase_WriteEmptyStringParameter(self, id)

    def GetGeneratingString(self, *args):
        return _gmat_py.GmatBase_GetGeneratingString(self, *args)

    def GetGeneratingStringArray(self, *args):
        return _gmat_py.GmatBase_GetGeneratingStringArray(self, *args)

    def BuildPropertyName(self, ownedObj):
        return _gmat_py.GmatBase_BuildPropertyName(self, ownedObj)

    def FinalizeCreation(self):
        return _gmat_py.GmatBase_FinalizeCreation(self)

    def GetLastErrorMessage(self):
        return _gmat_py.GmatBase_GetLastErrorMessage(self)

    def SetLastErrorMessage(self, msg):
        return _gmat_py.GmatBase_SetLastErrorMessage(self, msg)

    def GetErrorMessageFormat(self):
        return _gmat_py.GmatBase_GetErrorMessageFormat(self)

    def SetErrorMessageFormat(self, fmt):
        return _gmat_py.GmatBase_SetErrorMessageFormat(self, fmt)

    @staticmethod
    def GetInstanceCount():
        r""" Method to return the current number of instantiated objects"""
        return _gmat_py.GmatBase_GetInstanceCount()

    @staticmethod
    def GetObjectType(typeString):
        r""" Method for getting GMAT object type"""
        return _gmat_py.GmatBase_GetObjectType(typeString)

    @staticmethod
    def GetObjectTypeString(type):
        r""" Method for getting GMAT object type string"""
        return _gmat_py.GmatBase_GetObjectTypeString(type)

    @staticmethod
    def GetDataPrecision():
        r""" Method for getting data precision"""
        return _gmat_py.GmatBase_GetDataPrecision()

    @staticmethod
    def GetTimePrecision():
        r""" Method for getting time precision"""
        return _gmat_py.GmatBase_GetTimePrecision()

    @staticmethod
    def GetFullPathFileName(*args):
        r""" Method for getting full path file name"""
        return _gmat_py.GmatBase_GetFullPathFileName(*args)

    @staticmethod
    def WriteObjectInfo(title, obj, addEol=True):
        return _gmat_py.GmatBase_WriteObjectInfo(title, obj, addEol)

    def GetPropItemID(self, whichItem):
        return _gmat_py.GmatBase_GetPropItemID(self, whichItem)

    def SetPropItem(self, propItem):
        return _gmat_py.GmatBase_SetPropItem(self, propItem)

    def GetDefaultPropItems(self):
        return _gmat_py.GmatBase_GetDefaultPropItems(self)

    def GetPropItem(self, item):
        return _gmat_py.GmatBase_GetPropItem(self, item)

    def GetPropItemSize(self, item):
        return _gmat_py.GmatBase_GetPropItemSize(self, item)

    def PropItemNeedsFinalUpdate(self, item):
        return _gmat_py.GmatBase_PropItemNeedsFinalUpdate(self, item)

    def HasAssociatedStateObjects(self):
        return _gmat_py.GmatBase_HasAssociatedStateObjects(self)

    def GetAssociateName(self, val=0):
        return _gmat_py.GmatBase_GetAssociateName(self, val)

    def GetEstimationParameterID(self, param):
        return _gmat_py.GmatBase_GetEstimationParameterID(self, param)

    def GetParameterNameForEstimationParameter(self, parmName):
        return _gmat_py.GmatBase_GetParameterNameForEstimationParameter(self, parmName)

    def GetParameterNameFromEstimationParameter(self, parmName):
        return _gmat_py.GmatBase_GetParameterNameFromEstimationParameter(self, parmName)

    def SetEstimationParameter(self, param):
        return _gmat_py.GmatBase_SetEstimationParameter(self, param)

    def IsEstimationParameterValid(self, id):
        return _gmat_py.GmatBase_IsEstimationParameterValid(self, id)

    def GetEstimationParameterSize(self, id):
        return _gmat_py.GmatBase_GetEstimationParameterSize(self, id)

    def GetEstimationParameterValue(self, id):
        return _gmat_py.GmatBase_GetEstimationParameterValue(self, id)

    def GetSolveForList(self):
        return _gmat_py.GmatBase_GetSolveForList(self)

    def HasDynamicParameterSTM(self, parameterId):
        return _gmat_py.GmatBase_HasDynamicParameterSTM(self, parameterId)

    def GetParameterSTM(self, parameterId):
        return _gmat_py.GmatBase_GetParameterSTM(self, parameterId)

    def GetStmRowId(self, forRow):
        return _gmat_py.GmatBase_GetStmRowId(self, forRow)

    def HasParameterCovariances(self, parameterId):
        return _gmat_py.GmatBase_HasParameterCovariances(self, parameterId)

    def GetParameterCovariances(self, parameterId=-1):
        return _gmat_py.GmatBase_GetParameterCovariances(self, parameterId)

    def GetCovariance(self):
        return _gmat_py.GmatBase_GetCovariance(self)

    def MapCovarianceToParameters(self):
        return _gmat_py.GmatBase_MapCovarianceToParameters(self)

    def HasLocalClones(self):
        return _gmat_py.GmatBase_HasLocalClones(self)

    def UpdateClonedObject(self, obj):
        return _gmat_py.GmatBase_UpdateClonedObject(self, obj)

    def UpdateClonedObjectParameter(self, obj, updatedParameterId):
        return _gmat_py.GmatBase_UpdateClonedObjectParameter(self, obj, updatedParameterId)

    def IsCommandModeAssignable(self):
        return _gmat_py.GmatBase_IsCommandModeAssignable(self)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.GmatBase_IsParameterCommandModeSettable(self, id)

    def CopyParameter(self, fromObject, forParameter):
        return _gmat_py.GmatBase_CopyParameter(self, fromObject, forParameter)

    def SetScriptCreatedFrom(self, script):
        r""" Methods for script name and flag where object is created from"""
        return _gmat_py.GmatBase_SetScriptCreatedFrom(self, script)

    def GetScriptCreatedFrom(self):
        return _gmat_py.GmatBase_GetScriptCreatedFrom(self)

    def SetIsCreatedFromMainScript(self, flag):
        return _gmat_py.GmatBase_SetIsCreatedFromMainScript(self, flag)

    def IsCreatedFromMainScript(self):
        return _gmat_py.GmatBase_IsCreatedFromMainScript(self)

    def SetForceGenerateObjectString(self, flag):
        return _gmat_py.GmatBase_SetForceGenerateObjectString(self, flag)

    def GetForceGenerateObjectString(self):
        return _gmat_py.GmatBase_GetForceGenerateObjectString(self)

    def AddFileInfoToErrorMessage(self, msg):
        return _gmat_py.GmatBase_AddFileInfoToErrorMessage(self, msg)

    def GetConfiguredObjectMap(self):
        r""" Functions use information from Moderator"""
        return _gmat_py.GmatBase_GetConfiguredObjectMap(self)

    def GetConfiguredObject(self, name):
        return _gmat_py.GmatBase_GetConfiguredObject(self, name)

    def GetListOfObjects(self, *args):
        return _gmat_py.GmatBase_GetListOfObjects(self, *args)

    def HasGuiPlugin(self):
        r""" Hooks for GUI plugins"""
        return _gmat_py.GmatBase_HasGuiPlugin(self)

    def GetGuiPanelNames(self, *args):
        return _gmat_py.GmatBase_GetGuiPanelNames(self, *args)

    def SetWidget(self, widget):
        return _gmat_py.GmatBase_SetWidget(self, widget)

    def GetIcon(self):
        return _gmat_py.GmatBase_GetIcon(self)

    def SetIconIndex(self, index):
        return _gmat_py.GmatBase_SetIconIndex(self, index)

    def GetIconIndex(self):
        return _gmat_py.GmatBase_GetIconIndex(self)

    def HasPrecisionTime(self):
        return _gmat_py.GmatBase_HasPrecisionTime(self)

    def SetPrecisionTimeFlag(self, onOff):
        return _gmat_py.GmatBase_SetPrecisionTimeFlag(self, onOff)

    def GetScriptedMethodList(self):
        return _gmat_py.GmatBase_GetScriptedMethodList(self)

    def GetMethodParameterCount(self, forMethod):
        return _gmat_py.GmatBase_GetMethodParameterCount(self, forMethod)

    def GetMethodParameterTypes(self, forMethod):
        return _gmat_py.GmatBase_GetMethodParameterTypes(self, forMethod)

    def SetMethodParameters(self, methodName, args, precomment, postcomment):
        return _gmat_py.GmatBase_SetMethodParameters(self, methodName, args, precomment, postcomment)

    def ExecuteMethod(self, forMethod, parameters):
        return _gmat_py.GmatBase_ExecuteMethod(self, forMethod, parameters)

    def GetScriptLineNumber(self):
        return _gmat_py.GmatBase_GetScriptLineNumber(self)

    def SetScriptLineNumber(self, val):
        return _gmat_py.GmatBase_SetScriptLineNumber(self, val)

# Register GmatBase in _gmat_py:
_gmat_py.GmatBase_swigregister(GmatBase)
GmatBase.REAL_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_REAL_PARAMETER_UNDEFINED
GmatBase.INTEGER_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_INTEGER_PARAMETER_UNDEFINED
GmatBase.UNSIGNED_INT_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_UNSIGNED_INT_PARAMETER_UNDEFINED
GmatBase.STRING_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_STRING_PARAMETER_UNDEFINED
GmatBase.STRINGARRAY_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_STRINGARRAY_PARAMETER_UNDEFINED
GmatBase.INTEGERARRAY_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_INTEGERARRAY_PARAMETER_UNDEFINED
GmatBase.UNSIGNED_INTARRAY_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_UNSIGNED_INTARRAY_PARAMETER_UNDEFINED
GmatBase.RVECTOR_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_RVECTOR_PARAMETER_UNDEFINED
GmatBase.RMATRIX_PARAMETER_UNDEFINED = _gmat_py.cvar.GmatBase_RMATRIX_PARAMETER_UNDEFINED
GmatBase.PARAM_TYPE_STRING = _gmat_py.cvar.GmatBase_PARAM_TYPE_STRING
GmatBase.OBJECT_TYPE_STRING = _gmat_py.cvar.GmatBase_OBJECT_TYPE_STRING
GmatBase.AUTOMATIC_GLOBAL_FLAGS = _gmat_py.cvar.GmatBase_AUTOMATIC_GLOBAL_FLAGS

class GmatState(object):
    r"""
    Definition of the GmatState class.  This is the class for state data used in
    GMAT's propagators and solvers.

    A GmatState is a vector on numbers and an associated epoch.

    This class defines the core data set used in GMAT's propagation and solver
    subsystems when state data at a defined epoch is needed.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_GmatState

    def __init__(self, *args):
        _gmat_py.GmatState_swiginit(self, _gmat_py.new_GmatState(*args))

    def __getitem__(self, *args):
        return _gmat_py.GmatState___getitem__(self, *args)

    def SetSize(self, size):
        return _gmat_py.GmatState_SetSize(self, size)

    def GetSize(self):
        return _gmat_py.GmatState_GetSize(self)

    def GetState(self):
        return _gmat_py.GmatState_GetState(self)

    def SetState(self, data, size, start=0):
        return _gmat_py.GmatState_SetState(self, data, size, start)

    def GetStateDot(self):
        return _gmat_py.GmatState_GetStateDot(self)

    def SetStateDot(self, dataDot, size, start=0):
        return _gmat_py.GmatState_SetStateDot(self, dataDot, size, start)

    def GetEpoch(self):
        return _gmat_py.GmatState_GetEpoch(self)

    def GetEpochGT(self):
        return _gmat_py.GmatState_GetEpochGT(self)

    def SetEpoch(self, ep):
        return _gmat_py.GmatState_SetEpoch(self, ep)

    def SetEpochGT(self, ep):
        return _gmat_py.GmatState_SetEpochGT(self, ep)

    def SetPrecisionTimeFlag(self, onOff=True):
        return _gmat_py.GmatState_SetPrecisionTimeFlag(self, onOff)

    def SetElementProperties(self, index, id, textId, associate):
        return _gmat_py.GmatState_SetElementProperties(self, index, id, textId, associate)

    def GetElementDescriptions(self):
        return _gmat_py.GmatState_GetElementDescriptions(self)

    def GetAssociateIndex(self, id):
        return _gmat_py.GmatState_GetAssociateIndex(self, id)

    def HasPrecisionTime(self):
        return _gmat_py.GmatState_HasPrecisionTime(self)

# Register GmatState in _gmat_py:
_gmat_py.GmatState_swigregister(GmatState)
class Covariance(object):
    r"""
    Definition of the covariance class

    Helper class used to represent an object's covariance data
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Covariance

    def __init__(self, *args):
        _gmat_py.Covariance_swiginit(self, _gmat_py.new_Covariance(*args))

    def __getitem__(self, *args):
        return _gmat_py.Covariance___getitem__(self, *args)

    def AddCovarianceElement(self, name, owner):
        return _gmat_py.Covariance_AddCovarianceElement(self, name, owner)

    def ConstructLHS(self, *args):
        return _gmat_py.Covariance_ConstructLHS(self, *args)

    def ConstructRHS(self, *args):
        return _gmat_py.Covariance_ConstructRHS(self, *args)

    def FillMatrix(self, rhs, overrideAndFill):
        return _gmat_py.Covariance_FillMatrix(self, rhs, overrideAndFill)

    def SetDimension(self, size):
        return _gmat_py.Covariance_SetDimension(self, size)

    def GetDimension(self):
        return _gmat_py.Covariance_GetDimension(self)

    def GetCovariance(self, *args):
        return _gmat_py.Covariance_GetCovariance(self, *args)

    def GetElementIndex(self, *args):
        return _gmat_py.Covariance_GetElementIndex(self, *args)

    def GetElementID(self, elementName):
        return _gmat_py.Covariance_GetElementID(self, elementName)

    def GetElementSize(self, *args):
        return _gmat_py.Covariance_GetElementSize(self, *args)

    def SetElementSize(self, *args):
        return _gmat_py.Covariance_SetElementSize(self, *args)

    def GetElementOwner(self, *args):
        return _gmat_py.Covariance_GetElementOwner(self, *args)

    def GetSubMatrixLocationStart(self, *args):
        return _gmat_py.Covariance_GetSubMatrixLocationStart(self, *args)

    def IncreasingElementSize(self, *args):
        return _gmat_py.Covariance_IncreasingElementSize(self, *args)

    def DecreasingElementSize(self, *args):
        return _gmat_py.Covariance_DecreasingElementSize(self, *args)

    def ShowContent(self):
        return _gmat_py.Covariance_ShowContent(self)

# Register Covariance in _gmat_py:
_gmat_py.Covariance_swigregister(Covariance)
class ElementWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ElementWrapper

    def __str__(self):
        return _gmat_py.ElementWrapper___str__(self)

    def GetPropertyNames(self):
        return _gmat_py.ElementWrapper_GetPropertyNames(self)

    def GetPropertyId(self):
        return _gmat_py.ElementWrapper_GetPropertyId(self)

    def AllowOneDimArraySetting(self, allow):
        return _gmat_py.ElementWrapper_AllowOneDimArraySetting(self, allow)

    def IsOneDimArraySettingAllowed(self):
        return _gmat_py.ElementWrapper_IsOneDimArraySettingAllowed(self)

    def Clone(self):
        r"""
        todo: Remove implementation in .cpp file, since all it does is throw;
              this is the better approach because it FORCES the developers to
              implement the method.
        """
        return _gmat_py.ElementWrapper_Clone(self)

    def SetDescription(self, str):
        return _gmat_py.ElementWrapper_SetDescription(self, str)

    def GetDescription(self):
        return _gmat_py.ElementWrapper_GetDescription(self)

    def GetWrapperType(self):
        return _gmat_py.ElementWrapper_GetWrapperType(self)

    def ClearRefObjectNames(self):
        return _gmat_py.ElementWrapper_ClearRefObjectNames(self)

    def GetRefObjectNames(self):
        return _gmat_py.ElementWrapper_GetRefObjectNames(self)

    def SetRefObjectName(self, name, index=0):
        return _gmat_py.ElementWrapper_SetRefObjectName(self, name, index)

    def GetRefObject(self, *args):
        return _gmat_py.ElementWrapper_GetRefObject(self, *args)

    def SetRefObject(self, obj):
        return _gmat_py.ElementWrapper_SetRefObject(self, obj)

    def RenameObject(self, oldName, newName):
        return _gmat_py.ElementWrapper_RenameObject(self, oldName, newName)

    def TakeRequiredAction(self):
        return _gmat_py.ElementWrapper_TakeRequiredAction(self)

    @staticmethod
    def SetValue(lhsWrapper, rhsWrapper, solarSys, objMap, globalObjMap, setRefObj=True):
        return _gmat_py.ElementWrapper_SetValue(lhsWrapper, rhsWrapper, solarSys, objMap, globalObjMap, setRefObj)

    @staticmethod
    def FindObject(name, solarSys, objMap, globalObjMap):
        return _gmat_py.ElementWrapper_FindObject(name, solarSys, objMap, globalObjMap)

    @staticmethod
    def ShowObjectMaps(objMap, globalObjMap):
        return _gmat_py.ElementWrapper_ShowObjectMaps(objMap, globalObjMap)

    def GetDataType(self):
        r"""
        This method returns the data type for the ElementWrapper object.

        :rtype: int
        :return: value type for the object.
        """
        return _gmat_py.ElementWrapper_GetDataType(self)

    def EvaluateReal(self):
        r"""
        Method to return the Real value of the wrapped object.

        :rtype: float
        :return: Real value of the wrapped object.

        Notes: This is a pure virtual (abstract) method and must be implemented in
        all leaf classes derived from this one.
        """
        return _gmat_py.ElementWrapper_EvaluateReal(self)

    def SetReal(self, toValue):
        r"""
        Method to set the Real value of the wrapped object.

        :rtype: boolean
        :return: true if successful; false otherwise.

        Notes: This is a pure virtual (abstract) method and must be implemented in
        all leaf classes derived from this one.
        """
        return _gmat_py.ElementWrapper_SetReal(self, toValue)

    def EvaluateArray(self):
        return _gmat_py.ElementWrapper_EvaluateArray(self)

    def SetArray(self, toValue):
        return _gmat_py.ElementWrapper_SetArray(self, toValue)

    def EvaluateRvector(self):
        return _gmat_py.ElementWrapper_EvaluateRvector(self)

    def SetRvector(self, toValue):
        return _gmat_py.ElementWrapper_SetRvector(self, toValue)

    def EvaluateString(self):
        return _gmat_py.ElementWrapper_EvaluateString(self)

    def SetString(self, toValue):
        return _gmat_py.ElementWrapper_SetString(self, toValue)

    def EvaluateOnOff(self):
        return _gmat_py.ElementWrapper_EvaluateOnOff(self)

    def SetOnOff(self, toValue):
        return _gmat_py.ElementWrapper_SetOnOff(self, toValue)

    def EvaluateBoolean(self):
        return _gmat_py.ElementWrapper_EvaluateBoolean(self)

    def SetBoolean(self, toValue):
        return _gmat_py.ElementWrapper_SetBoolean(self, toValue)

    def EvaluateInteger(self):
        return _gmat_py.ElementWrapper_EvaluateInteger(self)

    def SetInteger(self, toValue):
        return _gmat_py.ElementWrapper_SetInteger(self, toValue)

    def EvaluateObject(self):
        return _gmat_py.ElementWrapper_EvaluateObject(self)

    def SetObject(self, obj):
        return _gmat_py.ElementWrapper_SetObject(self, obj)

# Register ElementWrapper in _gmat_py:
_gmat_py.ElementWrapper_swigregister(ElementWrapper)
class ListItem(object):
    r"""
    Definition of the StateManager base class.  This is the class for state
    managers used in GMAT's propagators and solvers.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    objectName = property(_gmat_py.ListItem_objectName_get, _gmat_py.ListItem_objectName_set, doc=r"""
    Name of the object owning the parameter being listed

    For owned clone objects like error models, the model name
    (e.g. "ErrorModel1") is stored in objectName.
    """)
    objectFullName = property(_gmat_py.ListItem_objectFullName_get, _gmat_py.ListItem_objectFullName_set, doc=r""" Full heirarchical name of the object (e.g. "CAN.ErrorModel1")""")
    elementName = property(_gmat_py.ListItem_elementName_get, _gmat_py.ListItem_elementName_set, doc=r""" Name of the object field (e.g. "Bias") for the current item""")
    associateName = property(_gmat_py.ListItem_associateName_get, _gmat_py.ListItem_associateName_set, doc=r""" Associate used to track cross correlations and referenced objects""")
    object = property(_gmat_py.ListItem_object_get, _gmat_py.ListItem_object_set, doc=r""" The object holding the list item""")
    elementID = property(_gmat_py.ListItem_elementID_get, _gmat_py.ListItem_elementID_set, doc=r""" The parameter ID for the list item""")
    subelement = property(_gmat_py.ListItem_subelement_get, _gmat_py.ListItem_subelement_set, doc=r""" index of each subelement of parameter""")
    parameterID = property(_gmat_py.ListItem_parameterID_get, _gmat_py.ListItem_parameterID_set, doc=r""" Parameter Id for the current (sub)element""")
    parameterType = property(_gmat_py.ListItem_parameterType_get, _gmat_py.ListItem_parameterType_set, doc=r""" Type for the parameter""")
    rowIndex = property(_gmat_py.ListItem_rowIndex_get, _gmat_py.ListItem_rowIndex_set, doc=r""" Row index used for the element, when in an array""")
    rowLength = property(_gmat_py.ListItem_rowLength_get, _gmat_py.ListItem_rowLength_set, doc=r""" Length of the row for row or array data""")
    colIndex = property(_gmat_py.ListItem_colIndex_get, _gmat_py.ListItem_colIndex_set, doc=r""" Column index used for the element, when in an array""")
    length = property(_gmat_py.ListItem_length_get, _gmat_py.ListItem_length_set, doc=r""" Number of elements stored for the item; for arrays, the number of columns (CHECK THIS)""")
    dynamicObjectProperty = property(_gmat_py.ListItem_dynamicObjectProperty_get, _gmat_py.ListItem_dynamicObjectProperty_set, doc=r""" true if property forces object updates""")
    nonzeroInit = property(_gmat_py.ListItem_nonzeroInit_get, _gmat_py.ListItem_nonzeroInit_set, doc=r""" Indicates initial value != 0.0""")
    initialValue = property(_gmat_py.ListItem_initialValue_get, _gmat_py.ListItem_initialValue_set, doc=r""" Non-zero initial value""")
    postDerivativeUpdate = property(_gmat_py.ListItem_postDerivativeUpdate_get, _gmat_py.ListItem_postDerivativeUpdate_set, doc=r""" true = Post-superposition step needed""")

    def __init__(self):
        _gmat_py.ListItem_swiginit(self, _gmat_py.new_ListItem())
    __swig_destroy__ = _gmat_py.delete_ListItem

# Register ListItem in _gmat_py:
_gmat_py.ListItem_swigregister(ListItem)
class StateManager(object):
    r"""The state manager base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_StateManager

    def SetObject(self, theObject):
        return _gmat_py.StateManager_SetObject(self, theObject)

    def SetProperty(self, *args):
        return _gmat_py.StateManager_SetProperty(self, *args)

    def BuildState(self):
        return _gmat_py.StateManager_BuildState(self)

    def MapObjectsToVector(self):
        return _gmat_py.StateManager_MapObjectsToVector(self)

    def MapVectorToObjects(self):
        return _gmat_py.StateManager_MapVectorToObjects(self)

    def GetCount(self, *args):
        return _gmat_py.StateManager_GetCount(self, *args)

    def UpdateState(self):
        return _gmat_py.StateManager_UpdateState(self)

    def GetState(self):
        r""" Get state in J2000BodyMJ2000Eq coordinates (currently it is in EarthMJ2000Eq - GMAT internal coordinates)."""
        return _gmat_py.StateManager_GetState(self)

    def GetStateSize(self):
        return _gmat_py.StateManager_GetStateSize(self)

    def GetStateObjects(self, *args):
        return _gmat_py.StateManager_GetStateObjects(self, *args)

    def GetObjectList(self, *args):
        return _gmat_py.StateManager_GetObjectList(self, *args)

    def GetStateMap(self):
        return _gmat_py.StateManager_GetStateMap(self)

    def PrepareStateInfoToPublish(self, ownerNames, elementNames):
        return _gmat_py.StateManager_PrepareStateInfoToPublish(self, ownerNames, elementNames)

    def PrepareCovAndAccelerationInfoToPublish(self, ownerNames, elementNames):
        return _gmat_py.StateManager_PrepareCovAndAccelerationInfoToPublish(self, ownerNames, elementNames)

    def PrepareStateDataToPublish(self, publicData, publicDataSize, elementNames):
        return _gmat_py.StateManager_PrepareStateDataToPublish(self, publicData, publicDataSize, elementNames)

    def PrepareCovAndAccelerationDataToPublish(self, publishData, publishDataSize, elementNames, covStartIndex, hasPrecisionTime):
        return _gmat_py.StateManager_PrepareCovAndAccelerationDataToPublish(self, publishData, publishDataSize, elementNames, covStartIndex, hasPrecisionTime)

    def GetAccelerationOfSpacecraft(self, obj):
        return _gmat_py.StateManager_GetAccelerationOfSpacecraft(self, obj)

# Register StateManager in _gmat_py:
_gmat_py.StateManager_swigregister(StateManager)
class SpacePoint(GmatBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SpacePoint

    def SetSolarSystem(self, ss):
        return _gmat_py.SpacePoint_SetSolarSystem(self, ss)

    def GetEpoch(self):
        return _gmat_py.SpacePoint_GetEpoch(self)

    def GetEpochGT(self):
        return _gmat_py.SpacePoint_GetEpochGT(self)

    def SetEpoch(self, ep):
        return _gmat_py.SpacePoint_SetEpoch(self, ep)

    def SetEpochGT(self, ep):
        return _gmat_py.SpacePoint_SetEpochGT(self, ep)

    def GetLastState(self):
        return _gmat_py.SpacePoint_GetLastState(self)

    def RequiresJ2000Body(self):
        return _gmat_py.SpacePoint_RequiresJ2000Body(self)

    def GetJ2000BodyName(self):
        return _gmat_py.SpacePoint_GetJ2000BodyName(self)

    def GetJ2000Body(self):
        return _gmat_py.SpacePoint_GetJ2000Body(self)

    def SetJ2000BodyName(self, toName):
        return _gmat_py.SpacePoint_SetJ2000BodyName(self, toName)

    def SetJ2000Body(self, toBody):
        return _gmat_py.SpacePoint_SetJ2000Body(self, toBody)

    def IsParameterCloaked(self, id):
        return _gmat_py.SpacePoint_IsParameterCloaked(self, id)

    def IsParameterEqualToDefault(self, id):
        return _gmat_py.SpacePoint_IsParameterEqualToDefault(self, id)

    def SaveAllAsDefault(self):
        return _gmat_py.SpacePoint_SaveAllAsDefault(self)

    def SaveParameterAsDefault(self, id):
        return _gmat_py.SpacePoint_SaveParameterAsDefault(self, id)

    def HasAttitude(self):
        return _gmat_py.SpacePoint_HasAttitude(self)

    def GetAttitude(self, a1mjdTime):
        return _gmat_py.SpacePoint_GetAttitude(self, a1mjdTime)

    def GetDefaultOrbitColor(self):
        return _gmat_py.SpacePoint_GetDefaultOrbitColor(self)

    def GetDefaultTargetColor(self):
        return _gmat_py.SpacePoint_GetDefaultTargetColor(self)

    def GetCurrentOrbitColor(self):
        return _gmat_py.SpacePoint_GetCurrentOrbitColor(self)

    def GetCurrentTargetColor(self):
        return _gmat_py.SpacePoint_GetCurrentTargetColor(self)

    def GetOrbitColorString(self):
        return _gmat_py.SpacePoint_GetOrbitColorString(self)

    def GetTargetColorString(self):
        return _gmat_py.SpacePoint_GetTargetColorString(self)

    def SetCurrentOrbitColor(self, color):
        return _gmat_py.SpacePoint_SetCurrentOrbitColor(self, color)

    def SetCurrentTargetColor(self, color):
        return _gmat_py.SpacePoint_SetCurrentTargetColor(self, color)

    def SetDefaultColors(self, orbColor, targColor):
        return _gmat_py.SpacePoint_SetDefaultColors(self, orbColor, targColor)

    def SetSpacecraftDefaultColors(self):
        return _gmat_py.SpacePoint_SetSpacecraftDefaultColors(self)

    @staticmethod
    def ClearInstanceCount():
        return _gmat_py.SpacePoint_ClearInstanceCount()

    def GetMJ2000State(self, *args):
        return _gmat_py.SpacePoint_GetMJ2000State(self, *args)

    def GetMJ2000Position(self, *args):
        return _gmat_py.SpacePoint_GetMJ2000Position(self, *args)

    def GetMJ2000Velocity(self, *args):
        return _gmat_py.SpacePoint_GetMJ2000Velocity(self, *args)

    def GetMJ2000Acceleration(self, *args):
        return _gmat_py.SpacePoint_GetMJ2000Acceleration(self, *args)

    def GetMJ2000PrecState(self, atTime):
        return _gmat_py.SpacePoint_GetMJ2000PrecState(self, atTime)

    def GetMJ2000PrecPosition(self, atTime):
        return _gmat_py.SpacePoint_GetMJ2000PrecPosition(self, atTime)

    def GetMJ2000PrecVelocity(self, atTime):
        return _gmat_py.SpacePoint_GetMJ2000PrecVelocity(self, atTime)

    def GetMJ2000PrecAcceleration(self, atTime):
        return _gmat_py.SpacePoint_GetMJ2000PrecAcceleration(self, atTime)

    def RemoveSpiceKernelName(self, kernelType, fileName):
        return _gmat_py.SpacePoint_RemoveSpiceKernelName(self, kernelType, fileName)

    def GetParameterText(self, id):
        return _gmat_py.SpacePoint_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SpacePoint_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SpacePoint_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SpacePoint_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.SpacePoint_IsParameterReadOnly(self, *args)

    def IsSquareBracketAllowedInSetting(self, id):
        return _gmat_py.SpacePoint_IsSquareBracketAllowedInSetting(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.SpacePoint_IsParameterCommandModeSettable(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.SpacePoint_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.SpacePoint_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.SpacePoint_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.SpacePoint_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.SpacePoint_GetStringArrayParameter(self, *args)

    def GetRefObject(self, *args):
        return _gmat_py.SpacePoint_GetRefObject(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.SpacePoint_SetRefObject(self, *args)

    def HasEphemerisFile(self):
        return _gmat_py.SpacePoint_HasEphemerisFile(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SpacePoint_SetClass(base)

# Register SpacePoint in _gmat_py:
_gmat_py.SpacePoint_swigregister(SpacePoint)
QUATERNION_TYPE = _gmat_py.QUATERNION_TYPE
DIRECTION_COSINE_MATRIX_TYPE = _gmat_py.DIRECTION_COSINE_MATRIX_TYPE
EULER_ANGLES_AND_SEQUENCE_TYPE = _gmat_py.EULER_ANGLES_AND_SEQUENCE_TYPE
MODIFIED_RODRIGUES_PARAMETERS_TYPE = _gmat_py.MODIFIED_RODRIGUES_PARAMETERS_TYPE
ANGULAR_VELOCITY_TYPE = _gmat_py.ANGULAR_VELOCITY_TYPE
EULER_ANGLE_RATES_TYPE = _gmat_py.EULER_ANGLE_RATES_TYPE
class Attitude(GmatBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def GetEulerSequenceStrings():
        return _gmat_py.Attitude_GetEulerSequenceStrings()

    @staticmethod
    def ExtractEulerSequence(seqStr):
        return _gmat_py.Attitude_ExtractEulerSequence(seqStr)

    @staticmethod
    def GetAttitudeConstraintTypes():
        return _gmat_py.Attitude_GetAttitudeConstraintTypes()
    __swig_destroy__ = _gmat_py.delete_Attitude

    def Validate(self):
        r""" Method to Validate the input at the end of the script parsing process"""
        return _gmat_py.Attitude_Validate(self)

    def Initialize(self):
        r""" Method to initialize the Attitude"""
        return _gmat_py.Attitude_Initialize(self)

    def GetEpoch(self):
        r""" Methods to get/set the epoch and the reference coordinate system name"""
        return _gmat_py.Attitude_GetEpoch(self)

    def SetEpoch(self, toEpoch):
        return _gmat_py.Attitude_SetEpoch(self, toEpoch)

    def GetEpochGT(self):
        return _gmat_py.Attitude_GetEpochGT(self)

    def SetEpochGT(self, toEpoch):
        return _gmat_py.Attitude_SetEpochGT(self, toEpoch)

    def NeedsReinitialization(self):
        return _gmat_py.Attitude_NeedsReinitialization(self)

    def SetOwningSpacecraft(self, theSC):
        return _gmat_py.Attitude_SetOwningSpacecraft(self, theSC)

    def GetEulerSequenceList(self):
        r""" Method to get the Euler sequence list (as strings)"""
        return _gmat_py.Attitude_GetEulerSequenceList(self)

    def GetQuaternion(self, atTime):
        r""" Method to get the attitude as a Quaternion"""
        return _gmat_py.Attitude_GetQuaternion(self, atTime)

    def GetEulerAngles(self, *args):
        r"""
        *Overload 1:*
        Method to get the attitude as a set of Euler angles, using the Euler
        sequence provided by the user (an exception will be thrown if the
        sequence has not been set

        |

        *Overload 2:*
        Method to get the attitude as a set of Euler angles,
        using the input Euler sequence
        """
        return _gmat_py.Attitude_GetEulerAngles(self, *args)

    def GetCosineMatrix(self, atTime):
        r""" Method to get the attitude as a Direction Cosine Matrix"""
        return _gmat_py.Attitude_GetCosineMatrix(self, atTime)

    def GetAngularVelocity(self, atTime):
        return _gmat_py.Attitude_GetAngularVelocity(self, atTime)

    def GetEulerAngleRates(self, atTime):
        return _gmat_py.Attitude_GetEulerAngleRates(self, atTime)

    def GetAttitudeModelName(self):
        r""" Method returning the type of the attitude model"""
        return _gmat_py.Attitude_GetAttitudeModelName(self)

    def CSModifyAllowed(self):
        r"""
        Method returning a flag indicating whether or not modification of
        the reference coordinate system is allowed for this attitude model
        """
        return _gmat_py.Attitude_CSModifyAllowed(self)

    def SetInitialAttitudeAllowed(self):
        r"""
        Method returning a flag indicating whether or not setting of
        the initial attitude conditions is allowed for this attitude model
        """
        return _gmat_py.Attitude_SetInitialAttitudeAllowed(self)

    def ModelComputesRates(self):
        r""" Does this model compute attitude rates?"""
        return _gmat_py.Attitude_ModelComputesRates(self)

    def IsInitialized(self):
        r""" Has this attitude been initialized?"""
        return _gmat_py.Attitude_IsInitialized(self)

    def GetRefObjectName(self, type):
        r""" methods to access object parameters"""
        return _gmat_py.Attitude_GetRefObjectName(self, type)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Attitude_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.Attitude_SetRefObjectName(self, type, name)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Attitude_RenameRefObject(self, type, oldName, newName)

    def GetRefObject(self, type, name):
        return _gmat_py.Attitude_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.Attitude_SetRefObject(self, *args)

    def HasRefObjectTypeArray(self):
        return _gmat_py.Attitude_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Attitude_GetRefObjectTypeArray(self)

    def GetParameterText(self, id):
        r""" methods to get/set parameter values"""
        return _gmat_py.Attitude_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Attitude_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Attitude_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Attitude_GetParameterTypeString(self, id)

    def GetPropertyObjectType(self, id):
        return _gmat_py.Attitude_GetPropertyObjectType(self, id)

    def CanAssignStringToObjectProperty(self, id):
        return _gmat_py.Attitude_CanAssignStringToObjectProperty(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Attitude_IsParameterReadOnly(self, *args)

    def GetGmatTimeParameter(self, *args):
        return _gmat_py.Attitude_GetGmatTimeParameter(self, *args)

    def SetGmatTimeParameter(self, *args):
        return _gmat_py.Attitude_SetGmatTimeParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.Attitude_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Attitude_SetRealParameter(self, *args)

    def GetUnsignedIntArrayParameter(self, *args):
        return _gmat_py.Attitude_GetUnsignedIntArrayParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.Attitude_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.Attitude_SetRvectorParameter(self, *args)

    def GetRmatrixParameter(self, *args):
        return _gmat_py.Attitude_GetRmatrixParameter(self, *args)

    def SetRmatrixParameter(self, *args):
        return _gmat_py.Attitude_SetRmatrixParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.Attitude_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Attitude_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.Attitude_GetStringArrayParameter(self, *args)

    def GetGeneratingString(self, *args):
        return _gmat_py.Attitude_GetGeneratingString(self, *args)

    def GetRotationMatrix(self, epochGT):
        return _gmat_py.Attitude_GetRotationMatrix(self, epochGT)

    def GetRotationMatrixDerivative(self, epochGT, j2kCS):
        return _gmat_py.Attitude_GetRotationMatrixDerivative(self, epochGT, j2kCS)

    def HasLocalClones(self):
        return _gmat_py.Attitude_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Attitude_SetClass(base)

# Register Attitude in _gmat_py:
_gmat_py.Attitude_swigregister(Attitude)
class Kinematic(Attitude):
    r"""
    Class definition for the Kinematic attitude base class.

    Notes: The time passed in for the epoch or passed into the methods
          should be an A1Mjd (though its type is currently Real).
    Methods called to set/get parameter values will require/return angle
          values in degrees and rate values in degrees/sec.  All other methods
          assume/expect radians and radians/sec.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Kinematic

    @staticmethod
    def SetClass(base):
        return _gmat_py.Kinematic_SetClass(base)

# Register Kinematic in _gmat_py:
_gmat_py.Kinematic_swigregister(Kinematic)
class CSFixed(Kinematic):
    r"""
    Class definition for the CSFixed (Coordinate System Fixed) attitude class.

    Notes: The time passed in for the epoch or passed into the methods
          should be an A1Mjd (though its type is currently Real).
    Methods called to set/get parameter values will require/return angle
          values in degrees and rate values in degrees/sec.  All other methods
          assume/expect radians and radians/sec.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.CSFixed_swiginit(self, _gmat_py.new_CSFixed(*args))
    __swig_destroy__ = _gmat_py.delete_CSFixed

    def Initialize(self):
        r""" Initialize the CSFixed attitude"""
        return _gmat_py.CSFixed_Initialize(self)

    def Clone(self):
        r""" inherited from GmatBase"""
        return _gmat_py.CSFixed_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CSFixed_SetClass(base)

# Register CSFixed in _gmat_py:
_gmat_py.CSFixed_swigregister(CSFixed)
class CCSDSAttitude(Attitude):
    r"""
    Class definition for the CCSDS-AEM (CCSDSAttitude) attitude class.
    This class calls the CCSDS utilities to get the attitude data
    for an object (currently, for spacecraft only).

    Notes: The time passed in for the epoch or passed into the methods
          should be an A1Mjd (though its type is currently Real).
    Methods called to set/get parameter values will require/return angle
          values in degrees and rate values in degrees/sec.  All other methods
          assume/expect radians and radians/sec.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.CCSDSAttitude_swiginit(self, _gmat_py.new_CCSDSAttitude(*args))
    __swig_destroy__ = _gmat_py.delete_CCSDSAttitude

    def Initialize(self):
        r""" Initialize the CCSDSAttitude attitude"""
        return _gmat_py.CCSDSAttitude_Initialize(self)

    def Clone(self):
        r""" inherited from GmatBase"""
        return _gmat_py.CCSDSAttitude_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CCSDSAttitude_SetClass(base)

# Register CCSDSAttitude in _gmat_py:
_gmat_py.CCSDSAttitude_swigregister(CCSDSAttitude)
class NadirPointing(Kinematic):
    r"""
    Class definition for the Nadir (Nadir Pointing) attitude class.

    Notes: 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.NadirPointing_swiginit(self, _gmat_py.new_NadirPointing(*args))
    __swig_destroy__ = _gmat_py.delete_NadirPointing

    def Initialize(self):
        r""" Initialize the Nadir attitude"""
        return _gmat_py.NadirPointing_Initialize(self)

    def Clone(self):
        r""" inherited from GmatBase"""
        return _gmat_py.NadirPointing_Clone(self)

    def GetRotationMatrixDerivative(self, epochGT, j2kCS):
        return _gmat_py.NadirPointing_GetRotationMatrixDerivative(self, epochGT, j2kCS)

    @staticmethod
    def SetClass(base):
        return _gmat_py.NadirPointing_SetClass(base)

# Register NadirPointing in _gmat_py:
_gmat_py.NadirPointing_swigregister(NadirPointing)
class PrecessingSpinner(Kinematic):
    r"""
    Class definition for the PrecessingSpinner attitude class.

    Notes: 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.PrecessingSpinner_swiginit(self, _gmat_py.new_PrecessingSpinner(*args))
    __swig_destroy__ = _gmat_py.delete_PrecessingSpinner

    def Initialize(self):
        r""" Initialize the Nadir attitude"""
        return _gmat_py.PrecessingSpinner_Initialize(self)

    def Clone(self):
        r""" inherited from GmatBase"""
        return _gmat_py.PrecessingSpinner_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PrecessingSpinner_SetClass(base)

# Register PrecessingSpinner in _gmat_py:
_gmat_py.PrecessingSpinner_swigregister(PrecessingSpinner)
class SpiceAttitude(Attitude):
    r"""
    Class definition for the SpiceAttitude attitude class.
    This class calls the spice utility(ies) to get the attitude (pointing) data
    for an object (currently, for spacecraft only).

    Notes: The time passed in for the epoch or passed into the methods
          should be an A1Mjd (though its type is currently Real).
    Methods called to set/get parameter values will require/return angle
          values in degrees and rate values in degrees/sec.  All other methods
          assume/expect radians and radians/sec.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.SpiceAttitude_swiginit(self, _gmat_py.new_SpiceAttitude(*args))
    __swig_destroy__ = _gmat_py.delete_SpiceAttitude

    def Initialize(self):
        r""" Initialize the SpiceAttitude attitude"""
        return _gmat_py.SpiceAttitude_Initialize(self)

    def Clone(self):
        r""" inherited from GmatBase"""
        return _gmat_py.SpiceAttitude_Clone(self)

    def SetObjectID(self, objName, objNaifId, objRefFrameNaifId):
        r""" Set the object's identifying information"""
        return _gmat_py.SpiceAttitude_SetObjectID(self, objName, objNaifId, objRefFrameNaifId)

    def GetQuaternion(self, atTime):
        r""" get the attitude as a Quaternion"""
        return _gmat_py.SpiceAttitude_GetQuaternion(self, atTime)

    def GetEulerAngles(self, *args):
        r"""
        *Overload 1:*
        get the attitude as a set of Euler angles, using the Euler
        sequence provided by the user (an exception will be thrown if the
        sequence has not been set

        |

        *Overload 2:*
        get the attitude as a set of Euler angles, using the input Euler sequence
        """
        return _gmat_py.SpiceAttitude_GetEulerAngles(self, *args)

    def GetCosineMatrix(self, atTime):
        r""" get the attitude as a Direction Cosine Matrix"""
        return _gmat_py.SpiceAttitude_GetCosineMatrix(self, atTime)

    def GetAngularVelocity(self, atTime):
        return _gmat_py.SpiceAttitude_GetAngularVelocity(self, atTime)

    def GetEulerAngleRates(self, atTime):
        return _gmat_py.SpiceAttitude_GetEulerAngleRates(self, atTime)

    def GetParameterText(self, id):
        return _gmat_py.SpiceAttitude_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SpiceAttitude_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SpiceAttitude_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SpiceAttitude_GetParameterTypeString(self, id)

    def GetStringParameter(self, id, index):
        return _gmat_py.SpiceAttitude_GetStringParameter(self, id, index)

    def SetStringParameter(self, *args):
        return _gmat_py.SpiceAttitude_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.SpiceAttitude_GetStringArrayParameter(self, id)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SpiceAttitude_SetClass(base)

# Register SpiceAttitude in _gmat_py:
_gmat_py.SpiceAttitude_swigregister(SpiceAttitude)
class Spinner(Kinematic):
    r"""
    Class definition for the Spinner attitude class.

    Notes: The time passed in for the epoch or passed into the methods
          should be an A1Mjd (though its type is currently Real).
    Methods called to set/get parameter values will require/return angle
          values in degrees and rate values in degrees/sec.  All other methods
          assume/expect radians and radians/sec.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.Spinner_swiginit(self, _gmat_py.new_Spinner(*args))
    __swig_destroy__ = _gmat_py.delete_Spinner

    def Initialize(self):
        r""" Initialize the Spinner attitude"""
        return _gmat_py.Spinner_Initialize(self)

    def Clone(self):
        r""" inherited from GmatBase"""
        return _gmat_py.Spinner_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Spinner_SetClass(base)

# Register Spinner in _gmat_py:
_gmat_py.Spinner_swigregister(Spinner)
class Burn(GmatBase):
    r"""
    Defines the Burn base class used for impulsive and finite maneuvers.

    All maneuver classes are derived from this base class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Burn

    def IsUsingLocalCoordSystem(self):
        return _gmat_py.Burn_IsUsingLocalCoordSystem(self)

    def HasFired(self):
        return _gmat_py.Burn_HasFired(self)

    def IsFiring(self):
        return _gmat_py.Burn_IsFiring(self)

    def GetTotalMassFlowRate(self):
        return _gmat_py.Burn_GetTotalMassFlowRate(self)

    def GetDeltaVInertial(self):
        return _gmat_py.Burn_GetDeltaVInertial(self)

    def GetTotalAcceleration(self):
        return _gmat_py.Burn_GetTotalAcceleration(self)

    def GetTotalThrust(self):
        return _gmat_py.Burn_GetTotalThrust(self)

    def GetEpochAtLastFire(self):
        return _gmat_py.Burn_GetEpochAtLastFire(self)

    def GetParameterText(self, id):
        return _gmat_py.Burn_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Burn_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Burn_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Burn_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.Burn_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.Burn_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.Burn_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.Burn_SetRealParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.Burn_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.Burn_SetStringParameter(self, *args)

    def GetPropertyEnumStrings(self, *args):
        return _gmat_py.Burn_GetPropertyEnumStrings(self, *args)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Burn_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Burn_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.Burn_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Burn_RenameRefObject(self, type, oldName, newName)

    def SetSpacecraftToManeuver(self, sat):
        return _gmat_py.Burn_SetSpacecraftToManeuver(self, sat)

    def SetSolarSystem(self, ss):
        return _gmat_py.Burn_SetSolarSystem(self, ss)

    def Initialize(self):
        return _gmat_py.Burn_Initialize(self)

    def Fire(self, *args):
        r"""
        Applies the burn.

        Derived classes implement this method to provide the mathematics that
        model the burn.  The parameter is provided so that the derived classes
        have an interface to pass in additional data as needed.

        :type burnData: float, optional
        :param burnData:    Array of data specific to the derived burn class.

        :rtype: boolean
        :return: true on success, false or throw on failure.
        """
        return _gmat_py.Burn_Fire(self, *args)

    def HasLocalClones(self):
        return _gmat_py.Burn_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Burn_SetClass(base)

# Register Burn in _gmat_py:
_gmat_py.Burn_swigregister(Burn)
class ManeuverFrame(object):
    r"""Defines the base class for maneuver reference frames."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ManeuverFrame

    def SetState(self, pos, vel=None):
        return _gmat_py.ManeuverFrame_SetState(self, pos, vel)

    def CalculateBasis(self, basis):
        return _gmat_py.ManeuverFrame_CalculateBasis(self, basis)

    def GetFrameLabel(self, id):
        return _gmat_py.ManeuverFrame_GetFrameLabel(self, id)

# Register ManeuverFrame in _gmat_py:
_gmat_py.ManeuverFrame_swigregister(ManeuverFrame)
class FiniteBurn(Burn):
    r"""
    Defines the FiniteBurn class used for maneuvers.

    Class used to configure finite burns.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_FiniteBurn

    def __init__(self, *args):
        _gmat_py.FiniteBurn_swiginit(self, _gmat_py.new_FiniteBurn(*args))

    def SetSpacecraftToManeuver(self, sat):
        return _gmat_py.FiniteBurn_SetSpacecraftToManeuver(self, sat)

    def SetManeuverEpochAndState(self, epoch, state, mass=-1.0, origin=None):
        return _gmat_py.FiniteBurn_SetManeuverEpochAndState(self, epoch, state, mass, origin)

    def Fire(self, *args):
        return _gmat_py.FiniteBurn_Fire(self, *args)

    def IsFiring(self):
        return _gmat_py.FiniteBurn_IsFiring(self)

    def GetParameterText(self, id):
        return _gmat_py.FiniteBurn_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.FiniteBurn_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.FiniteBurn_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.FiniteBurn_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.FiniteBurn_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.FiniteBurn_IsParameterCommandModeSettable(self, id)

    def GetStringParameter(self, id):
        return _gmat_py.FiniteBurn_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.FiniteBurn_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.FiniteBurn_GetStringArrayParameter(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.FiniteBurn_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.FiniteBurn_SetRealParameter(self, id, value)

    def HasRefObjectTypeArray(self):
        return _gmat_py.FiniteBurn_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.FiniteBurn_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.FiniteBurn_GetRefObjectNameArray(self, type)

    def GetRefObject(self, type, name):
        return _gmat_py.FiniteBurn_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.FiniteBurn_SetRefObject(self, *args)

    def GetPropertyObjectType(self, id):
        return _gmat_py.FiniteBurn_GetPropertyObjectType(self, id)

    def TakeAction(self, *args):
        return _gmat_py.FiniteBurn_TakeAction(self, *args)

    def Initialize(self):
        return _gmat_py.FiniteBurn_Initialize(self)

    def Clone(self):
        return _gmat_py.FiniteBurn_Clone(self)

    def Copy(self, orig):
        return _gmat_py.FiniteBurn_Copy(self, orig)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.FiniteBurn_RenameRefObject(self, type, oldName, newName)

    def DepletesMass(self):
        return _gmat_py.FiniteBurn_DepletesMass(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.FiniteBurn_SetClass(base)

# Register FiniteBurn in _gmat_py:
_gmat_py.FiniteBurn_swigregister(FiniteBurn)
class ImpulsiveBurn(Burn):
    r"""Defines the ImpulsiveBurn class used for maneuvers."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ImpulsiveBurn

    def __init__(self, *args):
        _gmat_py.ImpulsiveBurn_swiginit(self, _gmat_py.new_ImpulsiveBurn(*args))

    def SetSpacecraftToManeuver(self, sat):
        return _gmat_py.ImpulsiveBurn_SetSpacecraftToManeuver(self, sat)

    def Fire(self, *args):
        return _gmat_py.ImpulsiveBurn_Fire(self, *args)

    def Validate(self):
        return _gmat_py.ImpulsiveBurn_Validate(self)

    def Initialize(self):
        return _gmat_py.ImpulsiveBurn_Initialize(self)

    def Clone(self):
        return _gmat_py.ImpulsiveBurn_Clone(self)

    def Copy(self, orig):
        return _gmat_py.ImpulsiveBurn_Copy(self, orig)

    def TakeAction(self, *args):
        return _gmat_py.ImpulsiveBurn_TakeAction(self, *args)

    def IsParameterReadOnly(self, id):
        return _gmat_py.ImpulsiveBurn_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.ImpulsiveBurn_IsParameterCommandModeSettable(self, id)

    def GetParameterText(self, id):
        return _gmat_py.ImpulsiveBurn_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ImpulsiveBurn_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ImpulsiveBurn_GetParameterType(self, id)

    def GetBooleanParameter(self, id):
        return _gmat_py.ImpulsiveBurn_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.ImpulsiveBurn_SetBooleanParameter(self, id, value)

    def GetRealParameter(self, id):
        return _gmat_py.ImpulsiveBurn_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.ImpulsiveBurn_SetRealParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.ImpulsiveBurn_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.ImpulsiveBurn_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.ImpulsiveBurn_GetStringArrayParameter(self, id)

    def GetPropertyObjectType(self, id):
        return _gmat_py.ImpulsiveBurn_GetPropertyObjectType(self, id)

    def HasRefObjectTypeArray(self):
        return _gmat_py.ImpulsiveBurn_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.ImpulsiveBurn_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.ImpulsiveBurn_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.ImpulsiveBurn_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ImpulsiveBurn_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ImpulsiveBurn_SetClass(base)

# Register ImpulsiveBurn in _gmat_py:
_gmat_py.ImpulsiveBurn_swigregister(ImpulsiveBurn)
class InertialManeuverFrame(ManeuverFrame):
    r"""Defines the class used for maneuvers defined inertially."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_InertialManeuverFrame

    def __init__(self, *args):
        _gmat_py.InertialManeuverFrame_swiginit(self, _gmat_py.new_InertialManeuverFrame(*args))

    @staticmethod
    def SetClass(base):
        return _gmat_py.InertialManeuverFrame_SetClass(base)

# Register InertialManeuverFrame in _gmat_py:
_gmat_py.InertialManeuverFrame_swigregister(InertialManeuverFrame)
class ManeuverFrameManager(object):
    r"""
    Manager for all of the maneuver frame types.

    This class implements the interface to different representations of a
    maneuver based on classes derived from the ManeuverFrame class.  To add a new
    frame, insert the calls for the derived classes in the three indicated
    places.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.ManeuverFrameManager_swiginit(self, _gmat_py.new_ManeuverFrameManager())
    __swig_destroy__ = _gmat_py.delete_ManeuverFrameManager

    def GetSupportedFrames(self):
        return _gmat_py.ManeuverFrameManager_GetSupportedFrames(self)

    def GetFrameInstance(self, frameType):
        return _gmat_py.ManeuverFrameManager_GetFrameInstance(self, frameType)

# Register ManeuverFrameManager in _gmat_py:
_gmat_py.ManeuverFrameManager_swigregister(ManeuverFrameManager)
class VnbManeuverFrame(ManeuverFrame):
    r"""Defines the class used for maneuvers defined in VNB coordinates."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_VnbManeuverFrame

    def __init__(self, *args):
        _gmat_py.VnbManeuverFrame_swiginit(self, _gmat_py.new_VnbManeuverFrame(*args))

    def GetFrameLabel(self, id):
        return _gmat_py.VnbManeuverFrame_GetFrameLabel(self, id)

    @staticmethod
    def SetClass(base):
        return _gmat_py.VnbManeuverFrame_SetClass(base)

# Register VnbManeuverFrame in _gmat_py:
_gmat_py.VnbManeuverFrame_swigregister(VnbManeuverFrame)
class PhysicalModel(GmatBase):
    r"""
    Base class used to model the physical system

    This class is a base class used to model the physics of the system being
    studied.  The propagators work in tandem with classes derived from this one
    to advance the system over time.

    Propagators fall into two basic subclasses: Integrators and analytic
    solutions.  The analytic solutions typically require minimal interaction with
    the system; for example, for two body orbit propagation, the PhysicalModel
    supplies the gravitational constant for the central body.  Integrators
    require more detailed information to evolve their models; see the text of the
    PhysicalModelIntegrator class description for details of their requirements.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PhysicalModel

    def Initialize(self):
        return _gmat_py.PhysicalModel_Initialize(self)

    def GetBody(self):
        return _gmat_py.PhysicalModel_GetBody(self)

    def GetBodyName(self):
        return _gmat_py.PhysicalModel_GetBodyName(self)

    def GetDimension(self):
        return _gmat_py.PhysicalModel_GetDimension(self)

    def GetState(self):
        return _gmat_py.PhysicalModel_GetState(self)

    def GetStateDot(self):
        return _gmat_py.PhysicalModel_GetStateDot(self)

    def GetJ2KState(self):
        return _gmat_py.PhysicalModel_GetJ2KState(self)

    def GetDerivativeArray(self):
        return _gmat_py.PhysicalModel_GetDerivativeArray(self)

    def GetJ2KDerivativeArray(self):
        return _gmat_py.PhysicalModel_GetJ2KDerivativeArray(self)

    def SetBodyName(self, theBody):
        return _gmat_py.PhysicalModel_SetBodyName(self, theBody)

    def SetBody(self, *args):
        return _gmat_py.PhysicalModel_SetBody(self, *args)

    def SetForceOrigin(self, toBody):
        return _gmat_py.PhysicalModel_SetForceOrigin(self, toBody)

    def SetDimension(self, arg2):
        return _gmat_py.PhysicalModel_SetDimension(self, arg2)

    def SetState(self, st):
        return _gmat_py.PhysicalModel_SetState(self, st)

    def GetForceOrigin(self):
        return _gmat_py.PhysicalModel_GetForceOrigin(self)

    def GetErrorThreshold(self):
        return _gmat_py.PhysicalModel_GetErrorThreshold(self)

    def SetErrorThreshold(self, thold=0.10):
        return _gmat_py.PhysicalModel_SetErrorThreshold(self, thold)

    def IncrementTime(self, dt):
        return _gmat_py.PhysicalModel_IncrementTime(self, dt)

    def GetTime(self):
        return _gmat_py.PhysicalModel_GetTime(self)

    def SetTime(self, t):
        return _gmat_py.PhysicalModel_SetTime(self, t)

    def SetDirection(self, dir):
        return _gmat_py.PhysicalModel_SetDirection(self, dir)

    def GetStepPrecision(self, stepSize):
        return _gmat_py.PhysicalModel_GetStepPrecision(self, stepSize)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.PhysicalModel_GetDerivatives(self, state, dt, order, id)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.PhysicalModel_GetDerivativesForSpacecraft(self, sc)

    def EstimateError(self, diffs, answer):
        return _gmat_py.PhysicalModel_EstimateError(self, diffs, answer)

    def GetComponentMap(self, map, order=1, id=-1):
        return _gmat_py.PhysicalModel_GetComponentMap(self, map, order, id)

    def SetStmIndex(self, id, paramID):
        return _gmat_py.PhysicalModel_SetStmIndex(self, id, paramID)

    def GetSupportedDerivativeIds(self):
        return _gmat_py.PhysicalModel_GetSupportedDerivativeIds(self)

    def GetSupportedDerivativeNames(self):
        return _gmat_py.PhysicalModel_GetSupportedDerivativeNames(self)

    def SetSolarSystem(self, ss):
        return _gmat_py.PhysicalModel_SetSolarSystem(self, ss)

    def SetSatelliteParameter(self, *args):
        return _gmat_py.PhysicalModel_SetSatelliteParameter(self, *args)

    def SetSpaceObject(self, i, obj):
        return _gmat_py.PhysicalModel_SetSpaceObject(self, i, obj)

    def UsesSpacecraftOrigin(self):
        return _gmat_py.PhysicalModel_UsesSpacecraftOrigin(self)

    def ClearSatelliteParameters(self, *args):
        return _gmat_py.PhysicalModel_ClearSatelliteParameters(self, *args)

    def StateChanged(self, reset=True):
        return _gmat_py.PhysicalModel_StateChanged(self, reset)

    def IsTransient(self):
        return _gmat_py.PhysicalModel_IsTransient(self)

    def DepletesMass(self):
        return _gmat_py.PhysicalModel_DepletesMass(self)

    def AttitudeAffectsDynamics(self):
        return _gmat_py.PhysicalModel_AttitudeAffectsDynamics(self)

    def IsUserForce(self):
        return _gmat_py.PhysicalModel_IsUserForce(self)

    def IsUnique(self, *args):
        return _gmat_py.PhysicalModel_IsUnique(self, *args)

    def SetAllowODEDelete(self, deleteFlag):
        return _gmat_py.PhysicalModel_SetAllowODEDelete(self, deleteFlag)

    def AllowODEDelete(self):
        return _gmat_py.PhysicalModel_AllowODEDelete(self)

    def SetPropList(self, soList):
        return _gmat_py.PhysicalModel_SetPropList(self, soList)

    def CheckQualifier(self, *args):
        return _gmat_py.PhysicalModel_CheckQualifier(self, *args)

    def SupportsDerivative(self, id):
        return _gmat_py.PhysicalModel_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, totalSize):
        return _gmat_py.PhysicalModel_SetStart(self, id, index, quantity, totalSize)

    def GetParameterText(self, id):
        return _gmat_py.PhysicalModel_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.PhysicalModel_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.PhysicalModel_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.PhysicalModel_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.PhysicalModel_IsParameterReadOnly(self, *args)

    def GetGmatTimeParameter(self, *args):
        return _gmat_py.PhysicalModel_GetGmatTimeParameter(self, *args)

    def SetGmatTimeParameter(self, *args):
        return _gmat_py.PhysicalModel_SetGmatTimeParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.PhysicalModel_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.PhysicalModel_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.PhysicalModel_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.PhysicalModel_SetStringParameter(self, *args)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.PhysicalModel_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.PhysicalModel_SetRefObject(self, *args)

    def GetRefObject(self, *args):
        return _gmat_py.PhysicalModel_GetRefObject(self, *args)

    def SetPropStateManager(self, sm):
        return _gmat_py.PhysicalModel_SetPropStateManager(self, sm)

    def BuildModelState(self, now, state, j2kState, dimension=6):
        return _gmat_py.PhysicalModel_BuildModelState(self, now, state, j2kState, dimension)

    def BuildModelStateGT(self, now, state, j2kState, dimension=6):
        return _gmat_py.PhysicalModel_BuildModelStateGT(self, now, state, j2kState, dimension)

    def GetForceMaxStep(self, *args):
        return _gmat_py.PhysicalModel_GetForceMaxStep(self, *args)

    def IsEndOfSegment(self, forward):
        return _gmat_py.PhysicalModel_IsEndOfSegment(self, forward)

    def IsEndOfThrust(self, forward):
        return _gmat_py.PhysicalModel_IsEndOfThrust(self, forward)

    def IsConservative(self):
        r""" Test to see if the force is conservative"""
        return _gmat_py.PhysicalModel_IsConservative(self)

    def ComputeMassJacobian(self, truefalse):
        r""" Toggle mass Jacobian computation"""
        return _gmat_py.PhysicalModel_ComputeMassJacobian(self, truefalse)

    def ComputeTimeJacobian(self, truefalse):
        r""" Toggle time Jacobian computation"""
        return _gmat_py.PhysicalModel_ComputeTimeJacobian(self, truefalse)

    def HasMassJacobian(self):
        r""" Test to see if the mass Jacobian is implemented"""
        return _gmat_py.PhysicalModel_HasMassJacobian(self)

    def HasTimeJacobian(self):
        r""" Test to see if the time Jacobian is implemented"""
        return _gmat_py.PhysicalModel_HasTimeJacobian(self)

    def GetSpaceObjectList(self):
        return _gmat_py.PhysicalModel_GetSpaceObjectList(self)

    def IsSolvingForThrustEventsWithSpinningAttitude(self):
        return _gmat_py.PhysicalModel_IsSolvingForThrustEventsWithSpinningAttitude(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PhysicalModel_SetClass(base)

# Register PhysicalModel in _gmat_py:
_gmat_py.PhysicalModel_swigregister(PhysicalModel)
class DragForce(PhysicalModel):
    r"""Class used to model accelerations due to drag."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_DragForce

    def __init__(self, *args):
        _gmat_py.DragForce_swiginit(self, _gmat_py.new_DragForce(*args))

    def GetComponentMap(self, map, order=1):
        return _gmat_py.DragForce_GetComponentMap(self, map, order)

    def SetSatelliteParameter(self, *args):
        return _gmat_py.DragForce_SetSatelliteParameter(self, *args)

    def ClearSatelliteParameters(self, *args):
        return _gmat_py.DragForce_ClearSatelliteParameters(self, *args)

    def AttitudeAffectsDynamics(self):
        return _gmat_py.DragForce_AttitudeAffectsDynamics(self)

    def IsUnique(self, *args):
        return _gmat_py.DragForce_IsUnique(self, *args)

    def Initialize(self):
        return _gmat_py.DragForce_Initialize(self)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.DragForce_GetDerivatives(self, state, dt, order, id)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.DragForce_GetDerivativesForSpacecraft(self, sc)

    def Clone(self):
        return _gmat_py.DragForce_Clone(self)

    def GetParameterText(self, id):
        return _gmat_py.DragForce_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.DragForce_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.DragForce_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.DragForce_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.DragForce_IsParameterReadOnly(self, *args)

    def WriteEmptyStringParameter(self, id):
        return _gmat_py.DragForce_WriteEmptyStringParameter(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.DragForce_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.DragForce_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.DragForce_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.DragForce_SetStringParameter(self, *args)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.DragForce_GetPropertyEnumStrings(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.DragForce_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.DragForce_SetIntegerParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.DragForce_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.DragForce_SetRefObject(self, *args)

    def GetOwnedObjectCount(self):
        return _gmat_py.DragForce_GetOwnedObjectCount(self)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.DragForce_GetOwnedObject(self, whichOne)

    def SetInternalAtmosphereModel(self, atm):
        return _gmat_py.DragForce_SetInternalAtmosphereModel(self, atm)

    def GetInternalAtmosphereModel(self):
        return _gmat_py.DragForce_GetInternalAtmosphereModel(self)

    def GetAtmosphereModel(self):
        return _gmat_py.DragForce_GetAtmosphereModel(self)

    @staticmethod
    def CheckFluxFile(filename, isHistoric):
        return _gmat_py.DragForce_CheckFluxFile(filename, isHistoric)

    def SupportsDerivative(self, id):
        return _gmat_py.DragForce_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, totalSize):
        return _gmat_py.DragForce_SetStart(self, id, index, quantity, totalSize)

    def GetDensity(self, *args):
        return _gmat_py.DragForce_GetDensity(self, *args)

    def HasLocalClones(self):
        return _gmat_py.DragForce_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.DragForce_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.DragForce_SetClass(base)

# Register DragForce in _gmat_py:
_gmat_py.DragForce_swigregister(DragForce)
class FiniteThrust(PhysicalModel):
    r"""
    Defines the FiniteThrust class used to model the acceleration during a finite
    burn.

    The force used for finite burns.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_FiniteThrust

    def __init__(self, *args):
        _gmat_py.FiniteThrust_swiginit(self, _gmat_py.new_FiniteThrust(*args))

    def __eq__(self, ft):
        return _gmat_py.FiniteThrust___eq__(self, ft)

    def Clone(self):
        return _gmat_py.FiniteThrust_Clone(self)

    def Clear(self, *args):
        return _gmat_py.FiniteThrust_Clear(self, *args)

    def SetRefObjectName(self, type, name):
        return _gmat_py.FiniteThrust_SetRefObjectName(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.FiniteThrust_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.FiniteThrust_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.FiniteThrust_RenameRefObject(self, type, oldName, newName)

    def GetRefObject(self, *args):
        return _gmat_py.FiniteThrust_GetRefObject(self, *args)

    def IsTransient(self):
        return _gmat_py.FiniteThrust_IsTransient(self)

    def DepletesMass(self):
        return _gmat_py.FiniteThrust_DepletesMass(self)

    def SetPropList(self, soList):
        return _gmat_py.FiniteThrust_SetPropList(self, soList)

    def Initialize(self):
        return _gmat_py.FiniteThrust_Initialize(self)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.FiniteThrust_GetDerivatives(self, state, dt, order, id)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.FiniteThrust_GetDerivativesForSpacecraft(self, sc)

    def SupportsDerivative(self, id):
        return _gmat_py.FiniteThrust_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, sizeOfType):
        return _gmat_py.FiniteThrust_SetStart(self, id, index, quantity, sizeOfType)

    def HasLocalClones(self):
        return _gmat_py.FiniteThrust_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.FiniteThrust_SetClass(base)

# Register FiniteThrust in _gmat_py:
_gmat_py.FiniteThrust_swigregister(FiniteThrust)
class GravityBase(PhysicalModel):
    r"""
    Definition for a base class for sophisticated gravity models.

    Base class defining some gravity model attributes and interfaces.

    Base class put in place to make ODEModel detections of (potential) central
    body gravity settings simpler, and to allow for different types of gravity
    field modeling in the ODEModel.  Eventually, we'll want to refactor the
    derived models to consolidate common gravity field modeling operations and
    attributes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_GravityBase

    @staticmethod
    def SetClass(base):
        return _gmat_py.GravityBase_SetClass(base)

# Register GravityBase in _gmat_py:
_gmat_py.GravityBase_swigregister(GravityBase)
class HarmonicField(GravityBase):
    r"""
    This is the HarmonicField class.

    Notes: original prolog information included at end of file prolog.

    Common header file definitions for execution of gravity, legendreP, and redux routines

    Steven Queen
    Goddard Space Flight Center
    Flight Dynamics Analysis Branch
    Steven.Z.Queen at nasa.gov
    Feburary 28, 2003

    Note that in GMAT, this code is derived from GravityBase rather than
    PhysicalModel.  That means that is we add other HarmonicField models that are
    not gravity fields, we'll need to do some code rearrangement to have the
    common harmonic elements separate but usable.

    The GravityBase class was added in Oct 2012 to handle issues with different
    types of sophisticated gravity models -- specifically, Polyhedral models and
    Spherical Harmonic models -- in the ODEModel collection.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_HarmonicField

    def Initialize(self):
        return _gmat_py.HarmonicField_Initialize(self)

    def CheckQualifier(self, *args):
        return _gmat_py.HarmonicField_CheckQualifier(self, *args)

    def SetDegreeOrder(self, degree, order, stmlimit):
        return _gmat_py.HarmonicField_SetDegreeOrder(self, degree, order, stmlimit)

    def SetFilename(self, fn, validateOnly=False):
        return _gmat_py.HarmonicField_SetFilename(self, fn, validateOnly)

    def SetEopFile(self, eopF):
        return _gmat_py.HarmonicField_SetEopFile(self, eopF)

    def GetParameterText(self, id):
        return _gmat_py.HarmonicField_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.HarmonicField_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.HarmonicField_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.HarmonicField_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.HarmonicField_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.HarmonicField_SetIntegerParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.HarmonicField_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.HarmonicField_SetStringParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.HarmonicField_GetRefObject(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.HarmonicField_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.HarmonicField_SetRefObject(self, *args)

    def SetForceOrigin(self, toBody):
        return _gmat_py.HarmonicField_SetForceOrigin(self, toBody)

    def IsParameterReadOnly(self, id):
        return _gmat_py.HarmonicField_IsParameterReadOnly(self, id)

    def IsParameterValid(self, *args):
        return _gmat_py.HarmonicField_IsParameterValid(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.HarmonicField_SetClass(base)

# Register HarmonicField in _gmat_py:
_gmat_py.HarmonicField_swigregister(HarmonicField)
class GravityField(HarmonicField):
    r"""
    This is the base class for celestial bodies.

    Notes: This is an abstract class.
    original prolog information included at end of file prolog.

    This is the GravityField class.

    original prolog information included at end of file prolog.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_GravityField

    def __init__(self, *args):
        _gmat_py.GravityField_swiginit(self, _gmat_py.new_GravityField(*args))

    def Initialize(self):
        return _gmat_py.GravityField_Initialize(self)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.GravityField_GetDerivatives(self, state, dt, order, id)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.GravityField_GetDerivativesForSpacecraft(self, sc)

    def GetBodyAndMu(self, itsName, itsMu):
        return _gmat_py.GravityField_GetBodyAndMu(self, itsName, itsMu)

    def Clone(self):
        return _gmat_py.GravityField_Clone(self)

    def GetParameterText(self, id):
        return _gmat_py.GravityField_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.GravityField_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.GravityField_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.GravityField_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.GravityField_IsParameterReadOnly(self, id)

    def IsParameterValid(self, *args):
        return _gmat_py.GravityField_IsParameterValid(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.GravityField_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.GravityField_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.GravityField_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.GravityField_SetStringParameter(self, *args)

    def SupportsDerivative(self, id):
        return _gmat_py.GravityField_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, sizeOfType):
        return _gmat_py.GravityField_SetStart(self, id, index, quantity, sizeOfType)

    def HasLocalClones(self):
        return _gmat_py.GravityField_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.GravityField_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def GetHarmonicGravity(filename, tideFilename, radius, mukm, bodyname, loadCoefficients):
        return _gmat_py.GravityField_GetHarmonicGravity(filename, tideFilename, radius, mukm, bodyname, loadCoefficients)
    DEFAULT_DEGREE = _gmat_py.GravityField_DEFAULT_DEGREE
    DEFAULT_ORDER = _gmat_py.GravityField_DEFAULT_ORDER
    GFM_EGM96 = _gmat_py.GravityField_GFM_EGM96
    GFM_JGM2 = _gmat_py.GravityField_GFM_JGM2
    GFM_JGM3 = _gmat_py.GravityField_GFM_JGM3
    GFM_LP165P = _gmat_py.GravityField_GFM_LP165P
    GFM_MARS50C = _gmat_py.GravityField_GFM_MARS50C
    GFM_MGNP180U = _gmat_py.GravityField_GFM_MGNP180U
    GFM_OTHER = _gmat_py.GravityField_GFM_OTHER
    GFM_NONE = _gmat_py.GravityField_GFM_NONE
    NumGravityModels = _gmat_py.GravityField_NumGravityModels

    @staticmethod
    def GetModelType(*args):
        return _gmat_py.GravityField_GetModelType(*args)

    def SetTideFilename(self, fn, validateOnly=False):
        return _gmat_py.GravityField_SetTideFilename(self, fn, validateOnly)

    def GetTorquesForSpacecraft(self, sc):
        return _gmat_py.GravityField_GetTorquesForSpacecraft(self, sc)

    @staticmethod
    def SetClass(base):
        return _gmat_py.GravityField_SetClass(base)

# Register GravityField in _gmat_py:
_gmat_py.GravityField_swigregister(GravityField)
GravityField.GRAVITY_MODEL_NAMES = _gmat_py.cvar.GravityField_GRAVITY_MODEL_NAMES

class ODEModel(PhysicalModel):
    r"""
    Container for forces acting on spacecraft.

    ODEModel is a class that accumulates the forces acting on one or
    more spacecraft

    ODEModel is a container class for ordinary differential equations

    The ODEModel class receives PhysicalModels that are used either singly or
    together to model the differential equations integrated by the numerical
    integrators in GMAT.  The ODEModel class implements the superposition of
    these contributors, and manages mapping into the correct elements of the
    output vector of derivative information.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def SetScriptAlias(alias, typeName):
        return _gmat_py.ODEModel_SetScriptAlias(alias, typeName)

    @staticmethod
    def GetScriptAlias(alias):
        return _gmat_py.ODEModel_GetScriptAlias(alias)
    __swig_destroy__ = _gmat_py.delete_ODEModel

    def __init__(self, *args):
        _gmat_py.ODEModel_swiginit(self, _gmat_py.new_ODEModel(*args))

    def Clone(self):
        return _gmat_py.ODEModel_Clone(self)

    def Copy(self, orig):
        return _gmat_py.ODEModel_Copy(self, orig)

    def SetSolarSystem(self, ss):
        return _gmat_py.ODEModel_SetSolarSystem(self, ss)

    def SetForceOrigin(self, toBody):
        return _gmat_py.ODEModel_SetForceOrigin(self, toBody)

    def BuildModelFromMap(self):
        return _gmat_py.ODEModel_BuildModelFromMap(self)

    def CheckQualifier(self, qualifier, forType):
        return _gmat_py.ODEModel_CheckQualifier(self, qualifier, forType)

    def Initialize(self):
        return _gmat_py.ODEModel_Initialize(self)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.ODEModel_GetDerivatives(self, state, dt, order, id)

    def EstimateError(self, diffs, answer):
        return _gmat_py.ODEModel_EstimateError(self, diffs, answer)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.ODEModel_GetDerivativesForSpacecraft(self, sc)

    def GetForceOfType(self, *args):
        return _gmat_py.ODEModel_GetForceOfType(self, *args)

    def AddForce(self, pPhysicalModel):
        return _gmat_py.ODEModel_AddForce(self, pPhysicalModel)

    def AddExclusiveForce(self, pPhysicalModel):
        return _gmat_py.ODEModel_AddExclusiveForce(self, pPhysicalModel)

    def DeleteForce(self, *args):
        return _gmat_py.ODEModel_DeleteForce(self, *args)

    def HasForce(self, name):
        return _gmat_py.ODEModel_HasForce(self, name)

    def GetNumForces(self):
        return _gmat_py.ODEModel_GetNumForces(self)

    def GetForceTypeNames(self):
        return _gmat_py.ODEModel_GetForceTypeNames(self)

    def GetForceTypeName(self, index):
        return _gmat_py.ODEModel_GetForceTypeName(self, index)

    def GetForce(self, *args):
        return _gmat_py.ODEModel_GetForce(self, *args)

    def UpdateSpaceObject(self, newEpoch=-1.0):
        return _gmat_py.ODEModel_UpdateSpaceObject(self, newEpoch)

    def UpdateSpaceObjectGT(self, newEpoch=-1.0):
        return _gmat_py.ODEModel_UpdateSpaceObjectGT(self, newEpoch)

    def UpdateFromSpaceObject(self):
        return _gmat_py.ODEModel_UpdateFromSpaceObject(self)

    def RevertSpaceObject(self):
        return _gmat_py.ODEModel_RevertSpaceObject(self)

    def BufferState(self):
        return _gmat_py.ODEModel_BufferState(self)

    def SetupSpacecraftData(self, sats, i, updateEpoch=True):
        return _gmat_py.ODEModel_SetupSpacecraftData(self, sats, i, updateEpoch)

    def UpdateDynamicSpacecraftData(self, sats, i):
        return _gmat_py.ODEModel_UpdateDynamicSpacecraftData(self, sats, i)

    def TakeAction(self, *args):
        return _gmat_py.ODEModel_TakeAction(self, *args)

    def GetParameterCount(self):
        return _gmat_py.ODEModel_GetParameterCount(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ODEModel_RenameRefObject(self, type, oldName, newName)

    def HasRefObjectTypeArray(self):
        return _gmat_py.ODEModel_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.ODEModel_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.ODEModel_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.ODEModel_SetRefObject(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.ODEModel_GetParameterText(self, id)

    def HasDecoratedFields(self):
        return _gmat_py.ODEModel_HasDecoratedFields(self)

    def GetParameterID(self, str):
        return _gmat_py.ODEModel_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ODEModel_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ODEModel_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.ODEModel_IsParameterReadOnly(self, *args)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.ODEModel_SetBooleanParameter(self, id, value)

    def GetRealParameter(self, *args):
        return _gmat_py.ODEModel_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.ODEModel_SetRealParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.ODEModel_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.ODEModel_SetRvectorParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.ODEModel_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ODEModel_SetStringParameter(self, *args)

    def GetOnOffParameter(self, *args):
        return _gmat_py.ODEModel_GetOnOffParameter(self, *args)

    def SetOnOffParameter(self, *args):
        return _gmat_py.ODEModel_SetOnOffParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.ODEModel_GetStringArrayParameter(self, *args)

    def GetIntegerParameter(self, *args):
        return _gmat_py.ODEModel_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.ODEModel_SetIntegerParameter(self, *args)

    def GetRefObject(self, *args):
        return _gmat_py.ODEModel_GetRefObject(self, *args)

    def GetRefObjectArray(self, typeString):
        return _gmat_py.ODEModel_GetRefObjectArray(self, typeString)

    def GetOwnedObjectCount(self):
        return _gmat_py.ODEModel_GetOwnedObjectCount(self)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.ODEModel_GetOwnedObject(self, whichOne)

    def BuildPropertyName(self, ownedObj):
        return _gmat_py.ODEModel_BuildPropertyName(self, ownedObj)

    def HasParameterCovariances(self, parameterId):
        return _gmat_py.ODEModel_HasParameterCovariances(self, parameterId)

    def GetParameterCovariances(self, parameterId=-1):
        return _gmat_py.ODEModel_GetParameterCovariances(self, parameterId)

    def GetCovariance(self):
        return _gmat_py.ODEModel_GetCovariance(self)

    def UpdateInitialData(self, dynamicOnly=False, updateEpoch=True):
        return _gmat_py.ODEModel_UpdateInitialData(self, dynamicOnly, updateEpoch)

    def ReportEpochData(self):
        return _gmat_py.ODEModel_ReportEpochData(self)

    def SetState(self, gms):
        return _gmat_py.ODEModel_SetState(self, gms)

    def IncrementTime(self, dt):
        return _gmat_py.ODEModel_IncrementTime(self, dt)

    def SetTime(self, t):
        return _gmat_py.ODEModel_SetTime(self, t)

    def SetDirection(self, dir):
        return _gmat_py.ODEModel_SetDirection(self, dir)

    def GetStepPrecision(self, stepSize):
        return _gmat_py.ODEModel_GetStepPrecision(self, stepSize)

    def HasLocalClones(self):
        return _gmat_py.ODEModel_HasLocalClones(self)

    def UpdateClonedObject(self, obj):
        return _gmat_py.ODEModel_UpdateClonedObject(self, obj)

    def UpdateClonedObjectParameter(self, obj, updatedParameterId):
        return _gmat_py.ODEModel_UpdateClonedObjectParameter(self, obj, updatedParameterId)

    def SetEpoch(self, newEpoch):
        return _gmat_py.ODEModel_SetEpoch(self, newEpoch)

    def SetPropStateManager(self, sm):
        return _gmat_py.ODEModel_SetPropStateManager(self, sm)

    def GetPropStateManager(self):
        return _gmat_py.ODEModel_GetPropStateManager(self)

    def GetSolveForList(self):
        return _gmat_py.ODEModel_GetSolveForList(self)

    def GetEstimationParameterID(self, param):
        return _gmat_py.ODEModel_GetEstimationParameterID(self, param)

    def GetParameterNameForEstimationParameter(self, parmName):
        return _gmat_py.ODEModel_GetParameterNameForEstimationParameter(self, parmName)

    def GetParameterNameFromEstimationParameter(self, parmName):
        return _gmat_py.ODEModel_GetParameterNameFromEstimationParameter(self, parmName)

    def SetEstimationParameter(self, param):
        return _gmat_py.ODEModel_SetEstimationParameter(self, param)

    def IsEstimationParameterValid(self, id):
        return _gmat_py.ODEModel_IsEstimationParameterValid(self, id)

    def GetEstimationParameterSize(self, id):
        return _gmat_py.ODEModel_GetEstimationParameterSize(self, id)

    def GetEstimationParameterValue(self, id):
        return _gmat_py.ODEModel_GetEstimationParameterValue(self, id)

    def GetStmObject(self, rowName):
        return _gmat_py.ODEModel_GetStmObject(self, rowName)

    def GetForceMaxStep(self, forwards=True):
        return _gmat_py.ODEModel_GetForceMaxStep(self, forwards)

    def IsEndOfSegment(self, forward):
        return _gmat_py.ODEModel_IsEndOfSegment(self, forward)

    def GetTorquesForSpacecraft(self, sc, torqueType):
        return _gmat_py.ODEModel_GetTorquesForSpacecraft(self, sc, torqueType)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ODEModel_SetClass(base)

# Register ODEModel in _gmat_py:
_gmat_py.ODEModel_swigregister(ODEModel)
class PointMassForce(PhysicalModel):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PointMassForce

    def __init__(self, *args):
        _gmat_py.PointMassForce_swiginit(self, _gmat_py.new_PointMassForce(*args))

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.PointMassForce_GetDerivatives(self, state, dt, order, id)

    def GetComponentMap(self, map, order):
        return _gmat_py.PointMassForce_GetComponentMap(self, map, order)

    def Initialize(self):
        return _gmat_py.PointMassForce_Initialize(self)

    def EstimateError(self, diffs, answer):
        return _gmat_py.PointMassForce_EstimateError(self, diffs, answer)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.PointMassForce_GetDerivativesForSpacecraft(self, sc)

    def Clone(self):
        return _gmat_py.PointMassForce_Clone(self)

    def GetParameterText(self, id):
        return _gmat_py.PointMassForce_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.PointMassForce_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.PointMassForce_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.PointMassForce_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.PointMassForce_IsParameterReadOnly(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.PointMassForce_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.PointMassForce_SetRealParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.PointMassForce_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.PointMassForce_SetStringParameter(self, *args)

    def GetBooleanParameter(self, id):
        return _gmat_py.PointMassForce_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.PointMassForce_SetBooleanParameter(self, id, value)

    def SupportsDerivative(self, id):
        return _gmat_py.PointMassForce_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, totalSize):
        return _gmat_py.PointMassForce_SetStart(self, id, index, quantity, totalSize)

    def GetTorquesForSpacecraft(self, sc):
        return _gmat_py.PointMassForce_GetTorquesForSpacecraft(self, sc)

    def HasLocalClones(self):
        return _gmat_py.PointMassForce_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.PointMassForce_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PointMassForce_SetClass(base)

# Register PointMassForce in _gmat_py:
_gmat_py.PointMassForce_swigregister(PointMassForce)
class RelativisticCorrection(PhysicalModel):
    r"""
    This is the RelativisticCorrection class.

    Notes: original prolog information included at end of file prolog.

    Relativistic correction model -- models the relativistic correction
    for the ODEModel.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RelativisticCorrection

    def __init__(self, *args):
        _gmat_py.RelativisticCorrection_swiginit(self, _gmat_py.new_RelativisticCorrection(*args))

    def Initialize(self):
        return _gmat_py.RelativisticCorrection_Initialize(self)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.RelativisticCorrection_GetDerivatives(self, state, dt, order, id)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.RelativisticCorrection_GetDerivativesForSpacecraft(self, sc)

    def SetEopFile(self, eopF):
        return _gmat_py.RelativisticCorrection_SetEopFile(self, eopF)

    def Clone(self):
        return _gmat_py.RelativisticCorrection_Clone(self)

    def GetParameterText(self, id):
        return _gmat_py.RelativisticCorrection_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.RelativisticCorrection_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.RelativisticCorrection_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.RelativisticCorrection_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.RelativisticCorrection_IsParameterReadOnly(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.RelativisticCorrection_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.RelativisticCorrection_SetRealParameter(self, id, value)

    def SupportsDerivative(self, id):
        return _gmat_py.RelativisticCorrection_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, sizeOfType):
        return _gmat_py.RelativisticCorrection_SetStart(self, id, index, quantity, sizeOfType)

    def HasLocalClones(self):
        return _gmat_py.RelativisticCorrection_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.RelativisticCorrection_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RelativisticCorrection_SetClass(base)

# Register RelativisticCorrection in _gmat_py:
_gmat_py.RelativisticCorrection_swigregister(RelativisticCorrection)
class SolarRadiationPressure(PhysicalModel):
    r"""
    This is the SolarRadiationPressure class.

    Notes: original prolog information included at end of file prolog.

    Solar radiation pressure model -- currently incomplete

    This class models solar radiation pressure.  The current implementation
    builds a force directed along the x-axis with magnitude equal to a nominal
    SRP acceleration.  The force toggles on and off at 40 minute intervals.

    Note that this is **NOT** an implementation of Solar Radiation Pressure
    in its current form because (1) the force is not applied in the correct
    direction and (2) the magnitude of the force does bot change with distance
    from the Sun.  The current implementation is used solely to test
    discontinuities in the force model.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SolarRadiationPressure

    def __init__(self, *args):
        _gmat_py.SolarRadiationPressure_swiginit(self, _gmat_py.new_SolarRadiationPressure(*args))

    def IsUnique(self, *args):
        return _gmat_py.SolarRadiationPressure_IsUnique(self, *args)

    def Initialize(self):
        return _gmat_py.SolarRadiationPressure_Initialize(self)

    def SetCentralBody(self):
        return _gmat_py.SolarRadiationPressure_SetCentralBody(self)

    def GetDerivatives(self, state, dt=0.0, order=1, id=-1):
        return _gmat_py.SolarRadiationPressure_GetDerivatives(self, state, dt, order, id)

    def GetDerivativesForSpacecraft(self, sc):
        return _gmat_py.SolarRadiationPressure_GetDerivativesForSpacecraft(self, sc)

    def Clone(self):
        return _gmat_py.SolarRadiationPressure_Clone(self)

    def GetParameterText(self, id):
        return _gmat_py.SolarRadiationPressure_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SolarRadiationPressure_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SolarRadiationPressure_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SolarRadiationPressure_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.SolarRadiationPressure_IsParameterReadOnly(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.SolarRadiationPressure_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.SolarRadiationPressure_SetRealParameter(self, id, value)

    def GetBooleanParameter(self, id):
        return _gmat_py.SolarRadiationPressure_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.SolarRadiationPressure_SetBooleanParameter(self, id, value)

    def GetIntegerParameter(self, id):
        return _gmat_py.SolarRadiationPressure_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.SolarRadiationPressure_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.SolarRadiationPressure_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.SolarRadiationPressure_SetStringParameter(self, *args)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.SolarRadiationPressure_GetPropertyEnumStrings(self, id)

    def SetSatelliteParameter(self, *args):
        return _gmat_py.SolarRadiationPressure_SetSatelliteParameter(self, *args)

    def ClearSatelliteParameters(self, *args):
        return _gmat_py.SolarRadiationPressure_ClearSatelliteParameters(self, *args)

    def AttitudeAffectsDynamics(self):
        return _gmat_py.SolarRadiationPressure_AttitudeAffectsDynamics(self)

    def SupportsDerivative(self, id):
        return _gmat_py.SolarRadiationPressure_SupportsDerivative(self, id)

    def SetStart(self, id, index, quantity, totalSize):
        return _gmat_py.SolarRadiationPressure_SetStart(self, id, index, quantity, totalSize)

    def GetTorquesForSpacecraft(self, sc):
        return _gmat_py.SolarRadiationPressure_GetTorquesForSpacecraft(self, sc)

    def HasLocalClones(self):
        return _gmat_py.SolarRadiationPressure_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.SolarRadiationPressure_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SolarRadiationPressure_SetClass(base)

# Register SolarRadiationPressure in _gmat_py:
_gmat_py.SolarRadiationPressure_swigregister(SolarRadiationPressure)
class Harmonic(object):
    r"""
    This is the base class for the Harmonic set of classes (HarmonicGravity,
    etc.).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Harmonic

    def Cnm(self, jday, n, m):
        return _gmat_py.Harmonic_Cnm(self, jday, n, m)

    def Snm(self, jday, n, m):
        return _gmat_py.Harmonic_Snm(self, jday, n, m)

    def GetNN(self):
        return _gmat_py.Harmonic_GetNN(self)

    def GetMM(self):
        return _gmat_py.Harmonic_GetMM(self)

    def GetFieldRadius(self):
        return _gmat_py.Harmonic_GetFieldRadius(self)

    def GetFactor(self):
        return _gmat_py.Harmonic_GetFactor(self)

    def CalculateField(self, jday, pos, nn, mm, fillgradient, gradientlimit, acc, gradient):
        return _gmat_py.Harmonic_CalculateField(self, jday, pos, nn, mm, fillgradient, gradientlimit, acc, gradient)

# Register Harmonic in _gmat_py:
_gmat_py.Harmonic_swigregister(Harmonic)
class HarmonicValue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.HarmonicValue_swiginit(self, _gmat_py.new_HarmonicValue(*args))
    N = property(_gmat_py.HarmonicValue_N_get, _gmat_py.HarmonicValue_N_set)
    M = property(_gmat_py.HarmonicValue_M_get, _gmat_py.HarmonicValue_M_set)
    C = property(_gmat_py.HarmonicValue_C_get, _gmat_py.HarmonicValue_C_set)
    S = property(_gmat_py.HarmonicValue_S_get, _gmat_py.HarmonicValue_S_set)
    __swig_destroy__ = _gmat_py.delete_HarmonicValue

# Register HarmonicValue in _gmat_py:
_gmat_py.HarmonicValue_swigregister(HarmonicValue)
LoveMax = cvar.LoveMax

class HarmonicGravity(Harmonic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename, tideFilename, radius, mukm, bodyname, loadCoefficients):
        _gmat_py.HarmonicGravity_swiginit(self, _gmat_py.new_HarmonicGravity(filename, tideFilename, radius, mukm, bodyname, loadCoefficients))
    __swig_destroy__ = _gmat_py.delete_HarmonicGravity

    def GetFilename(self):
        return _gmat_py.HarmonicGravity_GetFilename(self)

    def GetTideFilename(self):
        return _gmat_py.HarmonicGravity_GetTideFilename(self)

    def GetBodyName(self):
        return _gmat_py.HarmonicGravity_GetBodyName(self)

    def HaveTideModel(self, etide):
        return _gmat_py.HarmonicGravity_HaveTideModel(self, etide)

    def IsTideFree(self):
        return _gmat_py.HarmonicGravity_IsTideFree(self)

    def IsZeroTide(self):
        return _gmat_py.HarmonicGravity_IsZeroTide(self)

    def TideString(self):
        return _gmat_py.HarmonicGravity_TideString(self)

    def Cnm(self, jday, n, m):
        return _gmat_py.HarmonicGravity_Cnm(self, jday, n, m)

    def Snm(self, jday, n, m):
        return _gmat_py.HarmonicGravity_Snm(self, jday, n, m)

    def CalculatePointField(self, jday, pos, nn, mm, fillgradient, gradientlimit, acc, gradient):
        return _gmat_py.HarmonicGravity_CalculatePointField(self, jday, pos, nn, mm, fillgradient, gradientlimit, acc, gradient)

    def CalculateFullField(self, jday, pos, nn, mm, tidelevel, sunpos, sunmukm, otherpos, othermukm, xp, yp, fillgradient, gradientlimit, acc, gradient):
        return _gmat_py.HarmonicGravity_CalculateFullField(self, jday, pos, nn, mm, tidelevel, sunpos, sunmukm, otherpos, othermukm, xp, yp, fillgradient, gradientlimit, acc, gradient)

    def AddZeroTide(self, n, m, c, s):
        return _gmat_py.HarmonicGravity_AddZeroTide(self, n, m, c, s)

    def WriteCofFile(self, filename):
        return _gmat_py.HarmonicGravity_WriteCofFile(self, filename)
    NoTide = _gmat_py.HarmonicGravity_NoTide
    Solid = _gmat_py.HarmonicGravity_Solid
    SolidAndPole = _gmat_py.HarmonicGravity_SolidAndPole

    @staticmethod
    def SetClass(base):
        return _gmat_py.HarmonicGravity_SetClass(base)

# Register HarmonicGravity in _gmat_py:
_gmat_py.HarmonicGravity_swigregister(HarmonicGravity)
HarmonicGravity.ETideString = _gmat_py.cvar.HarmonicGravity_ETideString
HarmonicGravity.ETideCount = _gmat_py.cvar.HarmonicGravity_ETideCount

class MathNode(GmatBase):
    r"""
    Defines the MathNode base class for Math in scripts.

    All function classes are derived from this base class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_MathNode

    def IsFunction(self):
        return _gmat_py.MathNode_IsFunction(self)

    def IsNumber(self):
        return _gmat_py.MathNode_IsNumber(self)

    def IsFunctionInput(self):
        return _gmat_py.MathNode_IsFunctionInput(self)

    def SetNumberFlag(self, flag):
        return _gmat_py.MathNode_SetNumberFlag(self, flag)

    def SetFunctionInputFlag(self, flag):
        return _gmat_py.MathNode_SetFunctionInputFlag(self, flag)

    def GetElementType(self):
        return _gmat_py.MathNode_GetElementType(self)

    def GetRealValue(self):
        return _gmat_py.MathNode_GetRealValue(self)

    def GetMatrixValue(self):
        return _gmat_py.MathNode_GetMatrixValue(self)

    def SetRealValue(self, val):
        return _gmat_py.MathNode_SetRealValue(self, val)

    def SetMatrixValue(self, mat):
        return _gmat_py.MathNode_SetMatrixValue(self, mat)

    def SetMathWrappers(self, wrapperMap):
        return _gmat_py.MathNode_SetMathWrappers(self, wrapperMap)

    def EvaluateObject(self):
        return _gmat_py.MathNode_EvaluateObject(self)

    def EvaluateString(self):
        return _gmat_py.MathNode_EvaluateString(self)

    def ValidateInputs(self):
        return _gmat_py.MathNode_ValidateInputs(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.MathNode_GetOutputInfo(self, type, rowCount, colCount)

    def Evaluate(self):
        return _gmat_py.MathNode_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.MathNode_MatrixEvaluate(self)

    def SetChildren(self, leftChild, rightChild):
        return _gmat_py.MathNode_SetChildren(self, leftChild, rightChild)

    def GetLeft(self):
        return _gmat_py.MathNode_GetLeft(self)

    def GetRight(self):
        return _gmat_py.MathNode_GetRight(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.MathNode_RenameRefObject(self, type, oldName, newName)

    def HasLocalClones(self):
        return _gmat_py.MathNode_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MathNode_SetClass(base)

# Register MathNode in _gmat_py:
_gmat_py.MathNode_swigregister(MathNode)
class MathFunction(MathNode):
    r"""Defines the Math functions class for Math in scripts."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_MathFunction

    def Evaluate(self):
        return _gmat_py.MathFunction_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.MathFunction_MatrixEvaluate(self)

    def SetChildren(self, leftChild, rightChild):
        return _gmat_py.MathFunction_SetChildren(self, leftChild, rightChild)

    def GetLeft(self):
        return _gmat_py.MathFunction_GetLeft(self)

    def GetRight(self):
        return _gmat_py.MathFunction_GetRight(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MathFunction_SetClass(base)

# Register MathFunction in _gmat_py:
_gmat_py.MathFunction_swigregister(MathFunction)
class Abs(MathFunction):
    r"""Declares Abs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Abs

    def __init__(self, *args):
        _gmat_py.Abs_swiginit(self, _gmat_py.new_Abs(*args))

    def Clone(self):
        return _gmat_py.Abs_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Abs_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Abs_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Abs_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Abs_SetClass(base)

# Register Abs in _gmat_py:
_gmat_py.Abs_swigregister(Abs)
class Acos(MathFunction):
    r"""Declares Acos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Acos

    def __init__(self, *args):
        _gmat_py.Acos_swiginit(self, _gmat_py.new_Acos(*args))

    def Clone(self):
        return _gmat_py.Acos_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Acos_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Acos_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Acos_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Acos_SetClass(base)

# Register Acos in _gmat_py:
_gmat_py.Acos_swigregister(Acos)
class Acosh(MathFunction):
    r"""Declares Acosh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Acosh

    def __init__(self, *args):
        _gmat_py.Acosh_swiginit(self, _gmat_py.new_Acosh(*args))

    def Clone(self):
        return _gmat_py.Acosh_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Acosh_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Acosh_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Acosh_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Acosh_SetClass(base)

# Register Acosh in _gmat_py:
_gmat_py.Acosh_swigregister(Acosh)
class Add(MathFunction):
    r"""Declares Add class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Add

    def __init__(self, *args):
        _gmat_py.Add_swiginit(self, _gmat_py.new_Add(*args))

    def Clone(self):
        return _gmat_py.Add_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Add_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Add_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Add_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.Add_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Add_SetClass(base)

# Register Add in _gmat_py:
_gmat_py.Add_swigregister(Add)
class Asin(MathFunction):
    r"""Declares Asin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Asin

    def __init__(self, *args):
        _gmat_py.Asin_swiginit(self, _gmat_py.new_Asin(*args))

    def Clone(self):
        return _gmat_py.Asin_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Asin_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Asin_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Asin_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Asin_SetClass(base)

# Register Asin in _gmat_py:
_gmat_py.Asin_swigregister(Asin)
class Asinh(MathFunction):
    r"""Declares Asinh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Asinh

    def __init__(self, *args):
        _gmat_py.Asinh_swiginit(self, _gmat_py.new_Asinh(*args))

    def Clone(self):
        return _gmat_py.Asinh_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Asinh_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Asinh_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Asinh_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Asinh_SetClass(base)

# Register Asinh in _gmat_py:
_gmat_py.Asinh_swigregister(Asinh)
class Atan(MathFunction):
    r"""Declares Atan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Atan

    def __init__(self, *args):
        _gmat_py.Atan_swiginit(self, _gmat_py.new_Atan(*args))

    def Clone(self):
        return _gmat_py.Atan_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Atan_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Atan_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Atan_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Atan_SetClass(base)

# Register Atan in _gmat_py:
_gmat_py.Atan_swigregister(Atan)
class Atan2(MathFunction):
    r"""Declares Atan2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Atan2

    def __init__(self, *args):
        _gmat_py.Atan2_swiginit(self, _gmat_py.new_Atan2(*args))

    def Clone(self):
        return _gmat_py.Atan2_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Atan2_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Atan2_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Atan2_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Atan2_SetClass(base)

# Register Atan2 in _gmat_py:
_gmat_py.Atan2_swigregister(Atan2)
class Cos(MathFunction):
    r"""Declares Cos class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Cos

    def __init__(self, *args):
        _gmat_py.Cos_swiginit(self, _gmat_py.new_Cos(*args))

    def Clone(self):
        return _gmat_py.Cos_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Cos_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Cos_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Cos_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Cos_SetClass(base)

# Register Cos in _gmat_py:
_gmat_py.Cos_swigregister(Cos)
class Cosh(MathFunction):
    r"""Declares Cosh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Cosh

    def __init__(self, *args):
        _gmat_py.Cosh_swiginit(self, _gmat_py.new_Cosh(*args))

    def Clone(self):
        return _gmat_py.Cosh_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Cosh_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Cosh_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Cosh_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Cosh_SetClass(base)

# Register Cosh in _gmat_py:
_gmat_py.Cosh_swigregister(Cosh)
class DegToRad(MathFunction):
    r"""Declares DegToRad class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_DegToRad

    def __init__(self, *args):
        _gmat_py.DegToRad_swiginit(self, _gmat_py.new_DegToRad(*args))

    def Clone(self):
        return _gmat_py.DegToRad_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.DegToRad_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.DegToRad_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.DegToRad_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.DegToRad_SetClass(base)

# Register DegToRad in _gmat_py:
_gmat_py.DegToRad_swigregister(DegToRad)
class Determinant(MathFunction):
    r"""Declares Determinant class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Determinant

    def __init__(self, *args):
        _gmat_py.Determinant_swiginit(self, _gmat_py.new_Determinant(*args))

    def Clone(self):
        return _gmat_py.Determinant_Clone(self)

    def ValidateInputs(self):
        return _gmat_py.Determinant_ValidateInputs(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Determinant_GetOutputInfo(self, type, rowCount, colCount)

    def Evaluate(self):
        return _gmat_py.Determinant_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Determinant_SetClass(base)

# Register Determinant in _gmat_py:
_gmat_py.Determinant_swigregister(Determinant)
class Divide(MathFunction):
    r"""Declares Divide class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Divide

    def __init__(self, *args):
        _gmat_py.Divide_swiginit(self, _gmat_py.new_Divide(*args))

    def Clone(self):
        return _gmat_py.Divide_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Divide_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Divide_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Divide_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.Divide_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Divide_SetClass(base)

# Register Divide in _gmat_py:
_gmat_py.Divide_swigregister(Divide)
class FunctionRunner(MathFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_FunctionRunner

    def __init__(self, *args):
        _gmat_py.FunctionRunner_swiginit(self, _gmat_py.new_FunctionRunner(*args))

    def SetFunctionName(self, fname):
        return _gmat_py.FunctionRunner_SetFunctionName(self, fname)

    def SetFunction(self, function):
        return _gmat_py.FunctionRunner_SetFunction(self, function)

    def AddFunctionInput(self, name):
        return _gmat_py.FunctionRunner_AddFunctionInput(self, name)

    def SetFunctionInputs(self):
        return _gmat_py.FunctionRunner_SetFunctionInputs(self)

    def GetInputs(self):
        return _gmat_py.FunctionRunner_GetInputs(self)

    def AddInputNode(self, node):
        return _gmat_py.FunctionRunner_AddInputNode(self, node)

    def AddFunctionOutput(self, name):
        return _gmat_py.FunctionRunner_AddFunctionOutput(self, name)

    def SetFunctionOutputs(self):
        return _gmat_py.FunctionRunner_SetFunctionOutputs(self)

    def SetCallingFunction(self, fm):
        return _gmat_py.FunctionRunner_SetCallingFunction(self, fm)

    def SetObjectMap(self, map):
        return _gmat_py.FunctionRunner_SetObjectMap(self, map)

    def SetGlobalObjectMap(self, map):
        return _gmat_py.FunctionRunner_SetGlobalObjectMap(self, map)

    def SetSolarSystem(self, ss):
        return _gmat_py.FunctionRunner_SetSolarSystem(self, ss)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.FunctionRunner_SetInternalCoordSystem(self, cs)

    def SetTransientForces(self, tf):
        return _gmat_py.FunctionRunner_SetTransientForces(self, tf)

    def SetPublisher(self, pub):
        return _gmat_py.FunctionRunner_SetPublisher(self, pub)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.FunctionRunner_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.FunctionRunner_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.FunctionRunner_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.FunctionRunner_MatrixEvaluate(self)

    def EvaluateObject(self):
        return _gmat_py.FunctionRunner_EvaluateObject(self)

    def Finalize(self):
        return _gmat_py.FunctionRunner_Finalize(self)

    def Clone(self):
        return _gmat_py.FunctionRunner_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.FunctionRunner_SetClass(base)

# Register FunctionRunner in _gmat_py:
_gmat_py.FunctionRunner_swigregister(FunctionRunner)
class Inverse(MathFunction):
    r"""Declares Inverse class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Inverse

    def __init__(self, *args):
        _gmat_py.Inverse_swiginit(self, _gmat_py.new_Inverse(*args))

    def Clone(self):
        return _gmat_py.Inverse_Clone(self)

    def Evaluate(self):
        return _gmat_py.Inverse_Evaluate(self)

    def ValidateInputs(self):
        return _gmat_py.Inverse_ValidateInputs(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Inverse_GetOutputInfo(self, type, rowCount, colCount)

    def MatrixEvaluate(self):
        return _gmat_py.Inverse_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Inverse_SetClass(base)

# Register Inverse in _gmat_py:
_gmat_py.Inverse_swigregister(Inverse)
class Log(MathFunction):
    r"""Declares Log class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Log

    def __init__(self, *args):
        _gmat_py.Log_swiginit(self, _gmat_py.new_Log(*args))

    def Clone(self):
        return _gmat_py.Log_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Log_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Log_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Log_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Log_SetClass(base)

# Register Log in _gmat_py:
_gmat_py.Log_swigregister(Log)
class MathElement(MathNode):
    r"""Defines the Math elements class for Math in scripts."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_MathElement

    def __init__(self, *args):
        _gmat_py.MathElement_swiginit(self, _gmat_py.new_MathElement(*args))

    def SetMathWrappers(self, wrapperMap):
        return _gmat_py.MathElement_SetMathWrappers(self, wrapperMap)

    def SetMatrixValue(self, mat):
        return _gmat_py.MathElement_SetMatrixValue(self, mat)

    def ValidateInputs(self):
        return _gmat_py.MathElement_ValidateInputs(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.MathElement_GetOutputInfo(self, type, rowCount, colCount)

    def SetChildren(self, leftChild, rightChild):
        return _gmat_py.MathElement_SetChildren(self, leftChild, rightChild)

    def GetLeft(self):
        return _gmat_py.MathElement_GetLeft(self)

    def GetRight(self):
        return _gmat_py.MathElement_GetRight(self)

    def Evaluate(self):
        return _gmat_py.MathElement_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.MathElement_MatrixEvaluate(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.MathElement_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.MathElement_Clone(self)

    def GetRefObject(self, type, name):
        return _gmat_py.MathElement_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.MathElement_SetRefObject(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.MathElement_GetRefObjectName(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.MathElement_SetRefObjectName(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.MathElement_GetRefObjectNameArray(self, type)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MathElement_SetClass(base)

# Register MathElement in _gmat_py:
_gmat_py.MathElement_swigregister(MathElement)
class Multiply(MathFunction):
    r"""Declares Multiply class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Multiply

    def __init__(self, *args):
        _gmat_py.Multiply_swiginit(self, _gmat_py.new_Multiply(*args))

    def Clone(self):
        return _gmat_py.Multiply_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Multiply_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Multiply_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Multiply_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.Multiply_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Multiply_SetClass(base)

# Register Multiply in _gmat_py:
_gmat_py.Multiply_swigregister(Multiply)
class Negate(MathFunction):
    r"""Declares Negate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Negate

    def __init__(self, *args):
        _gmat_py.Negate_swiginit(self, _gmat_py.new_Negate(*args))

    def Clone(self):
        return _gmat_py.Negate_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Negate_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Negate_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Negate_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.Negate_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Negate_SetClass(base)

# Register Negate in _gmat_py:
_gmat_py.Negate_swigregister(Negate)
class Norm(MathFunction):
    r"""Declares Norm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Norm

    def __init__(self, *args):
        _gmat_py.Norm_swiginit(self, _gmat_py.new_Norm(*args))

    def Clone(self):
        return _gmat_py.Norm_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Norm_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Norm_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Norm_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Norm_SetClass(base)

# Register Norm in _gmat_py:
_gmat_py.Norm_swigregister(Norm)
class Power(MathFunction):
    r"""Declares Power class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Power

    def __init__(self, *args):
        _gmat_py.Power_swiginit(self, _gmat_py.new_Power(*args))

    def Clone(self):
        return _gmat_py.Power_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Power_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Power_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Power_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Power_SetClass(base)

# Register Power in _gmat_py:
_gmat_py.Power_swigregister(Power)
class RadToDeg(MathFunction):
    r"""Declares RadToDeg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RadToDeg

    def __init__(self, *args):
        _gmat_py.RadToDeg_swiginit(self, _gmat_py.new_RadToDeg(*args))

    def Clone(self):
        return _gmat_py.RadToDeg_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.RadToDeg_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.RadToDeg_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.RadToDeg_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RadToDeg_SetClass(base)

# Register RadToDeg in _gmat_py:
_gmat_py.RadToDeg_swigregister(RadToDeg)
class Sin(MathFunction):
    r"""Declares Sin class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Sin

    def __init__(self, *args):
        _gmat_py.Sin_swiginit(self, _gmat_py.new_Sin(*args))

    def Clone(self):
        return _gmat_py.Sin_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Sin_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Sin_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Sin_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Sin_SetClass(base)

# Register Sin in _gmat_py:
_gmat_py.Sin_swigregister(Sin)
class Sinh(MathFunction):
    r"""Declares Sinh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Sinh

    def __init__(self, *args):
        _gmat_py.Sinh_swiginit(self, _gmat_py.new_Sinh(*args))

    def Clone(self):
        return _gmat_py.Sinh_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Sinh_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Sinh_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Sinh_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Sinh_SetClass(base)

# Register Sinh in _gmat_py:
_gmat_py.Sinh_swigregister(Sinh)
class Subtract(MathFunction):
    r"""Declares Subtract class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Subtract

    def __init__(self, *args):
        _gmat_py.Subtract_swiginit(self, _gmat_py.new_Subtract(*args))

    def Clone(self):
        return _gmat_py.Subtract_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Subtract_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Subtract_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Subtract_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.Subtract_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Subtract_SetClass(base)

# Register Subtract in _gmat_py:
_gmat_py.Subtract_swigregister(Subtract)
class Tan(MathFunction):
    r"""Declares Tan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Tan

    def __init__(self, *args):
        _gmat_py.Tan_swiginit(self, _gmat_py.new_Tan(*args))

    def Clone(self):
        return _gmat_py.Tan_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Tan_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Tan_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Tan_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Tan_SetClass(base)

# Register Tan in _gmat_py:
_gmat_py.Tan_swigregister(Tan)
class Tanh(MathFunction):
    r"""Declares Tanh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Tanh

    def __init__(self, *args):
        _gmat_py.Tanh_swiginit(self, _gmat_py.new_Tanh(*args))

    def Clone(self):
        return _gmat_py.Tanh_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Tanh_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Tanh_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Tanh_Evaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Tanh_SetClass(base)

# Register Tanh in _gmat_py:
_gmat_py.Tanh_swigregister(Tanh)
class Transpose(MathFunction):
    r"""Declares Transpose class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Transpose

    def __init__(self, *args):
        _gmat_py.Transpose_swiginit(self, _gmat_py.new_Transpose(*args))

    def Clone(self):
        return _gmat_py.Transpose_Clone(self)

    def GetOutputInfo(self, type, rowCount, colCount):
        return _gmat_py.Transpose_GetOutputInfo(self, type, rowCount, colCount)

    def ValidateInputs(self):
        return _gmat_py.Transpose_ValidateInputs(self)

    def Evaluate(self):
        return _gmat_py.Transpose_Evaluate(self)

    def MatrixEvaluate(self):
        return _gmat_py.Transpose_MatrixEvaluate(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Transpose_SetClass(base)

# Register Transpose in _gmat_py:
_gmat_py.Transpose_swigregister(Transpose)
class BodyFixedPoint(SpacePoint):
    r"""Defines the BodyFixedPoint class used to model body-fixed space points."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BodyFixedPoint

    def __init__(self, *args):
        _gmat_py.BodyFixedPoint_swiginit(self, _gmat_py.new_BodyFixedPoint(*args))

    def Initialize(self):
        return _gmat_py.BodyFixedPoint_Initialize(self)

    def GetEpoch(self):
        return _gmat_py.BodyFixedPoint_GetEpoch(self)

    def SetEpoch(self, ep):
        return _gmat_py.BodyFixedPoint_SetEpoch(self, ep)

    def GetLastState(self):
        return _gmat_py.BodyFixedPoint_GetLastState(self)

    def Copy(self, orig):
        return _gmat_py.BodyFixedPoint_Copy(self, orig)

    def GetParameterText(self, id):
        return _gmat_py.BodyFixedPoint_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.BodyFixedPoint_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.BodyFixedPoint_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.BodyFixedPoint_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.BodyFixedPoint_IsParameterReadOnly(self, *args)

    def GetPropertyObjectType(self, id):
        return _gmat_py.BodyFixedPoint_GetPropertyObjectType(self, id)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.BodyFixedPoint_GetPropertyEnumStrings(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.BodyFixedPoint_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.BodyFixedPoint_SetStringParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.BodyFixedPoint_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.BodyFixedPoint_SetRealParameter(self, *args)

    def GetRefObject(self, *args):
        return _gmat_py.BodyFixedPoint_GetRefObject(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.BodyFixedPoint_SetRefObject(self, *args)

    def HasRefObjectTypeArray(self):
        return _gmat_py.BodyFixedPoint_HasRefObjectTypeArray(self)

    def GetRefObjectName(self, type):
        return _gmat_py.BodyFixedPoint_GetRefObjectName(self, type)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.BodyFixedPoint_GetRefObjectNameArray(self, type)

    def GetRefObjectTypeArray(self):
        return _gmat_py.BodyFixedPoint_GetRefObjectTypeArray(self)

    def GetMJ2000State(self, *args):
        return _gmat_py.BodyFixedPoint_GetMJ2000State(self, *args)

    def GetMJ2000Position(self, *args):
        return _gmat_py.BodyFixedPoint_GetMJ2000Position(self, *args)

    def GetMJ2000Velocity(self, *args):
        return _gmat_py.BodyFixedPoint_GetMJ2000Velocity(self, *args)

    def GetBodyFixedLocation(self, atTime):
        return _gmat_py.BodyFixedPoint_GetBodyFixedLocation(self, atTime)

    def GetSphericalLocation(self, atTime):
        return _gmat_py.BodyFixedPoint_GetSphericalLocation(self, atTime)

    def GetBodyFixedCoordinateSystem(self):
        return _gmat_py.BodyFixedPoint_GetBodyFixedCoordinateSystem(self)

    def SetSolarSystem(self, ss):
        return _gmat_py.BodyFixedPoint_SetSolarSystem(self, ss)

    def IsValidID(self, id):
        return _gmat_py.BodyFixedPoint_IsValidID(self, id)

    def InitializeForContactLocation(self, deleteFiles=True):
        return _gmat_py.BodyFixedPoint_InitializeForContactLocation(self, deleteFiles)

    def Clone(self):
        return _gmat_py.BodyFixedPoint_Clone(self)

    def GetCentralBody(self):
        return _gmat_py.BodyFixedPoint_GetCentralBody(self)

    def HasLocalClones(self):
        return _gmat_py.BodyFixedPoint_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.BodyFixedPoint_RenameRefObject(self, type, oldName, newName)
    CENTRAL_BODY = _gmat_py.BodyFixedPoint_CENTRAL_BODY
    STATE_TYPE = _gmat_py.BodyFixedPoint_STATE_TYPE
    HORIZON_REFERENCE = _gmat_py.BodyFixedPoint_HORIZON_REFERENCE
    LOCATION_1 = _gmat_py.BodyFixedPoint_LOCATION_1
    LOCATION_2 = _gmat_py.BodyFixedPoint_LOCATION_2
    LOCATION_3 = _gmat_py.BodyFixedPoint_LOCATION_3
    LOCATION_LABEL_1 = _gmat_py.BodyFixedPoint_LOCATION_LABEL_1
    LOCATION_LABEL_2 = _gmat_py.BodyFixedPoint_LOCATION_LABEL_2
    LOCATION_LABEL_3 = _gmat_py.BodyFixedPoint_LOCATION_LABEL_3
    LOCATION_UNITS_1 = _gmat_py.BodyFixedPoint_LOCATION_UNITS_1
    LOCATION_UNITS_2 = _gmat_py.BodyFixedPoint_LOCATION_UNITS_2
    LOCATION_UNITS_3 = _gmat_py.BodyFixedPoint_LOCATION_UNITS_3
    BodyFixedPointParamCount = _gmat_py.BodyFixedPoint_BodyFixedPointParamCount

    @staticmethod
    def SetClass(base):
        return _gmat_py.BodyFixedPoint_SetClass(base)

# Register BodyFixedPoint in _gmat_py:
_gmat_py.BodyFixedPoint_swigregister(BodyFixedPoint)
BodyFixedPoint.PARAMETER_TEXT = _gmat_py.cvar.BodyFixedPoint_PARAMETER_TEXT
BodyFixedPoint.PARAMETER_TYPE = _gmat_py.cvar.BodyFixedPoint_PARAMETER_TYPE

class GroundstationInterface(BodyFixedPoint):
    r"""
    Proxy code for Groundstation objects, used to define interfaces implemented
    in the Groundstation plugin.

    Defines interfaces used in the Groundstation, contained in libStation.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_GroundstationInterface

    def IsValidElevationAngle(self, state_sez):
        return _gmat_py.GroundstationInterface_IsValidElevationAngle(self, state_sez)

    def CreateErrorModelForSignalPath(self, spacecraftName, spacecraftId):
        return _gmat_py.GroundstationInterface_CreateErrorModelForSignalPath(self, spacecraftName, spacecraftId)

    def GetErrorModelMap(self):
        return _gmat_py.GroundstationInterface_GetErrorModelMap(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.GroundstationInterface_SetClass(base)

# Register GroundstationInterface in _gmat_py:
_gmat_py.GroundstationInterface_swigregister(GroundstationInterface)
NOT_USED = _gmat_py.NOT_USED
OPTIONAL_USE = _gmat_py.OPTIONAL_USE
REQUIRED = _gmat_py.REQUIRED
REQUIRED_UNMODIFIABLE = _gmat_py.REQUIRED_UNMODIFIABLE
class CoordinateBase(GmatBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CoordinateBase

    def SetSolarSystem(self, ss):
        return _gmat_py.CoordinateBase_SetSolarSystem(self, ss)

    def SetOriginName(self, toName):
        return _gmat_py.CoordinateBase_SetOriginName(self, toName)

    def SetOrigin(self, originPtr):
        return _gmat_py.CoordinateBase_SetOrigin(self, originPtr)

    def RequiresJ2000Body(self):
        return _gmat_py.CoordinateBase_RequiresJ2000Body(self)

    def SetJ2000BodyName(self, toName):
        return _gmat_py.CoordinateBase_SetJ2000BodyName(self, toName)

    def SetJ2000Body(self, j2000Ptr):
        return _gmat_py.CoordinateBase_SetJ2000Body(self, j2000Ptr)

    def GetSolarSystem(self):
        return _gmat_py.CoordinateBase_GetSolarSystem(self)

    def GetOriginName(self):
        return _gmat_py.CoordinateBase_GetOriginName(self)

    def GetOrigin(self):
        return _gmat_py.CoordinateBase_GetOrigin(self)

    def GetJ2000BodyName(self):
        return _gmat_py.CoordinateBase_GetJ2000BodyName(self)

    def GetJ2000Body(self):
        return _gmat_py.CoordinateBase_GetJ2000Body(self)

    def GetLastRotationMatrix(self):
        return _gmat_py.CoordinateBase_GetLastRotationMatrix(self)

    def GetDerivativeOfLastRotationMatrix(self):
        return _gmat_py.CoordinateBase_GetDerivativeOfLastRotationMatrix(self)

    def UsesEopFile(self, *args):
        return _gmat_py.CoordinateBase_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.CoordinateBase_UsesItrfFile(self)

    def UsesEpoch(self):
        return _gmat_py.CoordinateBase_UsesEpoch(self)

    def UsesPrimary(self):
        return _gmat_py.CoordinateBase_UsesPrimary(self)

    def UsesSecondary(self):
        return _gmat_py.CoordinateBase_UsesSecondary(self)

    def UsesReferenceObject(self):
        return _gmat_py.CoordinateBase_UsesReferenceObject(self)

    def UsesXAxis(self):
        return _gmat_py.CoordinateBase_UsesXAxis(self)

    def UsesYAxis(self):
        return _gmat_py.CoordinateBase_UsesYAxis(self)

    def UsesZAxis(self):
        return _gmat_py.CoordinateBase_UsesZAxis(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.CoordinateBase_UsesNutationUpdateInterval(self)

    def SetPrimaryObject(self, prim):
        return _gmat_py.CoordinateBase_SetPrimaryObject(self, prim)

    def SetSecondaryObject(self, second):
        return _gmat_py.CoordinateBase_SetSecondaryObject(self, second)

    def SetEpoch(self, toEpoch):
        return _gmat_py.CoordinateBase_SetEpoch(self, toEpoch)

    def SetXAxis(self, toValue):
        return _gmat_py.CoordinateBase_SetXAxis(self, toValue)

    def SetYAxis(self, toValue):
        return _gmat_py.CoordinateBase_SetYAxis(self, toValue)

    def SetZAxis(self, toValue):
        return _gmat_py.CoordinateBase_SetZAxis(self, toValue)

    def SetEopFile(self, eopF):
        return _gmat_py.CoordinateBase_SetEopFile(self, eopF)

    def SetCoefficientsFile(self, itrfF):
        return _gmat_py.CoordinateBase_SetCoefficientsFile(self, itrfF)

    def GetPrimaryObjectName(self):
        return _gmat_py.CoordinateBase_GetPrimaryObjectName(self)

    def GetSecondaryObjectName(self):
        return _gmat_py.CoordinateBase_GetSecondaryObjectName(self)

    def GetReferenceObjectName(self):
        return _gmat_py.CoordinateBase_GetReferenceObjectName(self)

    def GetPrimaryObject(self):
        return _gmat_py.CoordinateBase_GetPrimaryObject(self)

    def GetSecondaryObject(self):
        return _gmat_py.CoordinateBase_GetSecondaryObject(self)

    def GetReferenceObject(self):
        return _gmat_py.CoordinateBase_GetReferenceObject(self)

    def GetEpoch(self):
        return _gmat_py.CoordinateBase_GetEpoch(self)

    def GetXAxis(self):
        return _gmat_py.CoordinateBase_GetXAxis(self)

    def GetYAxis(self):
        return _gmat_py.CoordinateBase_GetYAxis(self)

    def GetZAxis(self):
        return _gmat_py.CoordinateBase_GetZAxis(self)

    def GetEopFile(self):
        return _gmat_py.CoordinateBase_GetEopFile(self)

    def GetItrfCoefficientsFile(self):
        return _gmat_py.CoordinateBase_GetItrfCoefficientsFile(self)

    def Initialize(self):
        return _gmat_py.CoordinateBase_Initialize(self)

    def SetModifyFlag(self, modFlag):
        return _gmat_py.CoordinateBase_SetModifyFlag(self, modFlag)

    def GetModifyFlag(self):
        return _gmat_py.CoordinateBase_GetModifyFlag(self)

    def SetIsBuiltIn(self, builtInFlag):
        return _gmat_py.CoordinateBase_SetIsBuiltIn(self, builtInFlag)

    def IsBuiltIn(self):
        return _gmat_py.CoordinateBase_IsBuiltIn(self)

    def RequiresCelestialBodyOrigin(self):
        return _gmat_py.CoordinateBase_RequiresCelestialBodyOrigin(self)

    def SetAllowWithoutRates(self, allow):
        return _gmat_py.CoordinateBase_SetAllowWithoutRates(self, allow)

    def AllowWithoutRates(self):
        return _gmat_py.CoordinateBase_AllowWithoutRates(self)

    def GetParameterText(self, id):
        return _gmat_py.CoordinateBase_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.CoordinateBase_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.CoordinateBase_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.CoordinateBase_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.CoordinateBase_IsParameterReadOnly(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.CoordinateBase_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.CoordinateBase_SetStringParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.CoordinateBase_GetRefObject(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.CoordinateBase_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.CoordinateBase_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.CoordinateBase_RenameRefObject(self, type, oldName, newName)

    def HasLocalClones(self):
        return _gmat_py.CoordinateBase_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CoordinateBase_SetClass(base)

# Register CoordinateBase in _gmat_py:
_gmat_py.CoordinateBase_swigregister(CoordinateBase)
class CoordinateSystem(CoordinateBase):
    r"""Definition of the CoordinateSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.CoordinateSystem_swiginit(self, _gmat_py.new_CoordinateSystem(*args))

    def __eq__(self, coordSys):
        return _gmat_py.CoordinateSystem___eq__(self, coordSys)
    __swig_destroy__ = _gmat_py.delete_CoordinateSystem

    def GetAxisSystem(self):
        return _gmat_py.CoordinateSystem_GetAxisSystem(self)

    def UsesEopFile(self, *args):
        return _gmat_py.CoordinateSystem_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.CoordinateSystem_UsesItrfFile(self)

    def UsesEpoch(self):
        return _gmat_py.CoordinateSystem_UsesEpoch(self)

    def UsesPrimary(self):
        return _gmat_py.CoordinateSystem_UsesPrimary(self)

    def UsesSecondary(self):
        return _gmat_py.CoordinateSystem_UsesSecondary(self)

    def UsesReferenceObject(self):
        return _gmat_py.CoordinateSystem_UsesReferenceObject(self)

    def UsesXAxis(self):
        return _gmat_py.CoordinateSystem_UsesXAxis(self)

    def UsesYAxis(self):
        return _gmat_py.CoordinateSystem_UsesYAxis(self)

    def UsesZAxis(self):
        return _gmat_py.CoordinateSystem_UsesZAxis(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.CoordinateSystem_UsesNutationUpdateInterval(self)

    def UsesSpacecraft(self, *args):
        return _gmat_py.CoordinateSystem_UsesSpacecraft(self, *args)

    def RequiresCelestialBodyOrigin(self):
        return _gmat_py.CoordinateSystem_RequiresCelestialBodyOrigin(self)

    def HasCelestialBodyOrigin(self):
        return _gmat_py.CoordinateSystem_HasCelestialBodyOrigin(self)

    def SetAllowWithoutRates(self, allow):
        return _gmat_py.CoordinateSystem_SetAllowWithoutRates(self, allow)

    def AllowWithoutRates(self):
        return _gmat_py.CoordinateSystem_AllowWithoutRates(self)

    def IsInertial(self):
        return _gmat_py.CoordinateSystem_IsInertial(self)

    def SetPrimaryObject(self, prim):
        return _gmat_py.CoordinateSystem_SetPrimaryObject(self, prim)

    def SetSecondaryObject(self, second):
        return _gmat_py.CoordinateSystem_SetSecondaryObject(self, second)

    def SetReferenceObject(self, reObj):
        return _gmat_py.CoordinateSystem_SetReferenceObject(self, reObj)

    def SetEpoch(self, toEpoch):
        return _gmat_py.CoordinateSystem_SetEpoch(self, toEpoch)

    def SetXAxis(self, toValue):
        return _gmat_py.CoordinateSystem_SetXAxis(self, toValue)

    def SetYAxis(self, toValue):
        return _gmat_py.CoordinateSystem_SetYAxis(self, toValue)

    def SetZAxis(self, toValue):
        return _gmat_py.CoordinateSystem_SetZAxis(self, toValue)

    def SetEopFile(self, eopF):
        return _gmat_py.CoordinateSystem_SetEopFile(self, eopF)

    def SetCoefficientsFile(self, itrfF):
        return _gmat_py.CoordinateSystem_SetCoefficientsFile(self, itrfF)

    def GetPrimaryObject(self):
        return _gmat_py.CoordinateSystem_GetPrimaryObject(self)

    def GetSecondaryObject(self):
        return _gmat_py.CoordinateSystem_GetSecondaryObject(self)

    def GetReferenceObject(self):
        return _gmat_py.CoordinateSystem_GetReferenceObject(self)

    def GetPrimaryObjectName(self):
        return _gmat_py.CoordinateSystem_GetPrimaryObjectName(self)

    def GetSecondaryObjectName(self):
        return _gmat_py.CoordinateSystem_GetSecondaryObjectName(self)

    def GetReferenceObjectName(self):
        return _gmat_py.CoordinateSystem_GetReferenceObjectName(self)

    def GetEpoch(self):
        return _gmat_py.CoordinateSystem_GetEpoch(self)

    def GetXAxis(self):
        return _gmat_py.CoordinateSystem_GetXAxis(self)

    def GetYAxis(self):
        return _gmat_py.CoordinateSystem_GetYAxis(self)

    def GetZAxis(self):
        return _gmat_py.CoordinateSystem_GetZAxis(self)

    def GetEopFile(self):
        return _gmat_py.CoordinateSystem_GetEopFile(self)

    def GetItrfCoefficientsFile(self):
        return _gmat_py.CoordinateSystem_GetItrfCoefficientsFile(self)

    def GetLastRotationMatrix(self, *args):
        return _gmat_py.CoordinateSystem_GetLastRotationMatrix(self, *args)

    def GetLastRotationDotMatrix(self, *args):
        return _gmat_py.CoordinateSystem_GetLastRotationDotMatrix(self, *args)

    def GetDerivativeOfLastRotationMatrix(self):
        return _gmat_py.CoordinateSystem_GetDerivativeOfLastRotationMatrix(self)

    def AreAxesOfType(self, ofType):
        return _gmat_py.CoordinateSystem_AreAxesOfType(self, ofType)

    def GetBaseSystem(self):
        return _gmat_py.CoordinateSystem_GetBaseSystem(self)

    def Initialize(self):
        return _gmat_py.CoordinateSystem_Initialize(self)

    def SetModifyFlag(self, modFlag):
        return _gmat_py.CoordinateSystem_SetModifyFlag(self, modFlag)

    def ToBaseSystem(self, *args):
        return _gmat_py.CoordinateSystem_ToBaseSystem(self, *args)

    def FromBaseSystem(self, *args):
        return _gmat_py.CoordinateSystem_FromBaseSystem(self, *args)

    def Clone(self):
        return _gmat_py.CoordinateSystem_Clone(self)

    def Copy(self, orig):
        return _gmat_py.CoordinateSystem_Copy(self, orig)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.CoordinateSystem_RenameRefObject(self, type, oldName, newName)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.CoordinateSystem_IsParameterReadOnly(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.CoordinateSystem_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.CoordinateSystem_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.CoordinateSystem_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.CoordinateSystem_GetParameterTypeString(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.CoordinateSystem_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.CoordinateSystem_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.CoordinateSystem_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.CoordinateSystem_SetStringParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.CoordinateSystem_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.CoordinateSystem_SetBooleanParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.CoordinateSystem_GetRefObject(self, type, name)

    def IsOwnedObject(self, id):
        return _gmat_py.CoordinateSystem_IsOwnedObject(self, id)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.CoordinateSystem_GetOwnedObject(self, whichOne)

    def HasRefObjectTypeArray(self):
        return _gmat_py.CoordinateSystem_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.CoordinateSystem_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.CoordinateSystem_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.CoordinateSystem_SetRefObject(self, *args)

    def GetPropertyObjectType(self, id):
        return _gmat_py.CoordinateSystem_GetPropertyObjectType(self, id)

    @staticmethod
    def CreateLocalCoordinateSystem(csName, axesType, origin, primary, secondary, j2000Body, solarSystem, initializeIt=True):
        return _gmat_py.CoordinateSystem_CreateLocalCoordinateSystem(csName, axesType, origin, primary, secondary, j2000Body, solarSystem, initializeIt)

    def SetCalculateRotMatrixDeriv(self, turnOn):
        return _gmat_py.CoordinateSystem_SetCalculateRotMatrixDeriv(self, turnOn)

    def SetForGravityUpdate(self, turnOn):
        return _gmat_py.CoordinateSystem_SetForGravityUpdate(self, turnOn)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CoordinateSystem_SetClass(base)

# Register CoordinateSystem in _gmat_py:
_gmat_py.CoordinateSystem_swigregister(CoordinateSystem)
class AxisSystem(CoordinateBase):
    r"""
    Definition of the AxisSystem class.  This is the base class for the
    InertialAxes and DynamicAxes classes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_AxisSystem

    def UsesEopFile(self, *args):
        return _gmat_py.AxisSystem_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.AxisSystem_UsesItrfFile(self)

    def UsesEpoch(self):
        return _gmat_py.AxisSystem_UsesEpoch(self)

    def UsesPrimary(self):
        return _gmat_py.AxisSystem_UsesPrimary(self)

    def UsesSecondary(self):
        return _gmat_py.AxisSystem_UsesSecondary(self)

    def UsesReferenceObject(self):
        return _gmat_py.AxisSystem_UsesReferenceObject(self)

    def UsesXAxis(self):
        return _gmat_py.AxisSystem_UsesXAxis(self)

    def UsesYAxis(self):
        return _gmat_py.AxisSystem_UsesYAxis(self)

    def UsesZAxis(self):
        return _gmat_py.AxisSystem_UsesZAxis(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.AxisSystem_UsesNutationUpdateInterval(self)

    def UsesSpacecraft(self, *args):
        return _gmat_py.AxisSystem_UsesSpacecraft(self, *args)

    def RequiresCelestialBodyOrigin(self):
        return _gmat_py.AxisSystem_RequiresCelestialBodyOrigin(self)

    def HasCelestialBodyOrigin(self):
        return _gmat_py.AxisSystem_HasCelestialBodyOrigin(self)

    def SetAllowWithoutRates(self, allow):
        return _gmat_py.AxisSystem_SetAllowWithoutRates(self, allow)

    def AllowWithoutRates(self):
        return _gmat_py.AxisSystem_AllowWithoutRates(self)

    def IsInertial(self):
        return _gmat_py.AxisSystem_IsInertial(self)

    def SetPrimaryObject(self, prim):
        return _gmat_py.AxisSystem_SetPrimaryObject(self, prim)

    def SetSecondaryObject(self, second):
        return _gmat_py.AxisSystem_SetSecondaryObject(self, second)

    def SetReferenceObject(self, reObj):
        return _gmat_py.AxisSystem_SetReferenceObject(self, reObj)

    def SetEpoch(self, toEpoch):
        return _gmat_py.AxisSystem_SetEpoch(self, toEpoch)

    def SetXAxis(self, toValue):
        return _gmat_py.AxisSystem_SetXAxis(self, toValue)

    def SetYAxis(self, toValue):
        return _gmat_py.AxisSystem_SetYAxis(self, toValue)

    def SetZAxis(self, toValue):
        return _gmat_py.AxisSystem_SetZAxis(self, toValue)

    def SetEopFile(self, eopF):
        return _gmat_py.AxisSystem_SetEopFile(self, eopF)

    def SetCoefficientsFile(self, itrfF):
        return _gmat_py.AxisSystem_SetCoefficientsFile(self, itrfF)

    def SetEpochFormat(self, fmt):
        return _gmat_py.AxisSystem_SetEpochFormat(self, fmt)

    def GetPrimaryObject(self):
        return _gmat_py.AxisSystem_GetPrimaryObject(self)

    def GetSecondaryObject(self):
        return _gmat_py.AxisSystem_GetSecondaryObject(self)

    def GetReferenceObject(self):
        return _gmat_py.AxisSystem_GetReferenceObject(self)

    def GetPrimaryObjectName(self):
        return _gmat_py.AxisSystem_GetPrimaryObjectName(self)

    def GetSecondaryObjectName(self):
        return _gmat_py.AxisSystem_GetSecondaryObjectName(self)

    def GetReferenceObjectName(self):
        return _gmat_py.AxisSystem_GetReferenceObjectName(self)

    def GetEpoch(self):
        return _gmat_py.AxisSystem_GetEpoch(self)

    def GetXAxis(self):
        return _gmat_py.AxisSystem_GetXAxis(self)

    def GetYAxis(self):
        return _gmat_py.AxisSystem_GetYAxis(self)

    def GetZAxis(self):
        return _gmat_py.AxisSystem_GetZAxis(self)

    def GetEopFile(self):
        return _gmat_py.AxisSystem_GetEopFile(self)

    def GetBaseSystem(self):
        return _gmat_py.AxisSystem_GetBaseSystem(self)

    def GetItrfCoefficientsFile(self):
        return _gmat_py.AxisSystem_GetItrfCoefficientsFile(self)

    def GetEpochFormat(self):
        return _gmat_py.AxisSystem_GetEpochFormat(self)

    def GetLastRotationMatrix(self, *args):
        return _gmat_py.AxisSystem_GetLastRotationMatrix(self, *args)

    def GetLastRotationDotMatrix(self, *args):
        return _gmat_py.AxisSystem_GetLastRotationDotMatrix(self, *args)

    def GetDerivativeOfLastRotationMatrix(self):
        return _gmat_py.AxisSystem_GetDerivativeOfLastRotationMatrix(self)

    def SetCoordinateSystemName(self, csName):
        return _gmat_py.AxisSystem_SetCoordinateSystemName(self, csName)

    def Initialize(self):
        return _gmat_py.AxisSystem_Initialize(self)

    def RotateToBaseSystem(self, *args):
        return _gmat_py.AxisSystem_RotateToBaseSystem(self, *args)

    def RotateFromBaseSystem(self, *args):
        return _gmat_py.AxisSystem_RotateFromBaseSystem(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.AxisSystem_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.AxisSystem_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.AxisSystem_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.AxisSystem_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.AxisSystem_IsParameterReadOnly(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.AxisSystem_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.AxisSystem_SetRealParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.AxisSystem_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.AxisSystem_SetBooleanParameter(self, *args)

    def GetRefObjectTypeArray(self):
        return _gmat_py.AxisSystem_GetRefObjectTypeArray(self)

    def SetCalculateRotMatrixDeriv(self, turnOn):
        return _gmat_py.AxisSystem_SetCalculateRotMatrixDeriv(self, turnOn)

    def HasLocalClones(self):
        return _gmat_py.AxisSystem_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.AxisSystem_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.AxisSystem_SetClass(base)

# Register AxisSystem in _gmat_py:
_gmat_py.AxisSystem_swigregister(AxisSystem)
class DynamicAxes(AxisSystem):
    r"""
    Definition of the DynamicAxes class.  This is the base class for those
    AxisSystem classes that implement dynamic systems.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_DynamicAxes

    def Initialize(self):
        return _gmat_py.DynamicAxes_Initialize(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.DynamicAxes_SetClass(base)

# Register DynamicAxes in _gmat_py:
_gmat_py.DynamicAxes_swigregister(DynamicAxes)
class BodyFixedAxes(DynamicAxes):
    r"""
    Definition of the BodyFixedAxes class.

    Notes: There are three data files currently needed:
       EOP file containing polar motion (x,y) and UT1-UTC offset
       coefficient files containing nutation and planetary coefficients
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.BodyFixedAxes_swiginit(self, _gmat_py.new_BodyFixedAxes(*args))
    __swig_destroy__ = _gmat_py.delete_BodyFixedAxes

    def UsesEopFile(self, *args):
        return _gmat_py.BodyFixedAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.BodyFixedAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.BodyFixedAxes_UsesNutationUpdateInterval(self)

    def Initialize(self):
        return _gmat_py.BodyFixedAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.BodyFixedAxes_Clone(self)

    def SetRefObject(self, *args):
        return _gmat_py.BodyFixedAxes_SetRefObject(self, *args)

    def SetSpiceFrameId(self, spiceId):
        return _gmat_py.BodyFixedAxes_SetSpiceFrameId(self, spiceId)

    def SetForGravityUpdate(self, turnOn):
        return _gmat_py.BodyFixedAxes_SetForGravityUpdate(self, turnOn)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BodyFixedAxes_SetClass(base)

# Register BodyFixedAxes in _gmat_py:
_gmat_py.BodyFixedAxes_swigregister(BodyFixedAxes)
class EquatorAxes(DynamicAxes):
    r"""Definition of the EquatorAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.EquatorAxes_swiginit(self, _gmat_py.new_EquatorAxes(*args))
    __swig_destroy__ = _gmat_py.delete_EquatorAxes

    def Initialize(self):
        return _gmat_py.EquatorAxes_Initialize(self)

    def UsesEopFile(self, *args):
        return _gmat_py.EquatorAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.EquatorAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.EquatorAxes_UsesNutationUpdateInterval(self)

    def Clone(self):
        return _gmat_py.EquatorAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EquatorAxes_SetClass(base)

# Register EquatorAxes in _gmat_py:
_gmat_py.EquatorAxes_swigregister(EquatorAxes)
class ITRFAxes(DynamicAxes):
    r"""Definition of the ITRFAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ITRFAxes_swiginit(self, _gmat_py.new_ITRFAxes(*args))
    __swig_destroy__ = _gmat_py.delete_ITRFAxes

    def UsesEopFile(self, *args):
        return _gmat_py.ITRFAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.ITRFAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.ITRFAxes_UsesNutationUpdateInterval(self)

    def Initialize(self):
        return _gmat_py.ITRFAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.ITRFAxes_Clone(self)

    def SetRefObject(self, *args):
        return _gmat_py.ITRFAxes_SetRefObject(self, *args)

    def GetRotationMatrix(self, atEpoch, forceComputation=False):
        return _gmat_py.ITRFAxes_GetRotationMatrix(self, atEpoch, forceComputation)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ITRFAxes_SetClass(base)

# Register ITRFAxes in _gmat_py:
_gmat_py.ITRFAxes_swigregister(ITRFAxes)
class LocalAlignedConstrainedAxes(DynamicAxes):
    r"""Definition of the LocalAlignedConstrainedAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.LocalAlignedConstrainedAxes_swiginit(self, _gmat_py.new_LocalAlignedConstrainedAxes(*args))
    __swig_destroy__ = _gmat_py.delete_LocalAlignedConstrainedAxes

    def Initialize(self):
        return _gmat_py.LocalAlignedConstrainedAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.LocalAlignedConstrainedAxes_Clone(self)

    def UsesReferenceObject(self):
        return _gmat_py.LocalAlignedConstrainedAxes_UsesReferenceObject(self)

    def GetReferenceObject(self):
        return _gmat_py.LocalAlignedConstrainedAxes_GetReferenceObject(self)

    def GetReferenceObjectName(self):
        return _gmat_py.LocalAlignedConstrainedAxes_GetReferenceObjectName(self)

    def SetReferenceObject(self, reObj):
        return _gmat_py.LocalAlignedConstrainedAxes_SetReferenceObject(self, reObj)

    def UsesSpacecraft(self, *args):
        return _gmat_py.LocalAlignedConstrainedAxes_UsesSpacecraft(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.LocalAlignedConstrainedAxes_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.LocalAlignedConstrainedAxes_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.LocalAlignedConstrainedAxes_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.LocalAlignedConstrainedAxes_GetParameterTypeString(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.LocalAlignedConstrainedAxes_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.LocalAlignedConstrainedAxes_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.LocalAlignedConstrainedAxes_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.LocalAlignedConstrainedAxes_SetStringParameter(self, *args)

    def GetRefObjectTypeArray(self):
        return _gmat_py.LocalAlignedConstrainedAxes_GetRefObjectTypeArray(self)

    def GetRefObject(self, type, name):
        return _gmat_py.LocalAlignedConstrainedAxes_GetRefObject(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.LocalAlignedConstrainedAxes_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.LocalAlignedConstrainedAxes_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.LocalAlignedConstrainedAxes_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.LocalAlignedConstrainedAxes_SetClass(base)

# Register LocalAlignedConstrainedAxes in _gmat_py:
_gmat_py.LocalAlignedConstrainedAxes_swigregister(LocalAlignedConstrainedAxes)
class MeanOfDateAxes(DynamicAxes):
    r"""
    Definition of the MeanOfDateAxes class.  This is the base class for those
    DynamicAxes classes that implement Mean Of Date axis systems.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_MeanOfDateAxes

    def Initialize(self):
        return _gmat_py.MeanOfDateAxes_Initialize(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MeanOfDateAxes_SetClass(base)

# Register MeanOfDateAxes in _gmat_py:
_gmat_py.MeanOfDateAxes_swigregister(MeanOfDateAxes)
class MODEcAxes(MeanOfDateAxes):
    r"""Definition of the MODEcAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.MODEcAxes_swiginit(self, _gmat_py.new_MODEcAxes(*args))
    __swig_destroy__ = _gmat_py.delete_MODEcAxes

    def Initialize(self):
        return _gmat_py.MODEcAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.MODEcAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MODEcAxes_SetClass(base)

# Register MODEcAxes in _gmat_py:
_gmat_py.MODEcAxes_swigregister(MODEcAxes)
class MODEqAxes(MeanOfDateAxes):
    r"""Definition of the MODEqAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.MODEqAxes_swiginit(self, _gmat_py.new_MODEqAxes(*args))
    __swig_destroy__ = _gmat_py.delete_MODEqAxes

    def Initialize(self):
        return _gmat_py.MODEqAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.MODEqAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MODEqAxes_SetClass(base)

# Register MODEqAxes in _gmat_py:
_gmat_py.MODEqAxes_swigregister(MODEqAxes)
class TrueOfDateAxes(DynamicAxes):
    r"""
    Definition of the TrueOfDateAxes class.  This is the base class for those
    DynamicAxes classes that implement True Of Date axis systems.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_TrueOfDateAxes

    def Initialize(self):
        return _gmat_py.TrueOfDateAxes_Initialize(self)

    def UsesEopFile(self, *args):
        return _gmat_py.TrueOfDateAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.TrueOfDateAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.TrueOfDateAxes_UsesNutationUpdateInterval(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TrueOfDateAxes_SetClass(base)

# Register TrueOfDateAxes in _gmat_py:
_gmat_py.TrueOfDateAxes_swigregister(TrueOfDateAxes)
class TODEcAxes(TrueOfDateAxes):
    r"""Definition of the TODEcAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TODEcAxes_swiginit(self, _gmat_py.new_TODEcAxes(*args))
    __swig_destroy__ = _gmat_py.delete_TODEcAxes

    def Initialize(self):
        return _gmat_py.TODEcAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.TODEcAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TODEcAxes_SetClass(base)

# Register TODEcAxes in _gmat_py:
_gmat_py.TODEcAxes_swigregister(TODEcAxes)
class TODEqAxes(TrueOfDateAxes):
    r"""Definition of the TODEqAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TODEqAxes_swiginit(self, _gmat_py.new_TODEqAxes(*args))
    __swig_destroy__ = _gmat_py.delete_TODEqAxes

    def Initialize(self):
        return _gmat_py.TODEqAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.TODEqAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TODEqAxes_SetClass(base)

# Register TODEqAxes in _gmat_py:
_gmat_py.TODEqAxes_swigregister(TODEqAxes)
class TEMEAxes(TrueOfDateAxes):
    r"""Definition of the TEMEAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TEMEAxes_swiginit(self, _gmat_py.new_TEMEAxes(*args))
    __swig_destroy__ = _gmat_py.delete_TEMEAxes

    def Initialize(self):
        return _gmat_py.TEMEAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.TEMEAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TEMEAxes_SetClass(base)

# Register TEMEAxes in _gmat_py:
_gmat_py.TEMEAxes_swigregister(TEMEAxes)
class TopocentricAxes(DynamicAxes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TopocentricAxes_swiginit(self, _gmat_py.new_TopocentricAxes(*args))
    __swig_destroy__ = _gmat_py.delete_TopocentricAxes

    def Initialize(self):
        return _gmat_py.TopocentricAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.TopocentricAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TopocentricAxes_SetClass(base)

# Register TopocentricAxes in _gmat_py:
_gmat_py.TopocentricAxes_swigregister(TopocentricAxes)
class ObjectReferencedAxes(DynamicAxes):
    r"""Definition of the ObjectReferencedAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ObjectReferencedAxes_swiginit(self, _gmat_py.new_ObjectReferencedAxes(*args))
    __swig_destroy__ = _gmat_py.delete_ObjectReferencedAxes

    def SetPrimaryObject(self, prim):
        return _gmat_py.ObjectReferencedAxes_SetPrimaryObject(self, prim)

    def SetSecondaryObject(self, second):
        return _gmat_py.ObjectReferencedAxes_SetSecondaryObject(self, second)

    def SetXAxis(self, toValue):
        return _gmat_py.ObjectReferencedAxes_SetXAxis(self, toValue)

    def SetYAxis(self, toValue):
        return _gmat_py.ObjectReferencedAxes_SetYAxis(self, toValue)

    def SetZAxis(self, toValue):
        return _gmat_py.ObjectReferencedAxes_SetZAxis(self, toValue)

    def GetPrimaryObject(self):
        return _gmat_py.ObjectReferencedAxes_GetPrimaryObject(self)

    def GetSecondaryObject(self):
        return _gmat_py.ObjectReferencedAxes_GetSecondaryObject(self)

    def GetPrimaryObjectName(self):
        return _gmat_py.ObjectReferencedAxes_GetPrimaryObjectName(self)

    def GetSecondaryObjectName(self):
        return _gmat_py.ObjectReferencedAxes_GetSecondaryObjectName(self)

    def GetXAxis(self):
        return _gmat_py.ObjectReferencedAxes_GetXAxis(self)

    def GetYAxis(self):
        return _gmat_py.ObjectReferencedAxes_GetYAxis(self)

    def GetZAxis(self):
        return _gmat_py.ObjectReferencedAxes_GetZAxis(self)

    def ResetAxes(self):
        return _gmat_py.ObjectReferencedAxes_ResetAxes(self)

    def UsesXAxis(self):
        return _gmat_py.ObjectReferencedAxes_UsesXAxis(self)

    def UsesYAxis(self):
        return _gmat_py.ObjectReferencedAxes_UsesYAxis(self)

    def UsesZAxis(self):
        return _gmat_py.ObjectReferencedAxes_UsesZAxis(self)

    def Initialize(self):
        return _gmat_py.ObjectReferencedAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.ObjectReferencedAxes_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ObjectReferencedAxes_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.ObjectReferencedAxes_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ObjectReferencedAxes_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ObjectReferencedAxes_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ObjectReferencedAxes_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.ObjectReferencedAxes_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ObjectReferencedAxes_SetStringParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.ObjectReferencedAxes_GetRefObject(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.ObjectReferencedAxes_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.ObjectReferencedAxes_SetRefObject(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ObjectReferencedAxes_SetClass(base)

# Register ObjectReferencedAxes in _gmat_py:
_gmat_py.ObjectReferencedAxes_swigregister(ObjectReferencedAxes)
class BodySpinSunAxes(ObjectReferencedAxes):
    r"""Definition of the BodySpinSunAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.BodySpinSunAxes_swiginit(self, _gmat_py.new_BodySpinSunAxes(*args))
    __swig_destroy__ = _gmat_py.delete_BodySpinSunAxes

    def IsParameterReadOnly(self, id):
        return _gmat_py.BodySpinSunAxes_IsParameterReadOnly(self, id)

    def UsesXAxis(self):
        return _gmat_py.BodySpinSunAxes_UsesXAxis(self)

    def UsesYAxis(self):
        return _gmat_py.BodySpinSunAxes_UsesYAxis(self)

    def UsesZAxis(self):
        return _gmat_py.BodySpinSunAxes_UsesZAxis(self)

    def UsesEopFile(self, *args):
        return _gmat_py.BodySpinSunAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.BodySpinSunAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.BodySpinSunAxes_UsesNutationUpdateInterval(self)

    def Initialize(self):
        return _gmat_py.BodySpinSunAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.BodySpinSunAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BodySpinSunAxes_SetClass(base)

# Register BodySpinSunAxes in _gmat_py:
_gmat_py.BodySpinSunAxes_swigregister(BodySpinSunAxes)
class GeocentricSolarEclipticAxes(ObjectReferencedAxes):
    r"""Definition of the GeocentricSolarEclipticAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.GeocentricSolarEclipticAxes_swiginit(self, _gmat_py.new_GeocentricSolarEclipticAxes(*args))
    __swig_destroy__ = _gmat_py.delete_GeocentricSolarEclipticAxes

    def IsParameterReadOnly(self, id):
        return _gmat_py.GeocentricSolarEclipticAxes_IsParameterReadOnly(self, id)

    def UsesXAxis(self):
        return _gmat_py.GeocentricSolarEclipticAxes_UsesXAxis(self)

    def UsesYAxis(self):
        return _gmat_py.GeocentricSolarEclipticAxes_UsesYAxis(self)

    def UsesZAxis(self):
        return _gmat_py.GeocentricSolarEclipticAxes_UsesZAxis(self)

    def Clone(self):
        return _gmat_py.GeocentricSolarEclipticAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.GeocentricSolarEclipticAxes_SetClass(base)

# Register GeocentricSolarEclipticAxes in _gmat_py:
_gmat_py.GeocentricSolarEclipticAxes_swigregister(GeocentricSolarEclipticAxes)
class InertialAxes(AxisSystem):
    r"""
    Definition of the InertialAxes class.  This is the base class for those
    AxisSystem classes that implement inertial systems.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_InertialAxes

    def Initialize(self):
        return _gmat_py.InertialAxes_Initialize(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.InertialAxes_SetClass(base)

# Register InertialAxes in _gmat_py:
_gmat_py.InertialAxes_swigregister(InertialAxes)
class BodyInertialAxes(InertialAxes):
    r"""Definition of the BodyInertialAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.BodyInertialAxes_swiginit(self, _gmat_py.new_BodyInertialAxes(*args))
    __swig_destroy__ = _gmat_py.delete_BodyInertialAxes

    def Initialize(self):
        return _gmat_py.BodyInertialAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.BodyInertialAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BodyInertialAxes_SetClass(base)

# Register BodyInertialAxes in _gmat_py:
_gmat_py.BodyInertialAxes_swigregister(BodyInertialAxes)
class ICRFAxes(InertialAxes):
    r"""Definition of the ICRFAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ICRFAxes_swiginit(self, _gmat_py.new_ICRFAxes(*args))
    __swig_destroy__ = _gmat_py.delete_ICRFAxes

    def Initialize(self):
        return _gmat_py.ICRFAxes_Initialize(self)

    def UsesEopFile(self, *args):
        return _gmat_py.ICRFAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.ICRFAxes_UsesItrfFile(self)

    def Clone(self):
        return _gmat_py.ICRFAxes_Clone(self)

    def GetRotationMatrix(self, atEpoch, forceComputation=False):
        return _gmat_py.ICRFAxes_GetRotationMatrix(self, atEpoch, forceComputation)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ICRFAxes_SetClass(base)

# Register ICRFAxes in _gmat_py:
_gmat_py.ICRFAxes_swigregister(ICRFAxes)
class MJ2000EcAxes(InertialAxes):
    r"""Definition of the MJ2000EcAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.MJ2000EcAxes_swiginit(self, _gmat_py.new_MJ2000EcAxes(*args))
    __swig_destroy__ = _gmat_py.delete_MJ2000EcAxes

    def Initialize(self):
        return _gmat_py.MJ2000EcAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.MJ2000EcAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MJ2000EcAxes_SetClass(base)

# Register MJ2000EcAxes in _gmat_py:
_gmat_py.MJ2000EcAxes_swigregister(MJ2000EcAxes)
class MJ2000EqAxes(InertialAxes):
    r"""Definition of the MJ2000EqAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.MJ2000EqAxes_swiginit(self, _gmat_py.new_MJ2000EqAxes(*args))
    __swig_destroy__ = _gmat_py.delete_MJ2000EqAxes

    def Initialize(self):
        return _gmat_py.MJ2000EqAxes_Initialize(self)

    def Clone(self):
        return _gmat_py.MJ2000EqAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.MJ2000EqAxes_SetClass(base)

# Register MJ2000EqAxes in _gmat_py:
_gmat_py.MJ2000EqAxes_swigregister(MJ2000EqAxes)
class TOEEcAxes(InertialAxes):
    r"""Definition of the TOEEcAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TOEEcAxes_swiginit(self, _gmat_py.new_TOEEcAxes(*args))
    __swig_destroy__ = _gmat_py.delete_TOEEcAxes

    def Initialize(self):
        return _gmat_py.TOEEcAxes_Initialize(self)

    def UsesEpoch(self):
        return _gmat_py.TOEEcAxes_UsesEpoch(self)

    def UsesEopFile(self, *args):
        return _gmat_py.TOEEcAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.TOEEcAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.TOEEcAxes_UsesNutationUpdateInterval(self)

    def Clone(self):
        return _gmat_py.TOEEcAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TOEEcAxes_SetClass(base)

# Register TOEEcAxes in _gmat_py:
_gmat_py.TOEEcAxes_swigregister(TOEEcAxes)
class TOEEqAxes(InertialAxes):
    r"""Definition of the TOEEqAxes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.TOEEqAxes_swiginit(self, _gmat_py.new_TOEEqAxes(*args))
    __swig_destroy__ = _gmat_py.delete_TOEEqAxes

    def Initialize(self):
        return _gmat_py.TOEEqAxes_Initialize(self)

    def UsesEpoch(self):
        return _gmat_py.TOEEqAxes_UsesEpoch(self)

    def UsesEopFile(self, *args):
        return _gmat_py.TOEEqAxes_UsesEopFile(self, *args)

    def UsesItrfFile(self):
        return _gmat_py.TOEEqAxes_UsesItrfFile(self)

    def UsesNutationUpdateInterval(self):
        return _gmat_py.TOEEqAxes_UsesNutationUpdateInterval(self)

    def Clone(self):
        return _gmat_py.TOEEqAxes_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.TOEEqAxes_SetClass(base)

# Register TOEEqAxes in _gmat_py:
_gmat_py.TOEEqAxes_swigregister(TOEEqAxes)
class IAUFile(object):
    r"""
    Definition of the IAUFile class.  This is the code that provides
    IAU2000-2006 data.  It is a singleton.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.IAUFile_Instance()

    def Initialize(self):
        return _gmat_py.IAUFile_Initialize(self)

    def Finalize(self):
        return _gmat_py.IAUFile_Finalize(self)

    def GetIAUData(self, epoch, iau, dim, order):
        return _gmat_py.IAUFile_GetIAUData(self, epoch, iau, dim, order)

# Register IAUFile in _gmat_py:
_gmat_py.IAUFile_swigregister(IAUFile)
class ICRFFile(object):
    r"""
    Definition of the ICRFFile class.  This is the code that provides
    ICRF Euler rotation vector.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        r""" Instance of the class"""
        return _gmat_py.ICRFFile_Instance()

    def Initialize(self):
        r""" initializes the ICRFFile (reads it and stores the data)"""
        return _gmat_py.ICRFFile_Initialize(self)

    def Finalize(self):
        r""" finalizes the ICRFFile"""
        return _gmat_py.ICRFFile_Finalize(self)

    def GetICRFRotationVector(self, epoch, icrfRotationVector, dim, order):
        return _gmat_py.ICRFFile_GetICRFRotationVector(self, epoch, icrfRotationVector, dim, order)

# Register ICRFFile in _gmat_py:
_gmat_py.ICRFFile_swigregister(ICRFFile)
NUTATION_1980 = _gmat_py.NUTATION_1980
NUTATION_1996 = _gmat_py.NUTATION_1996
NUTATION_2000 = _gmat_py.NUTATION_2000
PLANETARY_1980 = _gmat_py.PLANETARY_1980
PLANETARY_1996 = _gmat_py.PLANETARY_1996
class ItrfCoefficientsFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ItrfCoefficientsFile_swiginit(self, _gmat_py.new_ItrfCoefficientsFile(*args))
    __swig_destroy__ = _gmat_py.delete_ItrfCoefficientsFile

    def Initialize(self):
        return _gmat_py.ItrfCoefficientsFile_Initialize(self)

    def GetNutationTermsSource(self):
        return _gmat_py.ItrfCoefficientsFile_GetNutationTermsSource(self)

    def GetPlanetaryTermsSource(self):
        return _gmat_py.ItrfCoefficientsFile_GetPlanetaryTermsSource(self)

    def GetNutationFileName(self):
        return _gmat_py.ItrfCoefficientsFile_GetNutationFileName(self)

    def GetPlanetaryFileName(self):
        return _gmat_py.ItrfCoefficientsFile_GetPlanetaryFileName(self)

    def GetNumberOfNutationTerms(self):
        return _gmat_py.ItrfCoefficientsFile_GetNumberOfNutationTerms(self)

    def GetNumberOfPlanetaryTerms(self):
        return _gmat_py.ItrfCoefficientsFile_GetNumberOfPlanetaryTerms(self)

    def GetNutationTerms(self, a5, Aval, Bval, Cval, Dval, Eval, Fval):
        return _gmat_py.ItrfCoefficientsFile_GetNutationTerms(self, a5, Aval, Bval, Cval, Dval, Eval, Fval)

    def GetPlanetaryTerms(self, ap10, Apval, Bpval, Cpval, Dpval):
        return _gmat_py.ItrfCoefficientsFile_GetPlanetaryTerms(self, ap10, Apval, Bpval, Cpval, Dpval)

# Register ItrfCoefficientsFile in _gmat_py:
_gmat_py.ItrfCoefficientsFile_swigregister(ItrfCoefficientsFile)
class CoordinateConverter(object):
    r"""Definition of the CoordinateConverter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.CoordinateConverter_swiginit(self, _gmat_py.new_CoordinateConverter(*args))
    __swig_destroy__ = _gmat_py.delete_CoordinateConverter

    def Initialize(self):
        return _gmat_py.CoordinateConverter_Initialize(self)

    def SetToCalculateRotMatrixDeriv(self, turnOn):
        return _gmat_py.CoordinateConverter_SetToCalculateRotMatrixDeriv(self, turnOn)

    def Convert(self, *args):
        return _gmat_py.CoordinateConverter_Convert(self, *args)

    def GetLastRotationMatrix(self):
        return _gmat_py.CoordinateConverter_GetLastRotationMatrix(self)

    def GetLastRotationDotMatrix(self):
        return _gmat_py.CoordinateConverter_GetLastRotationDotMatrix(self)

    def GetRotationMatrixFromICRFToFK5(self, atEpoch):
        return _gmat_py.CoordinateConverter_GetRotationMatrixFromICRFToFK5(self, atEpoch)

    def GetLastRotationMatrixDerivative(self):
        return _gmat_py.CoordinateConverter_GetLastRotationMatrixDerivative(self)

# Register CoordinateConverter in _gmat_py:
_gmat_py.CoordinateConverter_swigregister(CoordinateConverter)
DE405 = _gmat_py.DE405
DE421 = _gmat_py.DE421
DE424 = _gmat_py.DE424
SPICE = _gmat_py.SPICE
PosVelSourceCount = _gmat_py.PosVelSourceCount
STAR = _gmat_py.STAR
PLANET = _gmat_py.PLANET
MOON = _gmat_py.MOON
ASTEROID = _gmat_py.ASTEROID
COMET = _gmat_py.COMET
SPECIAL_CELESTIAL_POINT = _gmat_py.SPECIAL_CELESTIAL_POINT
KUIPER_BELT_OBJECT = _gmat_py.KUIPER_BELT_OBJECT
BodyTypeCount = _gmat_py.BodyTypeCount
ATMOSPHERE_MODEL = _gmat_py.ATMOSPHERE_MODEL
GRAVITY_FIELD = _gmat_py.GRAVITY_FIELD
MAGNETIC_FIELD = _gmat_py.MAGNETIC_FIELD
SHAPE_MODEL = _gmat_py.SHAPE_MODEL
ModelTypeCount = _gmat_py.ModelTypeCount
DE_FILE = _gmat_py.DE_FILE
IAU_2002 = _gmat_py.IAU_2002
FK5_IAU_1980 = _gmat_py.FK5_IAU_1980
IAU_SIMPLIFIED = _gmat_py.IAU_SIMPLIFIED
SPICE_KERNEL = _gmat_py.SPICE_KERNEL
RotationDataSrcCount = _gmat_py.RotationDataSrcCount
class CelestialBody(SpacePoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CelestialBody

    def Initialize(self):
        return _gmat_py.CelestialBody_Initialize(self)

    def SetUpBody(self):
        return _gmat_py.CelestialBody_SetUpBody(self)

    def GetEpoch(self):
        return _gmat_py.CelestialBody_GetEpoch(self)

    def GetEpochGT(self):
        return _gmat_py.CelestialBody_GetEpochGT(self)

    def SetEpoch(self, ep):
        return _gmat_py.CelestialBody_SetEpoch(self, ep)

    def SetEpochGT(self, ep):
        return _gmat_py.CelestialBody_SetEpochGT(self, ep)

    def GetLastState(self):
        return _gmat_py.CelestialBody_GetLastState(self)

    def GetFirstStateTime(self):
        return _gmat_py.CelestialBody_GetFirstStateTime(self)

    def GetState(self, *args):
        return _gmat_py.CelestialBody_GetState(self, *args)

    def GetAcceleration(self, *args):
        return _gmat_py.CelestialBody_GetAcceleration(self, *args)

    def GetPositionDelta(self, atTime1, atTime2):
        return _gmat_py.CelestialBody_GetPositionDelta(self, atTime1, atTime2)

    def GetPositionDeltaSSB(self, atTime1, atTime2):
        return _gmat_py.CelestialBody_GetPositionDeltaSSB(self, atTime1, atTime2)

    def GetBodyType(self):
        return _gmat_py.CelestialBody_GetBodyType(self)

    def GetCentralBody(self):
        return _gmat_py.CelestialBody_GetCentralBody(self)

    def GetGravitationalConstant(self):
        return _gmat_py.CelestialBody_GetGravitationalConstant(self)

    def GetEquatorialRadius(self):
        return _gmat_py.CelestialBody_GetEquatorialRadius(self)

    def GetFlattening(self):
        return _gmat_py.CelestialBody_GetFlattening(self)

    def GetPolarRadius(self):
        return _gmat_py.CelestialBody_GetPolarRadius(self)

    def GetMass(self):
        return _gmat_py.CelestialBody_GetMass(self)

    def GetPosVelSource(self):
        return _gmat_py.CelestialBody_GetPosVelSource(self)

    def GetSourceFileName(self):
        return _gmat_py.CelestialBody_GetSourceFileName(self)

    def GetSourceFile(self):
        return _gmat_py.CelestialBody_GetSourceFile(self)

    def GetUsePotentialFile(self):
        return _gmat_py.CelestialBody_GetUsePotentialFile(self)

    def GetOverrideTimeSystem(self):
        return _gmat_py.CelestialBody_GetOverrideTimeSystem(self)

    def GetEphemUpdateInterval(self):
        return _gmat_py.CelestialBody_GetEphemUpdateInterval(self)

    def GetValidModelList(self, m):
        return _gmat_py.CelestialBody_GetValidModelList(self, m)

    def GetAngularVelocity(self):
        return _gmat_py.CelestialBody_GetAngularVelocity(self)

    def GetDSNCorrectionDatabase(self):
        return _gmat_py.CelestialBody_GetDSNCorrectionDatabase(self)

    def GetHourAngle(self, atTime):
        return _gmat_py.CelestialBody_GetHourAngle(self, atTime)

    def GetDegree(self):
        return _gmat_py.CelestialBody_GetDegree(self)

    def GetOrder(self):
        return _gmat_py.CelestialBody_GetOrder(self)

    def GetAtmosphereModelType(self):
        return _gmat_py.CelestialBody_GetAtmosphereModelType(self)

    def GetAtmosphereModel(self):
        return _gmat_py.CelestialBody_GetAtmosphereModel(self)

    def GetDensity(self, *args):
        return _gmat_py.CelestialBody_GetDensity(self, *args)

    def GetTwoBodyEpoch(self):
        return _gmat_py.CelestialBody_GetTwoBodyEpoch(self)

    def GetTwoBodyElements(self):
        return _gmat_py.CelestialBody_GetTwoBodyElements(self)

    def GetRotationDataSource(self):
        return _gmat_py.CelestialBody_GetRotationDataSource(self)

    def GetRotationDataSourceList(self):
        return _gmat_py.CelestialBody_GetRotationDataSourceList(self)

    def IsUserDefined(self):
        return _gmat_py.CelestialBody_IsUserDefined(self)

    def GetEphemSourceList(self):
        return _gmat_py.CelestialBody_GetEphemSourceList(self)

    def GetOrientationParameters(self):
        return _gmat_py.CelestialBody_GetOrientationParameters(self)

    def SetBodyType(self, bType):
        return _gmat_py.CelestialBody_SetBodyType(self, bType)

    def SetCentralBody(self, cBody):
        return _gmat_py.CelestialBody_SetCentralBody(self, cBody)

    def SetGravitationalConstant(self, newMu):
        return _gmat_py.CelestialBody_SetGravitationalConstant(self, newMu)

    def SetEquatorialRadius(self, newEqRadius):
        return _gmat_py.CelestialBody_SetEquatorialRadius(self, newEqRadius)

    def SetFlattening(self, flat):
        return _gmat_py.CelestialBody_SetFlattening(self, flat)

    def SetSource(self, pvSrc):
        return _gmat_py.CelestialBody_SetSource(self, pvSrc)

    def SetSourceFile(self, src):
        return _gmat_py.CelestialBody_SetSourceFile(self, src)

    def SetAllowSpice(self, allow):
        return _gmat_py.CelestialBody_SetAllowSpice(self, allow)

    def SetUsePotentialFile(self, useIt):
        return _gmat_py.CelestialBody_SetUsePotentialFile(self, useIt)

    def SetOverrideTimeSystem(self, overrideIt):
        return _gmat_py.CelestialBody_SetOverrideTimeSystem(self, overrideIt)

    def SetEphemUpdateInterval(self, intvl):
        return _gmat_py.CelestialBody_SetEphemUpdateInterval(self, intvl)

    def AddValidModelName(self, m, newModel):
        return _gmat_py.CelestialBody_AddValidModelName(self, m, newModel)

    def RemoveValidModelName(self, m, modelName):
        return _gmat_py.CelestialBody_RemoveValidModelName(self, m, modelName)

    def SetValidModelList(self, m, toList):
        return _gmat_py.CelestialBody_SetValidModelList(self, m, toList)

    def SetDSNCorrectionDatabase(self, DSNCorrectionDB):
        return _gmat_py.CelestialBody_SetDSNCorrectionDatabase(self, DSNCorrectionDB)

    def SetOrder(self, toOrder):
        return _gmat_py.CelestialBody_SetOrder(self, toOrder)

    def SetDegree(self, toDegree):
        return _gmat_py.CelestialBody_SetDegree(self, toDegree)

    def SetAtmosphereModelType(self, toAtmModelType):
        return _gmat_py.CelestialBody_SetAtmosphereModelType(self, toAtmModelType)

    def SetAtmosphereModel(self, toAtmModel):
        return _gmat_py.CelestialBody_SetAtmosphereModel(self, toAtmModel)

    def SetPotentialFilename(self, fn):
        return _gmat_py.CelestialBody_SetPotentialFilename(self, fn)

    def SetTwoBodyEpoch(self, toTime):
        return _gmat_py.CelestialBody_SetTwoBodyEpoch(self, toTime)

    def SetTwoBodyElements(self, kepl):
        return _gmat_py.CelestialBody_SetTwoBodyElements(self, kepl)

    def SetSMA(self, value):
        return _gmat_py.CelestialBody_SetSMA(self, value)

    def SetECC(self, value):
        return _gmat_py.CelestialBody_SetECC(self, value)

    def SetRotationDataSource(self, src):
        return _gmat_py.CelestialBody_SetRotationDataSource(self, src)

    def SetUserDefined(self, userDefinedBody):
        return _gmat_py.CelestialBody_SetUserDefined(self, userDefinedBody)

    def Get3dViewModelFile(self):
        return _gmat_py.CelestialBody_Get3dViewModelFile(self)

    def Get3dViewModelFileFullPath(self):
        return _gmat_py.CelestialBody_Get3dViewModelFileFullPath(self)

    def Get3dViewModelId(self):
        return _gmat_py.CelestialBody_Get3dViewModelId(self)

    def Set3dViewModelId(self, id):
        return _gmat_py.CelestialBody_Set3dViewModelId(self, id)

    def GetMJ2000State(self, *args):
        return _gmat_py.CelestialBody_GetMJ2000State(self, *args)

    def GetMJ2000Position(self, *args):
        return _gmat_py.CelestialBody_GetMJ2000Position(self, *args)

    def GetMJ2000Velocity(self, *args):
        return _gmat_py.CelestialBody_GetMJ2000Velocity(self, *args)

    def GetMJ2000Acceleration(self, *args):
        return _gmat_py.CelestialBody_GetMJ2000Acceleration(self, *args)

    def SetOrientationParameters(self, orient):
        return _gmat_py.CelestialBody_SetOrientationParameters(self, orient)

    def GetBodyCartographicCoordinates(self, forTime):
        return _gmat_py.CelestialBody_GetBodyCartographicCoordinates(self, forTime)

    def GetParameterText(self, id):
        return _gmat_py.CelestialBody_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.CelestialBody_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.CelestialBody_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.CelestialBody_GetParameterTypeString(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.CelestialBody_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.CelestialBody_SetRealParameter(self, id, value)

    def GetIntegerParameter(self, id):
        return _gmat_py.CelestialBody_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.CelestialBody_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.CelestialBody_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.CelestialBody_SetStringParameter(self, *args)

    def GetBooleanParameter(self, id):
        return _gmat_py.CelestialBody_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.CelestialBody_SetBooleanParameter(self, id, value)

    def GetRvectorParameter(self, *args):
        return _gmat_py.CelestialBody_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.CelestialBody_SetRvectorParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.CelestialBody_GetStringArrayParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.CelestialBody_GetRefObject(self, type, name)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.CelestialBody_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.CelestialBody_SetRefObject(self, *args)

    def IsParameterReadOnly(self, id):
        return _gmat_py.CelestialBody_IsParameterReadOnly(self, id)

    def IsParameterCloaked(self, id):
        return _gmat_py.CelestialBody_IsParameterCloaked(self, id)

    def IsParameterEqualToDefault(self, id):
        return _gmat_py.CelestialBody_IsParameterEqualToDefault(self, id)

    def IsParameterValid(self, *args):
        return _gmat_py.CelestialBody_IsParameterValid(self, *args)

    def WriteEmptyStringParameter(self, id):
        return _gmat_py.CelestialBody_WriteEmptyStringParameter(self, id)

    def SaveAllAsDefault(self):
        return _gmat_py.CelestialBody_SaveAllAsDefault(self)

    def SaveParameterAsDefault(self, id):
        return _gmat_py.CelestialBody_SaveParameterAsDefault(self, id)

    def GetDefaultRotationSource(self):
        return _gmat_py.CelestialBody_GetDefaultRotationSource(self)

    def GetSpiceKernelReader(self):
        return _gmat_py.CelestialBody_GetSpiceKernelReader(self)

    def SetUpSPICE(self):
        return _gmat_py.CelestialBody_SetUpSPICE(self)

    def IsSpiceSetUp(self):
        return _gmat_py.CelestialBody_IsSpiceSetUp(self)
    BUFSIZE = _gmat_py.CelestialBody_BUFSIZE

    def HasLocalClones(self):
        return _gmat_py.CelestialBody_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.CelestialBody_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CelestialBody_SetClass(base)

# Register CelestialBody in _gmat_py:
_gmat_py.CelestialBody_swigregister(CelestialBody)
POS_VEL_SOURCE_STRINGS = cvar.POS_VEL_SOURCE_STRINGS
BODY_TYPE_STRINGS = cvar.BODY_TYPE_STRINGS
MODEL_TYPE_STRINGS = cvar.MODEL_TYPE_STRINGS
ROTATION_DATA_SOURCE_STRINGS = cvar.ROTATION_DATA_SOURCE_STRINGS

class Asteroid(CelestialBody):
    r"""
    The Asteroid class will contain all data and methods for any comet
    that exists in the solar system.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Asteroid_swiginit(self, _gmat_py.new_Asteroid(*args))
    __swig_destroy__ = _gmat_py.delete_Asteroid

    def Clone(self):
        return _gmat_py.Asteroid_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Asteroid_Copy(self, orig)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Asteroid_SetClass(base)

# Register Asteroid in _gmat_py:
_gmat_py.Asteroid_swigregister(Asteroid)
class Comet(CelestialBody):
    r"""
    The Comet class will contain all data and methods for any comet that
    exists in the solar system.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Comet_swiginit(self, _gmat_py.new_Comet(*args))
    __swig_destroy__ = _gmat_py.delete_Comet

    def Clone(self):
        return _gmat_py.Comet_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Comet_Copy(self, orig)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Comet_SetClass(base)

# Register Comet in _gmat_py:
_gmat_py.Comet_swigregister(Comet)
class Moon(CelestialBody):
    r"""
    The Moon class will contain all data and methods for any moon that exists in
    the solar system.

    Notes: Currently, only contains default data for Luna, Phobos, and Deimos.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Moon_swiginit(self, _gmat_py.new_Moon(*args))
    __swig_destroy__ = _gmat_py.delete_Moon

    def GetBodyCartographicCoordinates(self, forTime):
        return _gmat_py.Moon_GetBodyCartographicCoordinates(self, forTime)

    def Clone(self):
        return _gmat_py.Moon_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Moon_Copy(self, orig)

    def NeedsOnlyMainSPK(self):
        return _gmat_py.Moon_NeedsOnlyMainSPK(self)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.Moon_SetIntegerParameter(self, id, value)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Moon_SetClass(base)

# Register Moon in _gmat_py:
_gmat_py.Moon_swigregister(Moon)
class Planet(CelestialBody):
    r"""
    This is the class for planets.

    Notes: Currently, this code assumes that it can set the parameter default
          values, based on the input name of the planet (e.g., if the planet's
          name is Mercury, the default values for Mercury will be used)

    When the Planet is the Earth, the initial epoch and Keplerian elements
          used for the Low Fidelity modeling are set, they must be 'forwarded'
          on to the Sun.  This is necessary because:
          1. the KeplersProblem code computes the state of a body with respect to
             its central body, then returns it with respect to the Earth
          2. the Sun has no central body, so
          3. the Sun will have to use the Earth's information to compute and
             return its state


    Planet class, for all planets in the solar system : ).

    The Planet class will contain all data and methods for any planet that exists
    in the solar system.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Planet_swiginit(self, _gmat_py.new_Planet(*args))
    __swig_destroy__ = _gmat_py.delete_Planet

    def Initialize(self):
        return _gmat_py.Planet_Initialize(self)

    def GetBodyCartographicCoordinates(self, forTime):
        return _gmat_py.Planet_GetBodyCartographicCoordinates(self, forTime)

    def GetHourAngle(self, atTime):
        return _gmat_py.Planet_GetHourAngle(self, atTime)

    def SetTwoBodyEpoch(self, toTime):
        return _gmat_py.Planet_SetTwoBodyEpoch(self, toTime)

    def SetTwoBodyElements(self, kepl):
        return _gmat_py.Planet_SetTwoBodyElements(self, kepl)

    def GetNutationUpdateInterval(self):
        return _gmat_py.Planet_GetNutationUpdateInterval(self)

    def SetNutationUpdateInterval(self, val):
        return _gmat_py.Planet_SetNutationUpdateInterval(self, val)

    def Clone(self):
        return _gmat_py.Planet_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Planet_Copy(self, orig)

    def NeedsOnlyMainSPK(self):
        return _gmat_py.Planet_NeedsOnlyMainSPK(self)

    def GetParameterText(self, id):
        return _gmat_py.Planet_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Planet_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Planet_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Planet_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.Planet_IsParameterReadOnly(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.Planet_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Planet_SetRealParameter(self, *args)

    def GetStringParameter(self, id):
        return _gmat_py.Planet_GetStringParameter(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.Planet_SetStringParameter(self, id, value)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.Planet_SetIntegerParameter(self, id, value)

    def IsParameterCloaked(self, id):
        return _gmat_py.Planet_IsParameterCloaked(self, id)

    def IsParameterEqualToDefault(self, id):
        return _gmat_py.Planet_IsParameterEqualToDefault(self, id)

    def SaveAllAsDefault(self):
        return _gmat_py.Planet_SaveAllAsDefault(self)

    def SaveParameterAsDefault(self, id):
        return _gmat_py.Planet_SaveParameterAsDefault(self, id)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Planet_SetClass(base)

# Register Planet in _gmat_py:
_gmat_py.Planet_swigregister(Planet)
class SpecialCelestialPoint(CelestialBody):
    r"""
    The SpecialCelestialPoint class will contain all data and methods for a solar system
    point that can be handled similarly to a Celestialbody, e.g. for a point whose
    state can be obtained from a planetary ephemeris file.  An example would be the
    Solar System Barycenter, whose data is contained on DE and SPK planetary ephemeris
    files, along with state data for celestial bodies.

    This class must override several of the CelestialBody methods.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.SpecialCelestialPoint_swiginit(self, _gmat_py.new_SpecialCelestialPoint(*args))
    __swig_destroy__ = _gmat_py.delete_SpecialCelestialPoint

    def Clone(self):
        return _gmat_py.SpecialCelestialPoint_Clone(self)

    def Copy(self, orig):
        return _gmat_py.SpecialCelestialPoint_Copy(self, orig)

    def NeedsOnlyMainSPK(self):
        return _gmat_py.SpecialCelestialPoint_NeedsOnlyMainSPK(self)

    def IsParameterReadOnly(self, id):
        return _gmat_py.SpecialCelestialPoint_IsParameterReadOnly(self, id)

    def SetSource(self, pvSrc):
        return _gmat_py.SpecialCelestialPoint_SetSource(self, pvSrc)

    def SetAllowSpice(self, allow):
        return _gmat_py.SpecialCelestialPoint_SetAllowSpice(self, allow)

    def ComputeTwoBody(self, forTime):
        return _gmat_py.SpecialCelestialPoint_ComputeTwoBody(self, forTime)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SpecialCelestialPoint_SetClass(base)

# Register SpecialCelestialPoint in _gmat_py:
_gmat_py.SpecialCelestialPoint_swigregister(SpecialCelestialPoint)
class Star(CelestialBody):
    r"""
    This is the class for stars.


    Star class, for all stars in the solar system : ).

    The Star class will contain all data and methods for any star that exists in
    the solar system.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Star_swiginit(self, _gmat_py.new_Star(*args))
    __swig_destroy__ = _gmat_py.delete_Star

    def GetRadiantPower(self):
        return _gmat_py.Star_GetRadiantPower(self)

    def GetReferenceDistance(self):
        return _gmat_py.Star_GetReferenceDistance(self)

    def SetRadiantPower(self, radPower, refDistance):
        return _gmat_py.Star_SetRadiantPower(self, radPower, refDistance)

    def SetPhotosphereRadius(self, rad):
        return _gmat_py.Star_SetPhotosphereRadius(self, rad)

    def GetParameterText(self, id):
        return _gmat_py.Star_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Star_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Star_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Star_GetParameterTypeString(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.Star_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.Star_SetRealParameter(self, id, value)

    def IsParameterReadOnly(self, id):
        return _gmat_py.Star_IsParameterReadOnly(self, id)

    def Clone(self):
        return _gmat_py.Star_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Star_Copy(self, orig)

    def NeedsOnlyMainSPK(self):
        return _gmat_py.Star_NeedsOnlyMainSPK(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Star_SetClass(base)

# Register Star in _gmat_py:
_gmat_py.Star_swigregister(Star)
class CalculatedPoint(SpacePoint):
    r"""
    This is the base class for calculated points.

    Notes: This is an abstract class.

    CalculatedPoint base class, from which all types of calculated points
    will derive.

    The CalculatedPoint class is primarily an intermediate base class, from which
    all types of calculated points will derive.  CalculatedPoint itself derives
    from SpacePoint.

    Bodies are set on a(n) (sub)object of this class via the SetRefObject
          method.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CalculatedPoint

    def IsBuiltIn(self):
        return _gmat_py.CalculatedPoint_IsBuiltIn(self)

    def SetIsBuiltIn(self, builtIn, ofType):
        return _gmat_py.CalculatedPoint_SetIsBuiltIn(self, builtIn, ofType)

    def GetBuiltInNames(self):
        return _gmat_py.CalculatedPoint_GetBuiltInNames(self)

    def GetEpoch(self):
        return _gmat_py.CalculatedPoint_GetEpoch(self)

    def SetEpoch(self, *args):
        return _gmat_py.CalculatedPoint_SetEpoch(self, *args)

    def GetLastState(self):
        return _gmat_py.CalculatedPoint_GetLastState(self)

    def GetParameterText(self, id):
        return _gmat_py.CalculatedPoint_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.CalculatedPoint_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.CalculatedPoint_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.CalculatedPoint_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.CalculatedPoint_IsParameterReadOnly(self, *args)

    def IsParameterCloaked(self, id):
        return _gmat_py.CalculatedPoint_IsParameterCloaked(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.CalculatedPoint_GetIntegerParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.CalculatedPoint_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.CalculatedPoint_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.CalculatedPoint_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.CalculatedPoint_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.CalculatedPoint_GetStringArrayParameter(self, *args)

    def GetRefObject(self, type, name, index):
        return _gmat_py.CalculatedPoint_GetRefObject(self, type, name, index)

    def SetRefObject(self, *args):
        return _gmat_py.CalculatedPoint_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.CalculatedPoint_RenameRefObject(self, type, oldName, newName)

    def HasRefObjectTypeArray(self):
        return _gmat_py.CalculatedPoint_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.CalculatedPoint_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.CalculatedPoint_GetRefObjectNameArray(self, type)

    def TakeAction(self, *args):
        return _gmat_py.CalculatedPoint_TakeAction(self, *args)

    def TakeRequiredAction(self, id):
        return _gmat_py.CalculatedPoint_TakeRequiredAction(self, id)

    def SetDefaultBody(self, defBody):
        return _gmat_py.CalculatedPoint_SetDefaultBody(self, defBody)

    def GetDefaultBodies(self):
        return _gmat_py.CalculatedPoint_GetDefaultBodies(self)

    def HasLocalClones(self):
        return _gmat_py.CalculatedPoint_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CalculatedPoint_SetClass(base)

# Register CalculatedPoint in _gmat_py:
_gmat_py.CalculatedPoint_swigregister(CalculatedPoint)
class Barycenter(CalculatedPoint):
    r"""
    Definition of the Barycenter class.


    Barycenter class, derived from CalculatedPoint class.

    Notes: Bodies are sent to an object of this class via the SetRefObject
          method.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Barycenter_swiginit(self, _gmat_py.new_Barycenter(*args))
    __swig_destroy__ = _gmat_py.delete_Barycenter

    def Clone(self):
        return _gmat_py.Barycenter_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Barycenter_Copy(self, orig)

    def GetMJ2000State(self, *args):
        return _gmat_py.Barycenter_GetMJ2000State(self, *args)

    def GetMJ2000Position(self, *args):
        return _gmat_py.Barycenter_GetMJ2000Position(self, *args)

    def GetMJ2000Velocity(self, *args):
        return _gmat_py.Barycenter_GetMJ2000Velocity(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.Barycenter_SetRefObject(self, *args)

    def GetMass(self):
        return _gmat_py.Barycenter_GetMass(self)

    def Initialize(self):
        return _gmat_py.Barycenter_Initialize(self)

    def GetBuiltInNames(self):
        return _gmat_py.Barycenter_GetBuiltInNames(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Barycenter_SetClass(base)

# Register Barycenter in _gmat_py:
_gmat_py.Barycenter_swigregister(Barycenter)
class LibrationPoint(CalculatedPoint):
    r"""
    This is the base class for libration points.


    LibrationPoint derives from CalculatedPoint.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.LibrationPoint_swiginit(self, _gmat_py.new_LibrationPoint(*args))
    __swig_destroy__ = _gmat_py.delete_LibrationPoint

    def GetMJ2000State(self, *args):
        return _gmat_py.LibrationPoint_GetMJ2000State(self, *args)

    def GetMJ2000Position(self, *args):
        return _gmat_py.LibrationPoint_GetMJ2000Position(self, *args)

    def GetMJ2000Velocity(self, *args):
        return _gmat_py.LibrationPoint_GetMJ2000Velocity(self, *args)

    def GetBuiltInNames(self):
        return _gmat_py.LibrationPoint_GetBuiltInNames(self)

    def GetParameterText(self, id):
        return _gmat_py.LibrationPoint_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.LibrationPoint_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.LibrationPoint_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.LibrationPoint_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.LibrationPoint_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.LibrationPoint_SetStringParameter(self, *args)

    def GetRefObjectTypeArray(self):
        return _gmat_py.LibrationPoint_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.LibrationPoint_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.LibrationPoint_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.LibrationPoint_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.LibrationPoint_Clone(self)

    def Copy(self, orig):
        return _gmat_py.LibrationPoint_Copy(self, orig)

    @staticmethod
    def SetClass(base):
        return _gmat_py.LibrationPoint_SetClass(base)

# Register LibrationPoint in _gmat_py:
_gmat_py.LibrationPoint_swigregister(LibrationPoint)
class AtmosphereModel(GmatBase):
    r"""
    Base class for atmosphere models.

    Atmosphere models are used to model drag forces and other aerodynamics.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_AtmosphereModel

    def Density(self, *args):
        r"""
        Calculates the atmospheric density at a specified location.

        Density is the core calculation provided by classes derived from this one.
        The output array, density, must contain the density at the requested
        locations, expressed in kg / m^3.

        :type position: float
        :param position:  The input vector of spacecraft states, in MJ2000Eq
                                 coordinates.
        :type density: float
        :param density:   The array of output densities.
        :type epoch: float, optional
        :param epoch:     The current TAI modified Julian epoch.
        :type count: int, optional
        :param count:     The number of spacecraft contained in position.

        :rtype: boolean
        :return: true on success, false if a problem is encountered.
        """
        return _gmat_py.AtmosphereModel_Density(self, *args)

    def Initialize(self):
        return _gmat_py.AtmosphereModel_Initialize(self)

    def SetSunVector(self, sv):
        return _gmat_py.AtmosphereModel_SetSunVector(self, sv)

    def SetCentralBodyVector(self, cv):
        return _gmat_py.AtmosphereModel_SetCentralBodyVector(self, cv)

    def SetSolarSystem(self, ss):
        return _gmat_py.AtmosphereModel_SetSolarSystem(self, ss)

    def SetCentralBody(self, *args):
        return _gmat_py.AtmosphereModel_SetCentralBody(self, *args)

    def GetCentralBodyName(self):
        return _gmat_py.AtmosphereModel_GetCentralBodyName(self)

    def SetUpdateParameters(self, interval, epoch=-1.0):
        return _gmat_py.AtmosphereModel_SetUpdateParameters(self, interval, epoch)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.AtmosphereModel_SetInternalCoordSystem(self, cs)

    def SetCbJ2000CoordinateSystem(self, cs):
        return _gmat_py.AtmosphereModel_SetCbJ2000CoordinateSystem(self, cs)

    def GetCbJ2000CoordinateSystem(self):
        return _gmat_py.AtmosphereModel_GetCbJ2000CoordinateSystem(self)

    def SetFixedCoordinateSystem(self, cs):
        return _gmat_py.AtmosphereModel_SetFixedCoordinateSystem(self, cs)

    def GetAngularVelocity(self, GmatEpoch=-1.0):
        return _gmat_py.AtmosphereModel_GetAngularVelocity(self, GmatEpoch)

    def BuildAngularVelocity(self, GmatEpoch):
        return _gmat_py.AtmosphereModel_BuildAngularVelocity(self, GmatEpoch)

    def UpdateAngularVelocity(self, GmatEpoch):
        return _gmat_py.AtmosphereModel_UpdateAngularVelocity(self, GmatEpoch)

    def SetKpApConversionMethod(self, method):
        return _gmat_py.AtmosphereModel_SetKpApConversionMethod(self, method)

    def ConvertKpToAp(self, kp):
        return _gmat_py.AtmosphereModel_ConvertKpToAp(self, kp)

    def SetInputSource(self, *args):
        return _gmat_py.AtmosphereModel_SetInputSource(self, *args)

    def SetSchattenFlags(self, timing, magnitude):
        return _gmat_py.AtmosphereModel_SetSchattenFlags(self, timing, magnitude)

    def HasWindModel(self):
        return _gmat_py.AtmosphereModel_HasWindModel(self)

    def Wind(self, position, wind, ep, count=1):
        return _gmat_py.AtmosphereModel_Wind(self, position, wind, ep, count)

    def HasTemperatureModel(self):
        return _gmat_py.AtmosphereModel_HasTemperatureModel(self)

    def Temperature(self, *args):
        return _gmat_py.AtmosphereModel_Temperature(self, *args)

    def HasPressureModel(self):
        return _gmat_py.AtmosphereModel_HasPressureModel(self)

    def Pressure(self, *args):
        return _gmat_py.AtmosphereModel_Pressure(self, *args)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.AtmosphereModel_IsParameterReadOnly(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.AtmosphereModel_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.AtmosphereModel_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.AtmosphereModel_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.AtmosphereModel_GetParameterTypeString(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.AtmosphereModel_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.AtmosphereModel_SetRealParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.AtmosphereModel_SetStringParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.AtmosphereModel_GetStringParameter(self, *args)

    def GetFluxReader(self):
        return _gmat_py.AtmosphereModel_GetFluxReader(self)

    def GetFluxData(self, epoch=-1.0):
        return _gmat_py.AtmosphereModel_GetFluxData(self, epoch)

    def HasLocalClones(self):
        return _gmat_py.AtmosphereModel_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.AtmosphereModel_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.AtmosphereModel_SetClass(base)

# Register AtmosphereModel in _gmat_py:
_gmat_py.AtmosphereModel_swigregister(AtmosphereModel)
class ExponentialAtmosphere(AtmosphereModel):
    r"""
    An exponentially modeled atmosphere based on Vallado, pp 532-534 and Wertz,
    p 820.

    The exponential atmosphere model in Vallado (2001) and Wertz (1978).

    This code calculates the atmospheric density at a given position based on
    the altitude of the input state above the spherical Earth.  This model does
    not include an atmospheric bulge due to solar heating.  The code will need
    to be refined to use the oblate Earth once oblateness is added to the code.

    The density is given by

    .. math::

        \rho = \rho_0 e^{-{{h_{ellp} - h_0}\over{H}}}

    where :math:`\rho_0` is a reference density, specified at a reference altitude
    :math:`h_0`, :math:`h_{ellp}` is the height of the specified position above the
    body's ellipsoid, and :math:`H` is a scale height, used to scale the other
    variables in the formula.

    Developers and other users can build exponential models for bodies other than
    the Earth by deriving a class off of this one and overriding the SetConstants
    method.

    TODO: Replace the spherical Earth model with an oblate Earth model.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ExponentialAtmosphere

    def __init__(self, *args):
        _gmat_py.ExponentialAtmosphere_swiginit(self, _gmat_py.new_ExponentialAtmosphere(*args))

    def SetCentralBody(self, cb):
        return _gmat_py.ExponentialAtmosphere_SetCentralBody(self, cb)

    def ReadParameters(self, cbName):
        return _gmat_py.ExponentialAtmosphere_ReadParameters(self, cbName)

    def Density(self, *args):
        return _gmat_py.ExponentialAtmosphere_Density(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ExponentialAtmosphere_SetClass(base)

# Register ExponentialAtmosphere in _gmat_py:
_gmat_py.ExponentialAtmosphere_swigregister(ExponentialAtmosphere)
class JacchiaRobertsAtmosphere(AtmosphereModel):
    r"""
    The Jacchia-Roberts atmosphere.

    Notes: This is the JR model, ported from the Swingby/Windows source
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_JacchiaRobertsAtmosphere

    def __init__(self, *args):
        _gmat_py.JacchiaRobertsAtmosphere_swiginit(self, _gmat_py.new_JacchiaRobertsAtmosphere(*args))

    def Clone(self):
        return _gmat_py.JacchiaRobertsAtmosphere_Clone(self)

    def Density(self, *args):
        return _gmat_py.JacchiaRobertsAtmosphere_Density(self, *args)

    def SetCentralBody(self, cb):
        return _gmat_py.JacchiaRobertsAtmosphere_SetCentralBody(self, cb)

    @staticmethod
    def SetClass(base):
        return _gmat_py.JacchiaRobertsAtmosphere_SetClass(base)

# Register JacchiaRobertsAtmosphere in _gmat_py:
_gmat_py.JacchiaRobertsAtmosphere_swigregister(JacchiaRobertsAtmosphere)
class Msise90Atmosphere(AtmosphereModel):
    r"""
    The MSISE90 atmosphere

    Wraps the MSISE90 atmosphere code, ported by a.i. Solutions from the FORTRAN,
    into the GMAT atmosphere model format.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Msise90Atmosphere

    def __init__(self, *args):
        _gmat_py.Msise90Atmosphere_swiginit(self, _gmat_py.new_Msise90Atmosphere(*args))

    def Density(self, *args):
        return _gmat_py.Msise90Atmosphere_Density(self, *args)

    def Clone(self):
        return _gmat_py.Msise90Atmosphere_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Msise90Atmosphere_SetClass(base)

# Register Msise90Atmosphere in _gmat_py:
_gmat_py.Msise90Atmosphere_swigregister(Msise90Atmosphere)
class SimpleExponentialAtmosphere(AtmosphereModel):
    r"""
    An exponentially modeled atmosphere based on the STK GUI

    An exponential atmosphere model based on the 3-parameter model in STK.

    This code calculates the atmosphereic density at a given position based on
    the altitude of the input state above the spherical Earth.  This model does
    not include an atmospheric bulge due to solar heating.  The code will need
    to be refined to use the oblate Earth once oblateness is added to the code.

    The density is given by

    .. math::

        \rho = \rho_0 e^{-{{h_{ellp} - h_0}\over{H}}}

    where :math:`\rho_0` is a reference density, specified at a reference altitude
    :math:`h_0`, :math:`h_{ellp}` is the height of the specified position above the
    body's ellipsoid, and :math:`H` is a scale height, used to scale the other
    variables in the formula.

    Developers and other users can build exponential models for bodies other than
    the Earth by deriving a class off of this one and overriding the SetConstants
    method.

    TODO: Replace the spherical Earth model with an oblate Earth model.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SimpleExponentialAtmosphere

    def __init__(self, *args):
        _gmat_py.SimpleExponentialAtmosphere_swiginit(self, _gmat_py.new_SimpleExponentialAtmosphere(*args))

    def Density(self, *args):
        return _gmat_py.SimpleExponentialAtmosphere_Density(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SimpleExponentialAtmosphere_SetClass(base)

# Register SimpleExponentialAtmosphere in _gmat_py:
_gmat_py.SimpleExponentialAtmosphere_swigregister(SimpleExponentialAtmosphere)
DE_DE405 = _gmat_py.DE_DE405
DE_DE421 = _gmat_py.DE_DE421
DE_DE424 = _gmat_py.DE_DE424
DE_DE430 = _gmat_py.DE_DE430
DE_ASCII = _gmat_py.DE_ASCII
DE_BINARY = _gmat_py.DE_BINARY
class PlanetaryEphem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PlanetaryEphem

    def GetName(self):
        return _gmat_py.PlanetaryEphem_GetName(self)

    def GetBodyID(self, bodyName):
        r"""
        Returns the body ID number for the specified body.

        :type bodyName: string
        :param bodyName: body whose ID is requested.

        :rtype: int
        :return: the body ID number for the specified body.
        """
        return _gmat_py.PlanetaryEphem_GetBodyID(self, bodyName)

    def GetPosVel(self, *args):
        return _gmat_py.PlanetaryEphem_GetPosVel(self, *args)

    def GetPosDelta(self, forBody, atTime1, atTime2, overrideTimeSystem=False):
        return _gmat_py.PlanetaryEphem_GetPosDelta(self, forBody, atTime1, atTime2, overrideTimeSystem)

    def GetStartDayAndYear(self):
        r"""
        Returns the day-of-year and year of the start time of the file.

        :rtype: int
        :return: the day-of-year and year of the start time of the file..
        """
        return _gmat_py.PlanetaryEphem_GetStartDayAndYear(self)

# Register PlanetaryEphem in _gmat_py:
_gmat_py.PlanetaryEphem_swigregister(PlanetaryEphem)
class DeFile(PlanetaryEphem):
    r"""
    This is the class that handles access to a DE file.

    TODO: : complete Convert method for converting to binary

    Notes: Code reused from or based on JPL/JSC (D. Hoffman) code.

    If an ASCII file is input on creation, the file will be converted to
          a file in native binary format, for efficiency.  This conversion
          assumes that there is an appropriate header file in the same directory
          as the ASCII file.  The header file should be called header.FMT, where
          FMT is the format (e.g. 405, etc.) of the DE file.  NOTE: Conversion
          not yet done.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        default constructor

        |

        *Overload 2:*
        copy constructor
        """
        _gmat_py.DeFile_swiginit(self, _gmat_py.new_DeFile(*args))
    __swig_destroy__ = _gmat_py.delete_DeFile

    def Initialize(self):
        r""" method to initialize the DeFile - must be done before De file can be read"""
        return _gmat_py.DeFile_Initialize(self)

    def GetBodyID(self, bodyName):
        r""" method to return the body ID for the requested body"""
        return _gmat_py.DeFile_GetBodyID(self, bodyName)

    def GetDeFileType(self):
        return _gmat_py.DeFile_GetDeFileType(self)

    def GetPosVel(self, *args):
        return _gmat_py.DeFile_GetPosVel(self, *args)

    def GetPosDelta(self, forBody, atTime1, atTime2, overrideTimeSystem=False):
        return _gmat_py.DeFile_GetPosDelta(self, forBody, atTime1, atTime2, overrideTimeSystem)

    def GetAnglesAndRates(self, *args):
        return _gmat_py.DeFile_GetAnglesAndRates(self, *args)

    def GetStartDayAndYear(self):
        r"""
        method to return the day-of-year and year of the start time of the
        DE file.
        """
        return _gmat_py.DeFile_GetStartDayAndYear(self)

    def Convert(self, deFileNameAscii):
        r"""
        method to convert an ASCII file to a binary file; this method assumes that
        there is  an appropriate header file in the same directory as the
        ASCII file.  TODO: - Implementation is currently TBD
        """
        return _gmat_py.DeFile_Convert(self, deFileNameAscii)
    SUN_ID = _gmat_py.DeFile_SUN_ID
    r""" static values for the IDs for each celestial body, as used on the DE files."""
    MERCURY_ID = _gmat_py.DeFile_MERCURY_ID
    VENUS_ID = _gmat_py.DeFile_VENUS_ID
    EARTH_ID = _gmat_py.DeFile_EARTH_ID
    MOON_ID = _gmat_py.DeFile_MOON_ID
    MARS_ID = _gmat_py.DeFile_MARS_ID
    JUPITER_ID = _gmat_py.DeFile_JUPITER_ID
    SATURN_ID = _gmat_py.DeFile_SATURN_ID
    URANUS_ID = _gmat_py.DeFile_URANUS_ID
    NEPTUNE_ID = _gmat_py.DeFile_NEPTUNE_ID
    PLUTO_ID = _gmat_py.DeFile_PLUTO_ID
    SS_BARY_ID = _gmat_py.DeFile_SS_BARY_ID
    EM_BARY_ID = _gmat_py.DeFile_EM_BARY_ID
    NUTATIONS_ID = _gmat_py.DeFile_NUTATIONS_ID
    LIBRATIONS_ID = _gmat_py.DeFile_LIBRATIONS_ID
    ARRAY_SIZE_200 = _gmat_py.DeFile_ARRAY_SIZE_200
    ARRAY_SIZE_405 = _gmat_py.DeFile_ARRAY_SIZE_405
    ARRAY_SIZE_421 = _gmat_py.DeFile_ARRAY_SIZE_421
    ARRAY_SIZE_424 = _gmat_py.DeFile_ARRAY_SIZE_424
    ARRAY_SIZE_430 = _gmat_py.DeFile_ARRAY_SIZE_430
    MAX_ARRAY_SIZE = _gmat_py.DeFile_MAX_ARRAY_SIZE
    FAILURE = _gmat_py.DeFile_FAILURE
    SUCCESS = _gmat_py.DeFile_SUCCESS

    @staticmethod
    def SetClass(base):
        return _gmat_py.DeFile_SetClass(base)

# Register DeFile in _gmat_py:
_gmat_py.DeFile_swigregister(DeFile)
class ShadowState(object):
    r"""Base class definition for the ShadowState."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.ShadowState_swiginit(self, _gmat_py.new_ShadowState(*args))
    __swig_destroy__ = _gmat_py.delete_ShadowState

    def SetSolarSystem(self, ss):
        return _gmat_py.ShadowState_SetSolarSystem(self, ss)

    def FindShadowState(self, lit, dark, shadowModel, state, cbSun, sunSat, force, sunRad, bodyRad, psunrad, apparentSunRadius, apparentBodyRadius, apparentDistFromSunToBody):
        return _gmat_py.ShadowState_FindShadowState(self, lit, dark, shadowModel, state, cbSun, sunSat, force, sunRad, bodyRad, psunrad, apparentSunRadius, apparentBodyRadius, apparentDistFromSunToBody)

# Register ShadowState in _gmat_py:
_gmat_py.ShadowState_swigregister(ShadowState)
class SolarFluxReader(object):
    r"""SolarFluxReader class will be used by the AtomsphereModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.SolarFluxReader_swiginit(self, _gmat_py.new_SolarFluxReader(*args))
    __swig_destroy__ = _gmat_py.delete_SolarFluxReader

    def Open(self):
        r""" Open CSSI and Schatten files if opened"""
        return _gmat_py.SolarFluxReader_Open(self)

    def Close(self):
        r""" Close CSSI and Schatten files if opened"""
        return _gmat_py.SolarFluxReader_Close(self)

    def LoadFluxData(self, *args):
        r""" Load data from both opened files"""
        return _gmat_py.SolarFluxReader_LoadFluxData(self, *args)

    def GetInputs(self, epoch):
        r""" Get Flux data from either of two vectors filled in during LoadFluxData"""
        return _gmat_py.SolarFluxReader_GetInputs(self, epoch)

    def GetEpochs(self, hStart, hEnd, pStart, pEnd):
        return _gmat_py.SolarFluxReader_GetEpochs(self, hStart, hEnd, pStart, pEnd)

    def PrepareApData(self, fD, epoch):
        return _gmat_py.SolarFluxReader_PrepareApData(self, fD, epoch)

    def PrepareKpData(self, fD, epoch):
        return _gmat_py.SolarFluxReader_PrepareKpData(self, fD, epoch)

    def SetSchattenFlags(self, timingSet, magnitudeSet):
        return _gmat_py.SolarFluxReader_SetSchattenFlags(self, timingSet, magnitudeSet)

    def SetConstValues(self, f107, f107a, kp, ap):
        return _gmat_py.SolarFluxReader_SetConstValues(self, f107, f107a, kp, ap)

    def SetHistoricDataSource(self, dataSource):
        return _gmat_py.SolarFluxReader_SetHistoricDataSource(self, dataSource)

    def SetPredictedDataSource(self, dataSource):
        return _gmat_py.SolarFluxReader_SetPredictedDataSource(self, dataSource)

# Register SolarFluxReader in _gmat_py:
_gmat_py.SolarFluxReader_swigregister(SolarFluxReader)
class SolarFluxReader_FluxDataCSSI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    epoch = property(_gmat_py.SolarFluxReader_FluxDataCSSI_epoch_get, _gmat_py.SolarFluxReader_FluxDataCSSI_epoch_set)
    kp = property(_gmat_py.SolarFluxReader_FluxDataCSSI_kp_get, _gmat_py.SolarFluxReader_FluxDataCSSI_kp_set)
    ap = property(_gmat_py.SolarFluxReader_FluxDataCSSI_ap_get, _gmat_py.SolarFluxReader_FluxDataCSSI_ap_set)
    apAvg = property(_gmat_py.SolarFluxReader_FluxDataCSSI_apAvg_get, _gmat_py.SolarFluxReader_FluxDataCSSI_apAvg_set)
    adjF107 = property(_gmat_py.SolarFluxReader_FluxDataCSSI_adjF107_get, _gmat_py.SolarFluxReader_FluxDataCSSI_adjF107_set)
    adjCtrF107a = property(_gmat_py.SolarFluxReader_FluxDataCSSI_adjCtrF107a_get, _gmat_py.SolarFluxReader_FluxDataCSSI_adjCtrF107a_set)
    obsF107 = property(_gmat_py.SolarFluxReader_FluxDataCSSI_obsF107_get, _gmat_py.SolarFluxReader_FluxDataCSSI_obsF107_set)
    obsCtrF107a = property(_gmat_py.SolarFluxReader_FluxDataCSSI_obsCtrF107a_get, _gmat_py.SolarFluxReader_FluxDataCSSI_obsCtrF107a_set)
    isHistData = property(_gmat_py.SolarFluxReader_FluxDataCSSI_isHistData_get, _gmat_py.SolarFluxReader_FluxDataCSSI_isHistData_set)

    def __init__(self):
        _gmat_py.SolarFluxReader_FluxDataCSSI_swiginit(self, _gmat_py.new_SolarFluxReader_FluxDataCSSI())
    __swig_destroy__ = _gmat_py.delete_SolarFluxReader_FluxDataCSSI

# Register SolarFluxReader_FluxDataCSSI in _gmat_py:
_gmat_py.SolarFluxReader_FluxDataCSSI_swigregister(SolarFluxReader_FluxDataCSSI)
class SolarFluxReader_FluxData(SolarFluxReader_FluxDataCSSI):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F107a = property(_gmat_py.SolarFluxReader_FluxData_F107a_get, _gmat_py.SolarFluxReader_FluxData_F107a_set)
    apSchatten = property(_gmat_py.SolarFluxReader_FluxData_apSchatten_get, _gmat_py.SolarFluxReader_FluxData_apSchatten_set)

    def __init__(self, *args):
        _gmat_py.SolarFluxReader_FluxData_swiginit(self, _gmat_py.new_SolarFluxReader_FluxData(*args))
    index = property(_gmat_py.SolarFluxReader_FluxData_index_get, _gmat_py.SolarFluxReader_FluxData_index_set)
    id = property(_gmat_py.SolarFluxReader_FluxData_id_get, _gmat_py.SolarFluxReader_FluxData_id_set)
    __swig_destroy__ = _gmat_py.delete_SolarFluxReader_FluxData

# Register SolarFluxReader_FluxData in _gmat_py:
_gmat_py.SolarFluxReader_FluxData_swigregister(SolarFluxReader_FluxData)
class SolarSystem(GmatBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.SolarSystem_swiginit(self, _gmat_py.new_SolarSystem(*args))
    __swig_destroy__ = _gmat_py.delete_SolarSystem

    def Initialize(self):
        return _gmat_py.SolarSystem_Initialize(self)

    def CreatePlanetarySource(self, setDefault=True):
        return _gmat_py.SolarSystem_CreatePlanetarySource(self, setDefault)

    def GetPlanetarySourceTypes(self):
        return _gmat_py.SolarSystem_GetPlanetarySourceTypes(self)

    def GetPlanetarySourceNames(self):
        return _gmat_py.SolarSystem_GetPlanetarySourceNames(self)

    def GetPlanetarySourceTypesInUse(self):
        return _gmat_py.SolarSystem_GetPlanetarySourceTypesInUse(self)

    def SetPlanetarySourceName(self, sourceType, fileName):
        return _gmat_py.SolarSystem_SetPlanetarySourceName(self, sourceType, fileName)

    def SetPlanetarySourceTypesInUse(self, sourceTypes):
        return _gmat_py.SolarSystem_SetPlanetarySourceTypesInUse(self, sourceTypes)

    def GetPlanetarySourceId(self, sourceType):
        return _gmat_py.SolarSystem_GetPlanetarySourceId(self, sourceType)

    def GetPlanetarySourceName(self, sourceType):
        return _gmat_py.SolarSystem_GetPlanetarySourceName(self, sourceType)

    def GetCurrentPlanetarySource(self):
        return _gmat_py.SolarSystem_GetCurrentPlanetarySource(self)

    def GetSpiceKernelNames(self):
        return _gmat_py.SolarSystem_GetSpiceKernelNames(self)

    def SetIsSpiceAllowedForDefaultBodies(self, allowSpice):
        return _gmat_py.SolarSystem_SetIsSpiceAllowedForDefaultBodies(self, allowSpice)

    def IsSpiceAllowedForDefaultBodies(self):
        return _gmat_py.SolarSystem_IsSpiceAllowedForDefaultBodies(self)

    def GetPlanetaryEphem(self):
        return _gmat_py.SolarSystem_GetPlanetaryEphem(self)

    def ResetToDefaults(self):
        return _gmat_py.SolarSystem_ResetToDefaults(self)

    def AddBody(self, cb):
        return _gmat_py.SolarSystem_AddBody(self, cb)

    @staticmethod
    def GetBodyName(body):
        return _gmat_py.SolarSystem_GetBodyName(body)

    def GetBody(self, *args):
        return _gmat_py.SolarSystem_GetBody(self, *args)

    def DeleteBody(self, withName):
        return _gmat_py.SolarSystem_DeleteBody(self, withName)

    def AddSpecialPoint(self, cp):
        r""" method to add a special point to the Solar System"""
        return _gmat_py.SolarSystem_AddSpecialPoint(self, cp)

    def GetSpecialPoint(self, withName):
        r""" methods to return a pointer to a specific SpecialCelestialPoint"""
        return _gmat_py.SolarSystem_GetSpecialPoint(self, withName)

    def GetBodiesInUse(self):
        return _gmat_py.SolarSystem_GetBodiesInUse(self)

    def IsBodyInUse(self, theBody):
        return _gmat_py.SolarSystem_IsBodyInUse(self, theBody)

    def GetDefaultBodies(self):
        return _gmat_py.SolarSystem_GetDefaultBodies(self)

    def GetUserDefinedBodies(self):
        return _gmat_py.SolarSystem_GetUserDefinedBodies(self)

    def GetPosVelSource(self):
        return _gmat_py.SolarSystem_GetPosVelSource(self)

    def GetSourceFileName(self):
        return _gmat_py.SolarSystem_GetSourceFileName(self)

    def GetOverrideTimeSystem(self):
        return _gmat_py.SolarSystem_GetOverrideTimeSystem(self)

    def GetEphemUpdateInterval(self):
        return _gmat_py.SolarSystem_GetEphemUpdateInterval(self)

    def GetValidModelList(self, m, forBody):
        return _gmat_py.SolarSystem_GetValidModelList(self, m, forBody)

    def SetSource(self, *args):
        return _gmat_py.SolarSystem_SetSource(self, *args)

    def SetSourceFile(self, src):
        return _gmat_py.SolarSystem_SetSourceFile(self, src)

    def SetSPKFile(self, spkFile):
        return _gmat_py.SolarSystem_SetSPKFile(self, spkFile)

    def SetLSKFile(self, lskFile):
        return _gmat_py.SolarSystem_SetLSKFile(self, lskFile)

    def SetPCKFile(self, pckFile):
        return _gmat_py.SolarSystem_SetPCKFile(self, pckFile)

    def SetOverrideTimeSystem(self, overrideIt):
        return _gmat_py.SolarSystem_SetOverrideTimeSystem(self, overrideIt)

    def SetEphemUpdateInterval(self, intvl):
        return _gmat_py.SolarSystem_SetEphemUpdateInterval(self, intvl)

    def AddValidModelName(self, m, forBody, theModel):
        return _gmat_py.SolarSystem_AddValidModelName(self, m, forBody, theModel)

    def RemoveValidModelName(self, m, forBody, theModel):
        return _gmat_py.SolarSystem_RemoveValidModelName(self, m, forBody, theModel)

    def GetParameterText(self, id):
        return _gmat_py.SolarSystem_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SolarSystem_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SolarSystem_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SolarSystem_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.SolarSystem_GetIntegerParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.SolarSystem_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.SolarSystem_SetRealParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.SolarSystem_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.SolarSystem_SetBooleanParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.SolarSystem_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.SolarSystem_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.SolarSystem_GetStringArrayParameter(self, *args)

    def GetOwnedObjectCount(self):
        return _gmat_py.SolarSystem_GetOwnedObjectCount(self)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.SolarSystem_GetOwnedObject(self, whichOne)

    def IsParameterReadOnly(self, id):
        return _gmat_py.SolarSystem_IsParameterReadOnly(self, id)

    def IsParameterCloaked(self, id):
        return _gmat_py.SolarSystem_IsParameterCloaked(self, id)

    def IsParameterEqualToDefault(self, id):
        return _gmat_py.SolarSystem_IsParameterEqualToDefault(self, id)

    def SaveAllAsDefault(self):
        return _gmat_py.SolarSystem_SaveAllAsDefault(self)

    def SaveParameterAsDefault(self, id):
        return _gmat_py.SolarSystem_SaveParameterAsDefault(self, id)

    def Clone(self):
        return _gmat_py.SolarSystem_Clone(self)

    def Copy(self, orig):
        return _gmat_py.SolarSystem_Copy(self, orig)

    def HasLocalClones(self):
        return _gmat_py.SolarSystem_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.SolarSystem_RenameRefObject(self, type, oldName, newName)

    def Help(self, *args):
        val = _gmat_py.SolarSystem_Help(self, *args)

        print(val)
        val = ""


        return val


    @staticmethod
    def SetClass(base):
        return _gmat_py.SolarSystem_SetClass(base)

# Register SolarSystem in _gmat_py:
_gmat_py.SolarSystem_swigregister(SolarSystem)
SolarSystem.SOLAR_SYSTEM_BARYCENTER_NAME = _gmat_py.cvar.SolarSystem_SOLAR_SYSTEM_BARYCENTER_NAME
SolarSystem.SUN_NAME = _gmat_py.cvar.SolarSystem_SUN_NAME
SolarSystem.MERCURY_NAME = _gmat_py.cvar.SolarSystem_MERCURY_NAME
SolarSystem.VENUS_NAME = _gmat_py.cvar.SolarSystem_VENUS_NAME
SolarSystem.EARTH_NAME = _gmat_py.cvar.SolarSystem_EARTH_NAME
SolarSystem.MOON_NAME = _gmat_py.cvar.SolarSystem_MOON_NAME
SolarSystem.MARS_NAME = _gmat_py.cvar.SolarSystem_MARS_NAME
SolarSystem.PHOBOS_NAME = _gmat_py.cvar.SolarSystem_PHOBOS_NAME
SolarSystem.DEIMOS_NAME = _gmat_py.cvar.SolarSystem_DEIMOS_NAME
SolarSystem.JUPITER_NAME = _gmat_py.cvar.SolarSystem_JUPITER_NAME
SolarSystem.METIS_NAME = _gmat_py.cvar.SolarSystem_METIS_NAME
SolarSystem.ADRASTEA_NAME = _gmat_py.cvar.SolarSystem_ADRASTEA_NAME
SolarSystem.AMALTHEA_NAME = _gmat_py.cvar.SolarSystem_AMALTHEA_NAME
SolarSystem.THEBE_NAME = _gmat_py.cvar.SolarSystem_THEBE_NAME
SolarSystem.IO_NAME = _gmat_py.cvar.SolarSystem_IO_NAME
SolarSystem.EUROPA_NAME = _gmat_py.cvar.SolarSystem_EUROPA_NAME
SolarSystem.GANYMEDE_NAME = _gmat_py.cvar.SolarSystem_GANYMEDE_NAME
SolarSystem.CALLISTO_NAME = _gmat_py.cvar.SolarSystem_CALLISTO_NAME
SolarSystem.SATURN_NAME = _gmat_py.cvar.SolarSystem_SATURN_NAME
SolarSystem.PAN_NAME = _gmat_py.cvar.SolarSystem_PAN_NAME
SolarSystem.ATLAS_NAME = _gmat_py.cvar.SolarSystem_ATLAS_NAME
SolarSystem.PROMETHEUS_NAME = _gmat_py.cvar.SolarSystem_PROMETHEUS_NAME
SolarSystem.PANDORA_NAME = _gmat_py.cvar.SolarSystem_PANDORA_NAME
SolarSystem.EPIMETHEUS_NAME = _gmat_py.cvar.SolarSystem_EPIMETHEUS_NAME
SolarSystem.JANUS_NAME = _gmat_py.cvar.SolarSystem_JANUS_NAME
SolarSystem.MIMAS_NAME = _gmat_py.cvar.SolarSystem_MIMAS_NAME
SolarSystem.ENCELADUS_NAME = _gmat_py.cvar.SolarSystem_ENCELADUS_NAME
SolarSystem.TETHYS_NAME = _gmat_py.cvar.SolarSystem_TETHYS_NAME
SolarSystem.TELESTO_NAME = _gmat_py.cvar.SolarSystem_TELESTO_NAME
SolarSystem.CALYPSO_NAME = _gmat_py.cvar.SolarSystem_CALYPSO_NAME
SolarSystem.DIONE_NAME = _gmat_py.cvar.SolarSystem_DIONE_NAME
SolarSystem.HELENE_NAME = _gmat_py.cvar.SolarSystem_HELENE_NAME
SolarSystem.RHEA_NAME = _gmat_py.cvar.SolarSystem_RHEA_NAME
SolarSystem.TITAN_NAME = _gmat_py.cvar.SolarSystem_TITAN_NAME
SolarSystem.IAPETUS_NAME = _gmat_py.cvar.SolarSystem_IAPETUS_NAME
SolarSystem.PHOEBE_NAME = _gmat_py.cvar.SolarSystem_PHOEBE_NAME
SolarSystem.URANUS_NAME = _gmat_py.cvar.SolarSystem_URANUS_NAME
SolarSystem.CORDELIA_NAME = _gmat_py.cvar.SolarSystem_CORDELIA_NAME
SolarSystem.OPHELIA_NAME = _gmat_py.cvar.SolarSystem_OPHELIA_NAME
SolarSystem.BIANCA_NAME = _gmat_py.cvar.SolarSystem_BIANCA_NAME
SolarSystem.CRESSIDA_NAME = _gmat_py.cvar.SolarSystem_CRESSIDA_NAME
SolarSystem.DESDEMONA_NAME = _gmat_py.cvar.SolarSystem_DESDEMONA_NAME
SolarSystem.JULIET_NAME = _gmat_py.cvar.SolarSystem_JULIET_NAME
SolarSystem.PORTIA_NAME = _gmat_py.cvar.SolarSystem_PORTIA_NAME
SolarSystem.ROSALIND_NAME = _gmat_py.cvar.SolarSystem_ROSALIND_NAME
SolarSystem.BELINDA_NAME = _gmat_py.cvar.SolarSystem_BELINDA_NAME
SolarSystem.PUCK_NAME = _gmat_py.cvar.SolarSystem_PUCK_NAME
SolarSystem.MIRANDA_NAME = _gmat_py.cvar.SolarSystem_MIRANDA_NAME
SolarSystem.ARIEL_NAME = _gmat_py.cvar.SolarSystem_ARIEL_NAME
SolarSystem.UMBRIEL_NAME = _gmat_py.cvar.SolarSystem_UMBRIEL_NAME
SolarSystem.TITANIA_NAME = _gmat_py.cvar.SolarSystem_TITANIA_NAME
SolarSystem.OBERON_NAME = _gmat_py.cvar.SolarSystem_OBERON_NAME
SolarSystem.NEPTUNE_NAME = _gmat_py.cvar.SolarSystem_NEPTUNE_NAME
SolarSystem.NAIAD_NAME = _gmat_py.cvar.SolarSystem_NAIAD_NAME
SolarSystem.THALASSA_NAME = _gmat_py.cvar.SolarSystem_THALASSA_NAME
SolarSystem.DESPINA_NAME = _gmat_py.cvar.SolarSystem_DESPINA_NAME
SolarSystem.GALATEA_NAME = _gmat_py.cvar.SolarSystem_GALATEA_NAME
SolarSystem.LARISSA_NAME = _gmat_py.cvar.SolarSystem_LARISSA_NAME
SolarSystem.PROTEUS_NAME = _gmat_py.cvar.SolarSystem_PROTEUS_NAME
SolarSystem.TRITON_NAME = _gmat_py.cvar.SolarSystem_TRITON_NAME
SolarSystem.PLUTO_NAME = _gmat_py.cvar.SolarSystem_PLUTO_NAME
SolarSystem.CHARON_NAME = _gmat_py.cvar.SolarSystem_CHARON_NAME

class GmatCommand(GmatBase):
    r"""
    GmatCommand Base Class, used for Mission Control Sequence elements in scripts

    The GmatCommands all follow a "late-binding" philosophy, in that they do
    not set object associations until the Sandbox has been populated with both
    the objects that are used in the model and with the complete GmatCommand
    sequence.  Once the Sandbox is populated, it initializes the GmatCommand
    sequence by calling Initialize() on each GmatCommand, and then runs the
    sequence by calling Execute() on the first GmatCommand in the sequence.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_GmatCommand

    def SetGeneratingString(self, gs):
        return _gmat_py.GmatCommand_SetGeneratingString(self, gs)

    def GetGeneratingString(self, *args):
        return _gmat_py.GmatCommand_GetGeneratingString(self, *args)

    def SetCurrentFunction(self, function):
        return _gmat_py.GmatCommand_SetCurrentFunction(self, function)

    def GetCurrentFunction(self):
        return _gmat_py.GmatCommand_GetCurrentFunction(self)

    def SetCallingFunction(self, fm):
        return _gmat_py.GmatCommand_SetCallingFunction(self, fm)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.GmatCommand_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.GmatCommand_ClearWrappers(self)

    def CheckDataType(self, *args):
        return _gmat_py.GmatCommand_CheckDataType(self, *args)

    def SetObject(self, *args):
        return _gmat_py.GmatCommand_SetObject(self, *args)

    def GetGmatObject(self, *args):
        return _gmat_py.GmatCommand_GetGmatObject(self, *args)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.GmatCommand_SetInternalCoordSystem(self, cs)

    def SetupSummary(self, csName, entireMission=False, physicsOnly=False):
        return _gmat_py.GmatCommand_SetupSummary(self, csName, entireMission, physicsOnly)

    def SetSummaryName(self, *args):
        return _gmat_py.GmatCommand_SetSummaryName(self, *args)

    def GetSummaryName(self):
        return _gmat_py.GmatCommand_GetSummaryName(self)

    def SetSolarSystem(self, ss):
        return _gmat_py.GmatCommand_SetSolarSystem(self, ss)

    def SetTriggerManagers(self, trigs):
        return _gmat_py.GmatCommand_SetTriggerManagers(self, trigs)

    def SetConfiguredObjectMap(self, objMap):
        return _gmat_py.GmatCommand_SetConfiguredObjectMap(self, objMap)

    def SetObjectMap(self, map):
        return _gmat_py.GmatCommand_SetObjectMap(self, map)

    def GetObjectMap(self):
        return _gmat_py.GmatCommand_GetObjectMap(self)

    def SetGlobalObjectMap(self, map):
        return _gmat_py.GmatCommand_SetGlobalObjectMap(self, map)

    def SetTransientForces(self, tf):
        return _gmat_py.GmatCommand_SetTransientForces(self, tf)

    def SetPublisher(self, p):
        return _gmat_py.GmatCommand_SetPublisher(self, p)

    def GetPublisher(self):
        return _gmat_py.GmatCommand_GetPublisher(self)

    def GetPropStatus(self):
        return _gmat_py.GmatCommand_GetPropStatus(self)

    def GetObjectList(self):
        return _gmat_py.GmatCommand_GetObjectList(self)

    def AcceptsObjectType(self, theType):
        return _gmat_py.GmatCommand_AcceptsObjectType(self, theType)

    def Validate(self):
        return _gmat_py.GmatCommand_Validate(self)

    def GetParameterText(self, id):
        return _gmat_py.GmatCommand_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.GmatCommand_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.GmatCommand_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.GmatCommand_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.GmatCommand_IsParameterReadOnly(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.GmatCommand_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.GmatCommand_SetStringParameter(self, *args)

    def SetCondition(self, lhs, operation, rhs, atIndex=-999):
        return _gmat_py.GmatCommand_SetCondition(self, lhs, operation, rhs, atIndex)

    def SetConditionOperator(self, op, atIndex=-999):
        return _gmat_py.GmatCommand_SetConditionOperator(self, op, atIndex)

    def RemoveCondition(self, atIndex):
        return _gmat_py.GmatCommand_RemoveCondition(self, atIndex)

    def RemoveConditionOperator(self, atIndex):
        return _gmat_py.GmatCommand_RemoveConditionOperator(self, atIndex)

    def Initialize(self):
        return _gmat_py.GmatCommand_Initialize(self)

    def GetNext(self):
        return _gmat_py.GmatCommand_GetNext(self)

    def GetPrevious(self):
        return _gmat_py.GmatCommand_GetPrevious(self)

    def ForceSetNext(self, toCmd):
        return _gmat_py.GmatCommand_ForceSetNext(self, toCmd)

    def ForceSetPrevious(self, toCmd):
        return _gmat_py.GmatCommand_ForceSetPrevious(self, toCmd)

    def Append(self, cmd):
        return _gmat_py.GmatCommand_Append(self, cmd)

    def Insert(self, cmd, prev):
        return _gmat_py.GmatCommand_Insert(self, cmd, prev)

    def Remove(self, cmd):
        return _gmat_py.GmatCommand_Remove(self, cmd)

    def GetChildCommand(self, whichOne=0):
        return _gmat_py.GmatCommand_GetChildCommand(self, whichOne)

    def GetVariableCount(self):
        return _gmat_py.GmatCommand_GetVariableCount(self)

    def GetGoalCount(self):
        return _gmat_py.GmatCommand_GetGoalCount(self)

    def InterpretAction(self):
        return _gmat_py.GmatCommand_InterpretAction(self)

    def VerifyObjects(self):
        return _gmat_py.GmatCommand_VerifyObjects(self)

    def DepthIncrement(self):
        return _gmat_py.GmatCommand_DepthIncrement(self)

    def HasPropStateChanged(self):
        return _gmat_py.GmatCommand_HasPropStateChanged(self)

    def Execute(self):
        r"""
        The method that is fired to perform the GmatCommand.

        Derived classes implement this method to perform their actions on
        GMAT objects.

        :rtype: boolean
        :return: true if the GmatCommand runs to completion, false if an error
                    occurs.
        """
        return _gmat_py.GmatCommand_Execute(self)

    def SkipInterrupt(self):
        return _gmat_py.GmatCommand_SkipInterrupt(self)

    def RunComplete(self, *args):
        return _gmat_py.GmatCommand_RunComplete(self, *args)

    def SetRunState(self, newState):
        return _gmat_py.GmatCommand_SetRunState(self, newState)

    def HasConfigurationChanged(self):
        return _gmat_py.GmatCommand_HasConfigurationChanged(self)

    def ConfigurationChanged(self, tf):
        return _gmat_py.GmatCommand_ConfigurationChanged(self, tf)

    def HasAFunction(self):
        return _gmat_py.GmatCommand_HasAFunction(self)

    def NeedsServerStartup(self):
        return _gmat_py.GmatCommand_NeedsServerStartup(self)

    def IsExecuting(self):
        return _gmat_py.GmatCommand_IsExecuting(self)

    def GetCloneCount(self):
        return _gmat_py.GmatCommand_GetCloneCount(self)

    def GetClone(self, cloneIndex=0):
        return _gmat_py.GmatCommand_GetClone(self, cloneIndex)

    def AffectsClones(self):
        return _gmat_py.GmatCommand_AffectsClones(self)

    def GetUpdatedObject(self):
        return _gmat_py.GmatCommand_GetUpdatedObject(self)

    def GetUpdatedObjectParameterIndex(self):
        return _gmat_py.GmatCommand_GetUpdatedObjectParameterIndex(self)

    def SetDataPublishingFlag(self, allow):
        return _gmat_py.GmatCommand_SetDataPublishingFlag(self, allow)

    def GetDataPublishingFlag(self):
        return _gmat_py.GmatCommand_GetDataPublishingFlag(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.GmatCommand_SetClass(base)

# Register GmatCommand in _gmat_py:
_gmat_py.GmatCommand_swigregister(GmatCommand)
class BranchCommand(GmatCommand):
    r"""Definition for the Command classes that branch (Target, If, While, etc)."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BranchCommand

    def AddBranch(self, cmd, which=0):
        return _gmat_py.BranchCommand_AddBranch(self, cmd, which)

    def AddToFrontOfBranch(self, cmd, which=0):
        return _gmat_py.BranchCommand_AddToFrontOfBranch(self, cmd, which)

    def ExecuteBranch(self, which=0):
        return _gmat_py.BranchCommand_ExecuteBranch(self, which)

    def Append(self, cmd):
        return _gmat_py.BranchCommand_Append(self, cmd)

    def Insert(self, cmd, prev):
        return _gmat_py.BranchCommand_Insert(self, cmd, prev)

    def Remove(self, cmd):
        return _gmat_py.BranchCommand_Remove(self, cmd)

    def BuildCommandSummaryString(self, commandCompleted=True):
        return _gmat_py.BranchCommand_BuildCommandSummaryString(self, commandCompleted)

    def InsertRightAfter(self, cmd):
        return _gmat_py.BranchCommand_InsertRightAfter(self, cmd)

    def SetSolarSystem(self, ss):
        return _gmat_py.BranchCommand_SetSolarSystem(self, ss)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.BranchCommand_SetInternalCoordSystem(self, cs)

    def SetObjectMap(self, map):
        return _gmat_py.BranchCommand_SetObjectMap(self, map)

    def SetGlobalObjectMap(self, map):
        return _gmat_py.BranchCommand_SetGlobalObjectMap(self, map)

    def GetGeneratingString(self, *args):
        return _gmat_py.BranchCommand_GetGeneratingString(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.BranchCommand_RenameRefObject(self, type, oldName, newName)

    def GetNext(self):
        return _gmat_py.BranchCommand_GetNext(self)

    def GetChildCommand(self, whichOne=0):
        return _gmat_py.BranchCommand_GetChildCommand(self, whichOne)

    def GetNextWhileExecuting(self):
        return _gmat_py.BranchCommand_GetNextWhileExecuting(self)

    def SetTransientForces(self, tf):
        return _gmat_py.BranchCommand_SetTransientForces(self, tf)

    def Initialize(self):
        return _gmat_py.BranchCommand_Initialize(self)

    def TakeAction(self, *args):
        return _gmat_py.BranchCommand_TakeAction(self, *args)

    def Execute(self):
        return _gmat_py.BranchCommand_Execute(self)

    def RunComplete(self):
        return _gmat_py.BranchCommand_RunComplete(self)

    def GetCommandsWithGmatFunctions(self):
        return _gmat_py.BranchCommand_GetCommandsWithGmatFunctions(self)

    def HasAFunction(self):
        return _gmat_py.BranchCommand_HasAFunction(self)

    def SetCallingFunction(self, fm):
        return _gmat_py.BranchCommand_SetCallingFunction(self, fm)

    def IsExecuting(self):
        return _gmat_py.BranchCommand_IsExecuting(self)

    def NeedsServerStartup(self):
        return _gmat_py.BranchCommand_NeedsServerStartup(self)

    def ResetExecutionState(self):
        return _gmat_py.BranchCommand_ResetExecutionState(self)

    def GetCloneCount(self):
        return _gmat_py.BranchCommand_GetCloneCount(self)

    def GetClone(self, cloneIndex):
        return _gmat_py.BranchCommand_GetClone(self, cloneIndex)

    def AffectsClones(self):
        return _gmat_py.BranchCommand_AffectsClones(self)

    def GetUpdatedObject(self):
        return _gmat_py.BranchCommand_GetUpdatedObject(self)

    def GetUpdatedObjectParameterIndex(self):
        return _gmat_py.BranchCommand_GetUpdatedObjectParameterIndex(self)

    def GetCurrentGeneratingString(self, *args):
        return _gmat_py.BranchCommand_GetCurrentGeneratingString(self, *args)

    def GetPropStatus(self):
        return _gmat_py.BranchCommand_GetPropStatus(self)

    def AddFileInfoToErrorMessage(self, msg):
        return _gmat_py.BranchCommand_AddFileInfoToErrorMessage(self, msg)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BranchCommand_SetClass(base)

# Register BranchCommand in _gmat_py:
_gmat_py.BranchCommand_swigregister(BranchCommand)
class ConditionalBranch(BranchCommand):
    r"""
    Declaration for the ConditionalBranch command class

    Command that manages processing for entry to the conditional
    branch commands.

    The ConditionalBranch command manages the conditional branch
    commands.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ConditionalBranch

    def SetCondition(self, lhs, operation, rhs, atIndex=-999):
        return _gmat_py.ConditionalBranch_SetCondition(self, lhs, operation, rhs, atIndex)

    def SetConditionOperator(self, op, atIndex=-999):
        return _gmat_py.ConditionalBranch_SetConditionOperator(self, op, atIndex)

    def RemoveCondition(self, atIndex):
        return _gmat_py.ConditionalBranch_RemoveCondition(self, atIndex)

    def RemoveConditionOperator(self, atIndex):
        return _gmat_py.ConditionalBranch_RemoveConditionOperator(self, atIndex)

    def Initialize(self):
        return _gmat_py.ConditionalBranch_Initialize(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ConditionalBranch_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.ConditionalBranch_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.ConditionalBranch_GetRefObjectNameArray(self, type)

    def GetRefObject(self, type, name, index):
        return _gmat_py.ConditionalBranch_GetRefObject(self, type, name, index)

    def SetRefObject(self, *args):
        return _gmat_py.ConditionalBranch_SetRefObject(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.ConditionalBranch_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ConditionalBranch_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ConditionalBranch_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ConditionalBranch_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.ConditionalBranch_GetIntegerParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.ConditionalBranch_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ConditionalBranch_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.ConditionalBranch_GetStringArrayParameter(self, *args)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.ConditionalBranch_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.ConditionalBranch_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.ConditionalBranch_ClearWrappers(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ConditionalBranch_SetClass(base)

# Register ConditionalBranch in _gmat_py:
_gmat_py.ConditionalBranch_swigregister(ConditionalBranch)
class SolverBranchCommand(BranchCommand):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SolverBranchCommand

    def AddListener(self, listener):
        return _gmat_py.SolverBranchCommand_AddListener(self, listener)

    def RemoveListener(self, listener):
        return _gmat_py.SolverBranchCommand_RemoveListener(self, listener)

    def ClearListeners(self):
        return _gmat_py.SolverBranchCommand_ClearListeners(self)

    def NotifyVariabledChanged(self, *args):
        return _gmat_py.SolverBranchCommand_NotifyVariabledChanged(self, *args)

    def NotifyConstraintChanged(self, name, desiredValue, value):
        return _gmat_py.SolverBranchCommand_NotifyConstraintChanged(self, name, desiredValue, value)

    def GetNext(self):
        return _gmat_py.SolverBranchCommand_GetNext(self)

    def Initialize(self):
        return _gmat_py.SolverBranchCommand_Initialize(self)

    def TakeAction(self, *args):
        return _gmat_py.SolverBranchCommand_TakeAction(self, *args)

    def RunComplete(self):
        return _gmat_py.SolverBranchCommand_RunComplete(self)

    def InterpretAction(self):
        return _gmat_py.SolverBranchCommand_InterpretAction(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.SolverBranchCommand_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.SolverBranchCommand_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.SolverBranchCommand_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.SolverBranchCommand_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SolverBranchCommand_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SolverBranchCommand_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SolverBranchCommand_GetParameterTypeString(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.SolverBranchCommand_SetStringParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.SolverBranchCommand_GetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.SolverBranchCommand_GetStringArrayParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.SolverBranchCommand_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.SolverBranchCommand_SetBooleanParameter(self, *args)

    def NeedsServerStartup(self):
        return _gmat_py.SolverBranchCommand_NeedsServerStartup(self)

    def GetCloneCount(self):
        return _gmat_py.SolverBranchCommand_GetCloneCount(self)

    def GetClone(self, cloneIndex=0):
        return _gmat_py.SolverBranchCommand_GetClone(self, cloneIndex)

    def HasLocalClones(self):
        return _gmat_py.SolverBranchCommand_HasLocalClones(self)

    def UpdateClonedObject(self, obj):
        return _gmat_py.SolverBranchCommand_UpdateClonedObject(self, obj)

    def UpdateClonedObjectParameter(self, obj, updatedParameterId):
        return _gmat_py.SolverBranchCommand_UpdateClonedObjectParameter(self, obj, updatedParameterId)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SolverBranchCommand_SetClass(base)

# Register SolverBranchCommand in _gmat_py:
_gmat_py.SolverBranchCommand_swigregister(SolverBranchCommand)
class ManageObject(GmatCommand):
    r"""
    Class declaration for the ManageObject command- this is a base class for the
    Create and GLobal commands

    Base class for Create and Global commands
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ManageObject

    def GetParameterText(self, id):
        return _gmat_py.ManageObject_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ManageObject_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ManageObject_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ManageObject_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.ManageObject_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ManageObject_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.ManageObject_GetStringArrayParameter(self, id)

    def GetGeneratingString(self, *args):
        return _gmat_py.ManageObject_GetGeneratingString(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.ManageObject_TakeAction(self, *args)

    def Initialize(self):
        return _gmat_py.ManageObject_Initialize(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ManageObject_SetClass(base)

# Register ManageObject in _gmat_py:
_gmat_py.ManageObject_swigregister(ManageObject)
TIME_ROUNDOFF = _gmat_py.TIME_ROUNDOFF
DEFAULT_STOP_TOLERANCE = _gmat_py.DEFAULT_STOP_TOLERANCE
class PropagationEnabledCommand(GmatCommand):
    r"""
    PropagationEnabledCommand is a base class used for commands that perform
    propagation.  It provides the methods and interfaces needed perform basic
    time-based propagation.  It does not provide interfaces for more complicated
    stopping conditions; derived classes provide those interfaces.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PropagationEnabledCommand

    def SetTransientForces(self, tf):
        return _gmat_py.PropagationEnabledCommand_SetTransientForces(self, tf)

    def Initialize(self):
        return _gmat_py.PropagationEnabledCommand_Initialize(self)

    def HasLocalClones(self):
        return _gmat_py.PropagationEnabledCommand_HasLocalClones(self)

    def UpdateClonedObject(self, obj):
        return _gmat_py.PropagationEnabledCommand_UpdateClonedObject(self, obj)

    def UpdateClonedObjectParameter(self, obj, updatedParameterId):
        return _gmat_py.PropagationEnabledCommand_UpdateClonedObjectParameter(self, obj, updatedParameterId)

    def CreateNewSegments(self, epochNow):
        return _gmat_py.PropagationEnabledCommand_CreateNewSegments(self, epochNow)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PropagationEnabledCommand_SetClass(base)

# Register PropagationEnabledCommand in _gmat_py:
_gmat_py.PropagationEnabledCommand_swigregister(PropagationEnabledCommand)
class SolverSequenceCommand(GmatCommand):
    r"""
    Definition for the SolverSequenceCommand base class

    Base class for commands specific to Solver Control Sequences

    This code is a partial refactorization of the Vary, Achieve, Minimize,
    and NonlinearConstraint commands to provide them with a common interface
    for accessing the name of the Solver associated with each command.  Full
    refactorization should be performed when schedule permits.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SolverSequenceCommand

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.SolverSequenceCommand_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.SolverSequenceCommand_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SolverSequenceCommand_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SolverSequenceCommand_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SolverSequenceCommand_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.SolverSequenceCommand_IsParameterReadOnly(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.SolverSequenceCommand_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.SolverSequenceCommand_SetStringParameter(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SolverSequenceCommand_SetClass(base)

# Register SolverSequenceCommand in _gmat_py:
_gmat_py.SolverSequenceCommand_swigregister(SolverSequenceCommand)
class Achieve(SolverSequenceCommand):
    r"""
    Definition for the Achieve command class

    Command that manages processing for targeter goals.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Achieve

    def __init__(self, *args):
        _gmat_py.Achieve_swiginit(self, _gmat_py.new_Achieve(*args))

    def Clone(self):
        return _gmat_py.Achieve_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Achieve_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Achieve_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Achieve_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.Achieve_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Achieve_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Achieve_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Achieve_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Achieve_IsParameterReadOnly(self, *args)

    def GetRealParameter(self, id):
        return _gmat_py.Achieve_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.Achieve_SetRealParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.Achieve_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.Achieve_SetStringParameter(self, *args)

    def SetField(self, id, value):
        return _gmat_py.Achieve_SetField(self, id, value)

    def GetField(self, id):
        return _gmat_py.Achieve_GetField(self, id)

    def GetNumber(self, id):
        return _gmat_py.Achieve_GetNumber(self, id)

    def SetRefObject(self, *args):
        return _gmat_py.Achieve_SetRefObject(self, *args)

    def InterpretAction(self):
        return _gmat_py.Achieve_InterpretAction(self)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Achieve_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Achieve_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.Achieve_ClearWrappers(self)

    def Initialize(self):
        return _gmat_py.Achieve_Initialize(self)

    def Execute(self):
        return _gmat_py.Achieve_Execute(self)

    def RunComplete(self):
        return _gmat_py.Achieve_RunComplete(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Achieve_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.Achieve_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Achieve_SetClass(base)

# Register Achieve in _gmat_py:
_gmat_py.Achieve_swigregister(Achieve)
class Assignment(GmatCommand):
    r"""
    Definition of the Assignment command class.

    The assignment class is the Command class that handles commands of the form

        GMAT object.parameter = value;
        GMAT variable = parameter;
        GMAT variable = equation;

    Sets one property or object equal to a computed quantity or other object
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Assignment

    def __init__(self, *args):
        _gmat_py.Assignment_swiginit(self, _gmat_py.new_Assignment(*args))

    def GetMathTree(self):
        return _gmat_py.Assignment_GetMathTree(self)

    def HasAFunction(self):
        return _gmat_py.Assignment_HasAFunction(self)

    def GetGmatFunctionNames(self):
        return _gmat_py.Assignment_GetGmatFunctionNames(self)

    def SetMathWrappers(self):
        return _gmat_py.Assignment_SetMathWrappers(self)

    def SetLHS(self, left):
        return _gmat_py.Assignment_SetLHS(self, left)

    def SetRHS(self, right):
        return _gmat_py.Assignment_SetRHS(self, right)

    def GetLHS(self):
        return _gmat_py.Assignment_GetLHS(self)

    def GetRHS(self):
        return _gmat_py.Assignment_GetRHS(self)

    def SetFunction(self, function):
        return _gmat_py.Assignment_SetFunction(self, function)

    def GetFunctions(self):
        return _gmat_py.Assignment_GetFunctions(self)

    def SetPublisher(self, pub):
        return _gmat_py.Assignment_SetPublisher(self, pub)

    def SetSolarSystem(self, ss):
        return _gmat_py.Assignment_SetSolarSystem(self, ss)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.Assignment_SetInternalCoordSystem(self, cs)

    def SetTransientForces(self, tf):
        return _gmat_py.Assignment_SetTransientForces(self, tf)

    def SetObjectMap(self, map):
        return _gmat_py.Assignment_SetObjectMap(self, map)

    def SetGlobalObjectMap(self, map):
        return _gmat_py.Assignment_SetGlobalObjectMap(self, map)

    def InterpretAction(self):
        return _gmat_py.Assignment_InterpretAction(self)

    def GetObjectList(self):
        return _gmat_py.Assignment_GetObjectList(self)

    def Validate(self):
        return _gmat_py.Assignment_Validate(self)

    def Initialize(self):
        return _gmat_py.Assignment_Initialize(self)

    def Execute(self):
        return _gmat_py.Assignment_Execute(self)

    def RunComplete(self):
        return _gmat_py.Assignment_RunComplete(self)

    def SkipInterrupt(self):
        return _gmat_py.Assignment_SkipInterrupt(self)

    def SetCallingFunction(self, fm):
        return _gmat_py.Assignment_SetCallingFunction(self, fm)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Assignment_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Assignment_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.Assignment_ClearWrappers(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Assignment_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.Assignment_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Assignment_GetGeneratingString(self, *args)

    def AffectsClones(self):
        return _gmat_py.Assignment_AffectsClones(self)

    def GetUpdatedObject(self):
        return _gmat_py.Assignment_GetUpdatedObject(self)

    def GetUpdatedObjectParameterIndex(self):
        return _gmat_py.Assignment_GetUpdatedObjectParameterIndex(self)

    def HasLocalClones(self):
        return _gmat_py.Assignment_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Assignment_SetClass(base)

# Register Assignment in _gmat_py:
_gmat_py.Assignment_swigregister(Assignment)
class BeginFiniteBurn(GmatCommand):
    r"""
     Definition code for the BeginFiniteBurn command.

    BeginFiniteBurn Class, used to turn on thrusters used in a finite burn.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BeginFiniteBurn

    def __init__(self, *args):
        _gmat_py.BeginFiniteBurn_swiginit(self, _gmat_py.new_BeginFiniteBurn(*args))

    def TakeAction(self, *args):
        return _gmat_py.BeginFiniteBurn_TakeAction(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.BeginFiniteBurn_GetRefObjectName(self, type)

    def GetRefObjectTypeArray(self):
        return _gmat_py.BeginFiniteBurn_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.BeginFiniteBurn_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.BeginFiniteBurn_SetRefObjectName(self, type, name)

    def GetGmatObject(self, *args):
        return _gmat_py.BeginFiniteBurn_GetGmatObject(self, *args)

    def Clone(self):
        return _gmat_py.BeginFiniteBurn_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.BeginFiniteBurn_RenameRefObject(self, type, oldName, newName)

    def GetGeneratingString(self, *args):
        return _gmat_py.BeginFiniteBurn_GetGeneratingString(self, *args)

    def SetTransientForces(self, tf):
        return _gmat_py.BeginFiniteBurn_SetTransientForces(self, tf)

    def Initialize(self):
        return _gmat_py.BeginFiniteBurn_Initialize(self)

    def Execute(self):
        return _gmat_py.BeginFiniteBurn_Execute(self)

    def HasLocalClones(self):
        return _gmat_py.BeginFiniteBurn_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BeginFiniteBurn_SetClass(base)

# Register BeginFiniteBurn in _gmat_py:
_gmat_py.BeginFiniteBurn_swigregister(BeginFiniteBurn)
class BeginFunction(GmatCommand):
    r"""
    Definition code for the BeginFunction command, a wrapper that manages the
    commands in a GMAT function.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BeginFunction

    def __init__(self, *args):
        _gmat_py.BeginFunction_swiginit(self, _gmat_py.new_BeginFunction(*args))

    def Clone(self):
        return _gmat_py.BeginFunction_Clone(self)

    def GetRefObject(self, type, name):
        return _gmat_py.BeginFunction_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.BeginFunction_SetRefObject(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.BeginFunction_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.BeginFunction_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.BeginFunction_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.BeginFunction_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.BeginFunction_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.BeginFunction_IsParameterReadOnly(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.BeginFunction_GetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.BeginFunction_GetStringArrayParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.BeginFunction_SetStringParameter(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.BeginFunction_TakeAction(self, *args)

    def Initialize(self):
        return _gmat_py.BeginFunction_Initialize(self)

    def Execute(self):
        return _gmat_py.BeginFunction_Execute(self)

    def ClearReturnObjects(self):
        return _gmat_py.BeginFunction_ClearReturnObjects(self)

    def SetTransientForces(self, tf):
        return _gmat_py.BeginFunction_SetTransientForces(self, tf)

    def InitializeInternalObjects(self):
        return _gmat_py.BeginFunction_InitializeInternalObjects(self)

    def BuildReferences(self, obj):
        return _gmat_py.BeginFunction_BuildReferences(self, obj)

    def SetRefFromName(self, obj, oName):
        return _gmat_py.BeginFunction_SetRefFromName(self, obj, oName)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.BeginFunction_SetInternalCoordSystem(self, cs)

    def ClearInputMap(self):
        return _gmat_py.BeginFunction_ClearInputMap(self)

    def HasLocalClones(self):
        return _gmat_py.BeginFunction_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BeginFunction_SetClass(base)

# Register BeginFunction in _gmat_py:
_gmat_py.BeginFunction_swigregister(BeginFunction)
class BeginMissionSequence(GmatCommand):
    r"""
    Null operator used to begin mission sequence -- used (optionally) to toggle
    command mode

    Command used to toggle GMAT into command mode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BeginMissionSequence

    def __init__(self, *args):
        _gmat_py.BeginMissionSequence_swiginit(self, _gmat_py.new_BeginMissionSequence(*args))

    def Execute(self):
        return _gmat_py.BeginMissionSequence_Execute(self)

    def Clone(self):
        return _gmat_py.BeginMissionSequence_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.BeginMissionSequence_RenameRefObject(self, type, oldName, newName)

    def GetGeneratingString(self, *args):
        return _gmat_py.BeginMissionSequence_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.BeginMissionSequence_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BeginMissionSequence_SetClass(base)

# Register BeginMissionSequence in _gmat_py:
_gmat_py.BeginMissionSequence_swigregister(BeginMissionSequence)
class BeginScript(GmatCommand):
    r"""
    Script tag used to indicate a block of script that shows up verbatim in a
    ScriptEvent panel on the GUI.

    Script tag used to indicate the start of a block of script that shows up
    verbatim in a ScriptEvent panel on the GUI.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_BeginScript

    def __init__(self, *args):
        _gmat_py.BeginScript_swiginit(self, _gmat_py.new_BeginScript(*args))

    def Execute(self):
        return _gmat_py.BeginScript_Execute(self)

    def Clone(self):
        return _gmat_py.BeginScript_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.BeginScript_GetGeneratingString(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.BeginScript_RenameRefObject(self, type, oldName, newName)

    def HasLocalClones(self):
        return _gmat_py.BeginScript_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.BeginScript_SetClass(base)

# Register BeginScript in _gmat_py:
_gmat_py.BeginScript_swigregister(BeginScript)
class CallFunction(GmatCommand):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CallFunction

    def __init__(self, *args):
        _gmat_py.CallFunction_swiginit(self, _gmat_py.new_CallFunction(*args))

    def FormEvalString(self):
        return _gmat_py.CallFunction_FormEvalString(self)

    def AddInputParameter(self, paramName, index):
        return _gmat_py.CallFunction_AddInputParameter(self, paramName, index)

    def AddOutputParameter(self, paramName, index):
        return _gmat_py.CallFunction_AddOutputParameter(self, paramName, index)

    def HasOtherReferenceToObject(self, withName):
        r"""
        Override this method so that references can be checked
        for Remove/Delete of objects
        """
        return _gmat_py.CallFunction_HasOtherReferenceToObject(self, withName)

    def Initialize(self):
        return _gmat_py.CallFunction_Initialize(self)

    def Execute(self):
        return _gmat_py.CallFunction_Execute(self)

    def RunComplete(self):
        return _gmat_py.CallFunction_RunComplete(self)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.CallFunction_SetInternalCoordSystem(self, cs)

    def SetPublisher(self, pub):
        return _gmat_py.CallFunction_SetPublisher(self, pub)

    def SetObjectMap(self, map):
        return _gmat_py.CallFunction_SetObjectMap(self, map)

    def SetGlobalObjectMap(self, map):
        return _gmat_py.CallFunction_SetGlobalObjectMap(self, map)

    def HasAFunction(self):
        return _gmat_py.CallFunction_HasAFunction(self)

    def IsMatlabFunctionCall(self):
        return _gmat_py.CallFunction_IsMatlabFunctionCall(self)

    def Clone(self):
        return _gmat_py.CallFunction_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.CallFunction_GetGeneratingString(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.CallFunction_TakeAction(self, *args)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.CallFunction_GetRefObjectNameArray(self, type)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.CallFunction_RenameRefObject(self, type, oldName, newName)

    def GetRefObject(self, type, name):
        return _gmat_py.CallFunction_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.CallFunction_SetRefObject(self, *args)

    def GetRefObjectArray(self, type):
        return _gmat_py.CallFunction_GetRefObjectArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.CallFunction_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.CallFunction_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.CallFunction_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.CallFunction_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.CallFunction_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.CallFunction_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.CallFunction_GetStringArrayParameter(self, *args)

    def HasLocalClones(self):
        return _gmat_py.CallFunction_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CallFunction_SetClass(base)

# Register CallFunction in _gmat_py:
_gmat_py.CallFunction_swigregister(CallFunction)
class CallBuiltinGmatFunction(CallFunction):
    r"""Declaration for the CallBuiltinGmatFunction command class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_CallBuiltinGmatFunction

    def __init__(self, *args):
        _gmat_py.CallBuiltinGmatFunction_swiginit(self, _gmat_py.new_CallBuiltinGmatFunction(*args))

    def Initialize(self):
        return _gmat_py.CallBuiltinGmatFunction_Initialize(self)

    def Execute(self):
        return _gmat_py.CallBuiltinGmatFunction_Execute(self)

    def RunComplete(self):
        return _gmat_py.CallBuiltinGmatFunction_RunComplete(self)

    def Clone(self):
        return _gmat_py.CallBuiltinGmatFunction_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.CallBuiltinGmatFunction_SetClass(base)

# Register CallBuiltinGmatFunction in _gmat_py:
_gmat_py.CallBuiltinGmatFunction_swigregister(CallBuiltinGmatFunction)
class FindEvents(GmatCommand):
    r"""
     Definition code for the FindEvents command.

    FindEvents Class, used to turn on thrusters used in a finite burn.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_FindEvents

    def __init__(self, *args):
        _gmat_py.FindEvents_swiginit(self, _gmat_py.new_FindEvents(*args))

    def TakeAction(self, *args):
        return _gmat_py.FindEvents_TakeAction(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.FindEvents_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.FindEvents_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.FindEvents_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.FindEvents_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.FindEvents_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.FindEvents_SetStringParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.FindEvents_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.FindEvents_SetBooleanParameter(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.FindEvents_GetRefObjectName(self, type)

    def GetRefObjectTypeArray(self):
        return _gmat_py.FindEvents_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.FindEvents_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.FindEvents_SetRefObject(self, *args)

    def SetRefObjectName(self, type, name):
        return _gmat_py.FindEvents_SetRefObjectName(self, type, name)

    def Clone(self):
        return _gmat_py.FindEvents_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.FindEvents_RenameRefObject(self, type, oldName, newName)

    def GetGeneratingString(self, *args):
        return _gmat_py.FindEvents_GetGeneratingString(self, *args)

    def Initialize(self):
        return _gmat_py.FindEvents_Initialize(self)

    def Execute(self):
        return _gmat_py.FindEvents_Execute(self)

    def InterpretAction(self):
        return _gmat_py.FindEvents_InterpretAction(self)

    def HasLocalClones(self):
        return _gmat_py.FindEvents_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.FindEvents_SetClass(base)

# Register FindEvents in _gmat_py:
_gmat_py.FindEvents_swigregister(FindEvents)

def GetFirstCommand(cmd):
    r"""This file provides methods to get whole mission sequence string."""
    return _gmat_py.GetFirstCommand(cmd)

def GetLastCommand(cmd):
    return _gmat_py.GetLastCommand(cmd)

def GetNextCommand(cmd):
    return _gmat_py.GetNextCommand(cmd)

def GetPreviousCommand(_from, cmd):
    return _gmat_py.GetPreviousCommand(_from, cmd)

def GetMatchingEnd(cmd, getMatchingElse=False):
    return _gmat_py.GetMatchingEnd(cmd, getMatchingElse)

def GetParentCommand(top, cmd):
    return _gmat_py.GetParentCommand(top, cmd)

def GetSubParent(brCmd, cmd):
    return _gmat_py.GetSubParent(brCmd, cmd)

def RemoveCommand(seq, cmd):
    return _gmat_py.RemoveCommand(seq, cmd)

def IsElseFoundInIf(ifCmd):
    return _gmat_py.IsElseFoundInIf(ifCmd)

def ClearCommandSeq(seq, leaveFirstCmd=True, callRunComplete=True):
    return _gmat_py.ClearCommandSeq(seq, leaveFirstCmd, callRunComplete)

def IsAfter(cmd1, cmd2):
    return _gmat_py.IsAfter(cmd1, cmd2)

def ResetCommandSequenceChanged(cmd):
    return _gmat_py.ResetCommandSequenceChanged(cmd)

def ResetBranchCommandChanged(brCmd, level):
    return _gmat_py.ResetBranchCommandChanged(brCmd, level)

def HasCommandSequenceChanged(cmd):
    return _gmat_py.HasCommandSequenceChanged(cmd)

def HasBranchCommandChanged(brCmd, level):
    return _gmat_py.HasBranchCommandChanged(brCmd, level)

def FindObject(cmd, objType, objName, cmdName, cmdUsing, checkWrappers=False):
    return _gmat_py.FindObject(cmd, objType, objName, cmdName, cmdUsing, checkWrappers)

def FindObjectFromSubCommands(brCmd, level, objType, objName, cmdName, cmdUsing, checkWrappers=False):
    return _gmat_py.FindObjectFromSubCommands(brCmd, level, objType, objName, cmdName, cmdUsing, checkWrappers)

def GetCommandSeqString(*args):
    return _gmat_py.GetCommandSeqString(*args)

def GetSubCommandString(*args):
    return _gmat_py.GetSubCommandString(*args)

def ShowCommand(*args):
    return _gmat_py.ShowCommand(*args)
class Create(ManageObject):
    r"""
    Class declaration for the Create command

    Declaration of the Create command
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Create

    def __init__(self, *args):
        _gmat_py.Create_swiginit(self, _gmat_py.new_Create(*args))

    def GetParameterText(self, id):
        return _gmat_py.Create_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Create_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Create_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Create_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.Create_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Create_SetStringParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.Create_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.Create_SetRefObject(self, *args)

    def Clone(self):
        return _gmat_py.Create_Clone(self)

    def Initialize(self):
        return _gmat_py.Create_Initialize(self)

    def Execute(self):
        return _gmat_py.Create_Execute(self)

    def RunComplete(self):
        return _gmat_py.Create_RunComplete(self)

    def HasLocalClones(self):
        return _gmat_py.Create_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Create_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Create_SetClass(base)

# Register Create in _gmat_py:
_gmat_py.Create_swigregister(Create)
class Else(GmatCommand):
    r"""
    Definition for the ELSE command class

    Command that manages processing for entry to the ELSE statement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Else

    def __init__(self, *args):
        _gmat_py.Else_swiginit(self, _gmat_py.new_Else(*args))

    def Insert(self, cmd, prev):
        return _gmat_py.Else_Insert(self, cmd, prev)

    def Initialize(self):
        return _gmat_py.Else_Initialize(self)

    def Execute(self):
        return _gmat_py.Else_Execute(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Else_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.Else_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.Else_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.Else_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Else_SetClass(base)

# Register Else in _gmat_py:
_gmat_py.Else_swigregister(Else)
class EndFiniteBurn(GmatCommand):
    r"""
     Definition code for the EndFiniteBurn command.

    EndFiniteBurn Class, used to turn off thrusters used in a finite burn.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_EndFiniteBurn

    def __init__(self, *args):
        _gmat_py.EndFiniteBurn_swiginit(self, _gmat_py.new_EndFiniteBurn(*args))

    def TakeAction(self, *args):
        return _gmat_py.EndFiniteBurn_TakeAction(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.EndFiniteBurn_GetRefObjectName(self, type)

    def GetRefObjectTypeArray(self):
        return _gmat_py.EndFiniteBurn_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.EndFiniteBurn_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.EndFiniteBurn_SetRefObjectName(self, type, name)

    def Clone(self):
        return _gmat_py.EndFiniteBurn_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndFiniteBurn_RenameRefObject(self, type, oldName, newName)

    def GetGeneratingString(self, *args):
        return _gmat_py.EndFiniteBurn_GetGeneratingString(self, *args)

    def SetTransientForces(self, tf):
        return _gmat_py.EndFiniteBurn_SetTransientForces(self, tf)

    def Initialize(self):
        return _gmat_py.EndFiniteBurn_Initialize(self)

    def Execute(self):
        return _gmat_py.EndFiniteBurn_Execute(self)

    def HasLocalClones(self):
        return _gmat_py.EndFiniteBurn_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndFiniteBurn_SetClass(base)

# Register EndFiniteBurn in _gmat_py:
_gmat_py.EndFiniteBurn_swigregister(EndFiniteBurn)
class EndFor(GmatCommand):
    r"""Definition for the closing line of a for loop"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.EndFor_swiginit(self, _gmat_py.new_EndFor(*args))
    __swig_destroy__ = _gmat_py.delete_EndFor

    def Initialize(self):
        return _gmat_py.EndFor_Initialize(self)

    def Execute(self):
        return _gmat_py.EndFor_Execute(self)

    def Insert(self, cmd, prev):
        return _gmat_py.EndFor_Insert(self, cmd, prev)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndFor_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.EndFor_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.EndFor_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.EndFor_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndFor_SetClass(base)

# Register EndFor in _gmat_py:
_gmat_py.EndFor_swigregister(EndFor)
class EndFunction(GmatCommand):
    r"""
    Definition code for the EndFunction command, a wrapper that marks the end
    of the commands in a GMAT function.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_EndFunction

    def __init__(self, *args):
        _gmat_py.EndFunction_swiginit(self, _gmat_py.new_EndFunction(*args))

    def Clone(self):
        return _gmat_py.EndFunction_Clone(self)

    def GetRefObject(self, type, name):
        return _gmat_py.EndFunction_GetRefObject(self, type, name)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndFunction_RenameRefObject(self, type, oldName, newName)

    def Execute(self):
        return _gmat_py.EndFunction_Execute(self)

    def HasLocalClones(self):
        return _gmat_py.EndFunction_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndFunction_SetClass(base)

# Register EndFunction in _gmat_py:
_gmat_py.EndFunction_swigregister(EndFunction)
class EndIf(GmatCommand):
    r"""Definition for the closing line of the IF Statement"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.EndIf_swiginit(self, _gmat_py.new_EndIf(*args))
    __swig_destroy__ = _gmat_py.delete_EndIf

    def Initialize(self):
        return _gmat_py.EndIf_Initialize(self)

    def Execute(self):
        return _gmat_py.EndIf_Execute(self)

    def Insert(self, cmd, prev):
        return _gmat_py.EndIf_Insert(self, cmd, prev)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndIf_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.EndIf_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.EndIf_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.EndIf_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndIf_SetClass(base)

# Register EndIf in _gmat_py:
_gmat_py.EndIf_swigregister(EndIf)
class EndOptimize(GmatCommand):
    r"""Declaration for the EndOptimize command class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.EndOptimize_swiginit(self, _gmat_py.new_EndOptimize(*args))
    __swig_destroy__ = _gmat_py.delete_EndOptimize

    def Initialize(self):
        return _gmat_py.EndOptimize_Initialize(self)

    def Execute(self):
        return _gmat_py.EndOptimize_Execute(self)

    def Insert(self, cmd, prev):
        return _gmat_py.EndOptimize_Insert(self, cmd, prev)

    def Clone(self):
        return _gmat_py.EndOptimize_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.EndOptimize_GetGeneratingString(self, mode, prefix, useName)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndOptimize_RenameRefObject(self, type, oldName, newName)

    def HasLocalClones(self):
        return _gmat_py.EndOptimize_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndOptimize_SetClass(base)

# Register EndOptimize in _gmat_py:
_gmat_py.EndOptimize_swigregister(EndOptimize)
class EndScript(GmatCommand):
    r"""
    Script tag used to terminate a block of script that shows up verbatim in a
    ScriptEvent panel on the GUI.

    Script tag used to indicate the end of a block of script that shows up
    verbatim in a ScriptEvent panel on the GUI.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_EndScript

    def __init__(self, *args):
        _gmat_py.EndScript_swiginit(self, _gmat_py.new_EndScript(*args))

    def Execute(self):
        return _gmat_py.EndScript_Execute(self)

    def Clone(self):
        return _gmat_py.EndScript_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndScript_RenameRefObject(self, type, oldName, newName)

    def HasLocalClones(self):
        return _gmat_py.EndScript_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndScript_SetClass(base)

# Register EndScript in _gmat_py:
_gmat_py.EndScript_swigregister(EndScript)
class EndTarget(GmatCommand):
    r"""Definition for the closing line of a Targeter loop"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_EndTarget

    def __init__(self, *args):
        _gmat_py.EndTarget_swiginit(self, _gmat_py.new_EndTarget(*args))

    def Initialize(self):
        return _gmat_py.EndTarget_Initialize(self)

    def Execute(self):
        return _gmat_py.EndTarget_Execute(self)

    def Insert(self, cmd, prev):
        return _gmat_py.EndTarget_Insert(self, cmd, prev)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndTarget_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.EndTarget_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.EndTarget_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.EndTarget_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndTarget_SetClass(base)

# Register EndTarget in _gmat_py:
_gmat_py.EndTarget_swigregister(EndTarget)
class EndWhile(GmatCommand):
    r"""Definition for the closing line of the While Statement"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.EndWhile_swiginit(self, _gmat_py.new_EndWhile(*args))
    __swig_destroy__ = _gmat_py.delete_EndWhile

    def Initialize(self):
        return _gmat_py.EndWhile_Initialize(self)

    def Execute(self):
        return _gmat_py.EndWhile_Execute(self)

    def Insert(self, cmd, prev):
        return _gmat_py.EndWhile_Insert(self, cmd, prev)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EndWhile_RenameRefObject(self, type, oldName, newName)

    def Clone(self):
        return _gmat_py.EndWhile_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.EndWhile_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.EndWhile_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EndWhile_SetClass(base)

# Register EndWhile in _gmat_py:
_gmat_py.EndWhile_swigregister(EndWhile)
class For(BranchCommand):
    r"""
    Definition for the For command class

    Command that manages processing for entry to the For loop

    The For command manages the For loop.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.For_swiginit(self, _gmat_py.new_For(*args))
    __swig_destroy__ = _gmat_py.delete_For

    def Append(self, cmd):
        return _gmat_py.For_Append(self, cmd)

    def Initialize(self):
        return _gmat_py.For_Initialize(self)

    def Execute(self):
        return _gmat_py.For_Execute(self)

    def RunComplete(self):
        return _gmat_py.For_RunComplete(self)

    def Clone(self):
        return _gmat_py.For_Clone(self)

    def Copy(self, orig):
        return _gmat_py.For_Copy(self, orig)

    def GetGeneratingString(self, *args):
        return _gmat_py.For_GetGeneratingString(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.For_GetRefObject(self, type, name)

    def SetRefObject(self, obj, type, name):
        return _gmat_py.For_SetRefObject(self, obj, type, name)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.For_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.For_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.For_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.For_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.For_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.For_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.For_GetParameterTypeString(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.For_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.For_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.For_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.For_SetStringParameter(self, *args)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.For_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.For_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.For_ClearWrappers(self)

    def HasLocalClones(self):
        return _gmat_py.For_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.For_SetClass(base)

# Register For in _gmat_py:
_gmat_py.For_swigregister(For)
class If(ConditionalBranch):
    r"""
    Declaration for the IF command class

    Command that manages processing for entry to the IF statement

    The If command manages the If statement.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.If_swiginit(self, _gmat_py.new_If(*args))
    __swig_destroy__ = _gmat_py.delete_If

    def Append(self, cmd):
        return _gmat_py.If_Append(self, cmd)

    def Execute(self):
        return _gmat_py.If_Execute(self)

    def GetParameterText(self, id):
        return _gmat_py.If_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.If_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.If_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.If_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.If_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.If_SetIntegerParameter(self, *args)

    def Clone(self):
        return _gmat_py.If_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.If_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.If_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.If_SetClass(base)

# Register If in _gmat_py:
_gmat_py.If_swigregister(If)
class Maneuver(GmatCommand):
    r"""
    Definition for the Maneuver command class

    This class implements the Maneuver command.  Maneuvers are performed using
    pre-configured Burn objects.  A typical segment of script that implements
    a maneuver for a spacecraft named Sat1 looks like this:

        Create ImpulsiveBurn burn;
        burn.CoordinateSystem = Local;
        burn.Origin = Earth;
        burn.Axes = VNB;
        burn.Element1 = 0.125;         % km/s
        ...
        Maneuver burn(Sat1);
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Maneuver

    def __init__(self, *args):
        _gmat_py.Maneuver_swiginit(self, _gmat_py.new_Maneuver(*args))

    def Clone(self):
        return _gmat_py.Maneuver_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Maneuver_GetGeneratingString(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Maneuver_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Maneuver_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Maneuver_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.Maneuver_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Maneuver_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Maneuver_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Maneuver_GetParameterTypeString(self, id)

    def GetStringParameter(self, id):
        return _gmat_py.Maneuver_GetStringParameter(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.Maneuver_SetStringParameter(self, id, value)

    def GetBooleanParameter(self, *args):
        return _gmat_py.Maneuver_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.Maneuver_SetBooleanParameter(self, *args)

    def InterpretAction(self):
        return _gmat_py.Maneuver_InterpretAction(self)

    def Initialize(self):
        return _gmat_py.Maneuver_Initialize(self)

    def Execute(self):
        return _gmat_py.Maneuver_Execute(self)

    def HasLocalClones(self):
        return _gmat_py.Maneuver_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Maneuver_SetClass(base)

# Register Maneuver in _gmat_py:
_gmat_py.Maneuver_swigregister(Maneuver)
class Minimize(SolverSequenceCommand):
    r"""
    Definition for the Minimize command class

    Command that manages processing for optimizer variables.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Minimize_swiginit(self, _gmat_py.new_Minimize(*args))
    __swig_destroy__ = _gmat_py.delete_Minimize

    def Clone(self):
        return _gmat_py.Minimize_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Minimize_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Minimize_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Minimize_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.Minimize_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Minimize_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Minimize_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Minimize_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Minimize_IsParameterReadOnly(self, *args)

    def GetRealParameter(self, id):
        return _gmat_py.Minimize_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.Minimize_SetRealParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.Minimize_GetStringParameter(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.Minimize_SetStringParameter(self, id, value)

    def SetRefObject(self, *args):
        return _gmat_py.Minimize_SetRefObject(self, *args)

    def InterpretAction(self):
        return _gmat_py.Minimize_InterpretAction(self)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Minimize_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Minimize_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.Minimize_ClearWrappers(self)

    def Initialize(self):
        return _gmat_py.Minimize_Initialize(self)

    def Execute(self):
        return _gmat_py.Minimize_Execute(self)

    def RunComplete(self):
        return _gmat_py.Minimize_RunComplete(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.Minimize_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.Minimize_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Minimize_SetClass(base)

# Register Minimize in _gmat_py:
_gmat_py.Minimize_swigregister(Minimize)
class NonlinearConstraint(SolverSequenceCommand):
    r"""
    Definition for the NonlinearConstraint command class

    Command that manages processing for targeter goals.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.NonlinearConstraint_swiginit(self, _gmat_py.new_NonlinearConstraint(*args))
    __swig_destroy__ = _gmat_py.delete_NonlinearConstraint

    def Clone(self):
        return _gmat_py.NonlinearConstraint_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.NonlinearConstraint_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.NonlinearConstraint_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.NonlinearConstraint_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.NonlinearConstraint_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.NonlinearConstraint_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.NonlinearConstraint_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.NonlinearConstraint_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.NonlinearConstraint_IsParameterReadOnly(self, *args)

    def GetRealParameter(self, id):
        return _gmat_py.NonlinearConstraint_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.NonlinearConstraint_SetRealParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.NonlinearConstraint_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.NonlinearConstraint_SetStringParameter(self, *args)

    def SetField(self, id, value):
        return _gmat_py.NonlinearConstraint_SetField(self, id, value)

    def SetNumber(self, label, value):
        return _gmat_py.NonlinearConstraint_SetNumber(self, label, value)

    def GetNumber(self, *args):
        return _gmat_py.NonlinearConstraint_GetNumber(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.NonlinearConstraint_SetRefObject(self, *args)

    def InterpretAction(self):
        return _gmat_py.NonlinearConstraint_InterpretAction(self)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.NonlinearConstraint_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.NonlinearConstraint_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.NonlinearConstraint_ClearWrappers(self)

    def Initialize(self):
        return _gmat_py.NonlinearConstraint_Initialize(self)

    def Execute(self):
        return _gmat_py.NonlinearConstraint_Execute(self)

    def RunComplete(self):
        return _gmat_py.NonlinearConstraint_RunComplete(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.NonlinearConstraint_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.NonlinearConstraint_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.NonlinearConstraint_SetClass(base)

# Register NonlinearConstraint in _gmat_py:
_gmat_py.NonlinearConstraint_swigregister(NonlinearConstraint)
class NoOp(GmatCommand):
    r"""
    Null operator for the command sequence -- typically used as a place holder

    Default command used to initialize the command sequence lists in the
    Moderator
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_NoOp

    def __init__(self, *args):
        _gmat_py.NoOp_swiginit(self, _gmat_py.new_NoOp(*args))

    def Execute(self):
        return _gmat_py.NoOp_Execute(self)

    def Clone(self):
        return _gmat_py.NoOp_Clone(self)

    def HasLocalClones(self):
        return _gmat_py.NoOp_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.NoOp_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.NoOp_SetClass(base)

# Register NoOp in _gmat_py:
_gmat_py.NoOp_swigregister(NoOp)
class Optimize(SolverBranchCommand):
    r"""Declaration for the Optimize command class"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Optimize_swiginit(self, _gmat_py.new_Optimize(*args))
    __swig_destroy__ = _gmat_py.delete_Optimize

    def Append(self, cmd):
        return _gmat_py.Optimize_Append(self, cmd)

    def Initialize(self):
        return _gmat_py.Optimize_Initialize(self)

    def Execute(self):
        return _gmat_py.Optimize_Execute(self)

    def RunComplete(self):
        return _gmat_py.Optimize_RunComplete(self)

    def ExecuteBranch(self, which=0):
        return _gmat_py.Optimize_ExecuteBranch(self, which)

    def ExecuteCallback(self):
        return _gmat_py.Optimize_ExecuteCallback(self)

    def PutCallbackData(self, data):
        return _gmat_py.Optimize_PutCallbackData(self, data)

    def PutCallbackRealData(self, data):
        return _gmat_py.Optimize_PutCallbackRealData(self, data)

    def GetCallbackResults(self):
        return _gmat_py.Optimize_GetCallbackResults(self)

    def Clone(self):
        return _gmat_py.Optimize_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.Optimize_GetGeneratingString(self, mode, prefix, useName)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Optimize_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.Optimize_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Optimize_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Optimize_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Optimize_GetParameterTypeString(self, id)

    def GetStringParameter(self, id):
        return _gmat_py.Optimize_GetStringParameter(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.Optimize_SetStringParameter(self, id, value)

    def GetBooleanParameter(self, id):
        return _gmat_py.Optimize_GetBooleanParameter(self, id)

    def GetRefObjectName(self, type):
        return _gmat_py.Optimize_GetRefObjectName(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.Optimize_SetRefObjectName(self, type, name)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Optimize_SetClass(base)

# Register Optimize in _gmat_py:
_gmat_py.Optimize_swigregister(Optimize)
class Propagate(PropagationEnabledCommand):
    r"""
    Definition for the Propagate command class

    The Propagate Command Class

    The Propagate command controls the integrators and force modeling, and uses
    those components to evolve the mission through time.  Propagation can proceed
    in one of several different modes:

     - In Synchronized mode, epochs remain synchronized for multiple PropSetups.
     - In single step mode, the PropSetups take one integration step.
     - In BackProp mode, integration moves SpaceObjects backwards in time.

    Logic associated with stopping propagation is also part of the Propagate
    command.  It uses the StopCondition class and its embedded "not-a-knot"
    interpolator (see KnotAKnotInterpolator) to generate an estimated stop epoch,
    and then refines that epoch if necessary using a secant solver.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Propagate

    def __init__(self, *args):
        _gmat_py.Propagate_swiginit(self, _gmat_py.new_Propagate(*args))

    def GetRefObjectName(self, type):
        return _gmat_py.Propagate_GetRefObjectName(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.Propagate_SetRefObjectName(self, type, name)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Propagate_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Propagate_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Propagate_GetRefObjectNameArray(self, type)

    def SetObject(self, *args):
        return _gmat_py.Propagate_SetObject(self, *args)

    def GetGmatObject(self, *args):
        return _gmat_py.Propagate_GetGmatObject(self, *args)

    def ClearObject(self, type):
        return _gmat_py.Propagate_ClearObject(self, type)

    def Clone(self):
        return _gmat_py.Propagate_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Propagate_GetGeneratingString(self, *args)

    def GetRefObject(self, type, name, index):
        return _gmat_py.Propagate_GetRefObject(self, type, name, index)

    def SetRefObject(self, obj, type, name, index):
        return _gmat_py.Propagate_SetRefObject(self, obj, type, name, index)

    def GetRefObjectArray(self, type):
        return _gmat_py.Propagate_GetRefObjectArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.Propagate_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Propagate_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Propagate_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Propagate_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, id):
        return _gmat_py.Propagate_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.Propagate_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.Propagate_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.Propagate_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.Propagate_GetStringArrayParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.Propagate_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.Propagate_SetBooleanParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.Propagate_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Propagate_SetRealParameter(self, *args)

    def GetPropStatus(self):
        return _gmat_py.Propagate_GetPropStatus(self)

    def TakeAction(self, *args):
        return _gmat_py.Propagate_TakeAction(self, *args)

    def InterpretAction(self):
        return _gmat_py.Propagate_InterpretAction(self)

    def AcceptsObjectType(self, theType):
        return _gmat_py.Propagate_AcceptsObjectType(self, theType)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Propagate_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Propagate_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.Propagate_ClearWrappers(self)

    def SetSegmentOrbitColor(self, intColor):
        return _gmat_py.Propagate_SetSegmentOrbitColor(self, intColor)

    def GetSegmentOrbitColor(self):
        return _gmat_py.Propagate_GetSegmentOrbitColor(self)

    def GetFirstSpaceObjectName(self):
        return _gmat_py.Propagate_GetFirstSpaceObjectName(self)

    def SetOverrideSegmentColor(self, override):
        return _gmat_py.Propagate_SetOverrideSegmentColor(self, override)

    def GetOverrideSegmentColor(self):
        return _gmat_py.Propagate_GetOverrideSegmentColor(self)

    def DoPropsHaveFiniteBurn(self):
        return _gmat_py.Propagate_DoPropsHaveFiniteBurn(self)

    def Initialize(self):
        return _gmat_py.Propagate_Initialize(self)

    def FillFormation(self, so, owners, elements):
        return _gmat_py.Propagate_FillFormation(self, so, owners, elements)

    def GetNext(self):
        return _gmat_py.Propagate_GetNext(self)

    def Execute(self):
        return _gmat_py.Propagate_Execute(self)

    def RunComplete(self):
        return _gmat_py.Propagate_RunComplete(self)

    def GetClone(self, cloneIndex=0):
        return _gmat_py.Propagate_GetClone(self, cloneIndex)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Propagate_SetClass(base)

# Register Propagate in _gmat_py:
_gmat_py.Propagate_swigregister(Propagate)
class RHSEquation(object):
    r"""Equation manager for right hand side strings describing equations"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RHSEquation

    def __init__(self, *args):
        _gmat_py.RHSEquation_swiginit(self, _gmat_py.new_RHSEquation(*args))

    def GetEquationString(self):
        return _gmat_py.RHSEquation_GetEquationString(self)

    def Initialize(self, objectMap, globalObjectMap):
        return _gmat_py.RHSEquation_Initialize(self, objectMap, globalObjectMap)

    def BuildExpression(self, rhside, theMap, allowSingleElement=False):
        return _gmat_py.RHSEquation_BuildExpression(self, rhside, theMap, allowSingleElement)

    def GetMathTree(self, releaseOwnership=True):
        return _gmat_py.RHSEquation_GetMathTree(self, releaseOwnership)

    def RunMathTree(self, lhsWrapper):
        return _gmat_py.RHSEquation_RunMathTree(self, lhsWrapper)

    def Validate(self, msg):
        return _gmat_py.RHSEquation_Validate(self, msg)

    def ValidateStringExpression(self, msg):
        return _gmat_py.RHSEquation_ValidateStringExpression(self, msg)

    def GetMathWrapperMap(self):
        return _gmat_py.RHSEquation_GetMathWrapperMap(self)

    def SetCallingFunction(self, fm):
        return _gmat_py.RHSEquation_SetCallingFunction(self, fm)

    def SetMathWrappers(self):
        return _gmat_py.RHSEquation_SetMathWrappers(self)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.RHSEquation_SetElementWrapper(self, toWrapper, withName)

    def SetWrapperReferences(self, ew, objectMap, globalObjectMap):
        return _gmat_py.RHSEquation_SetWrapperReferences(self, ew, objectMap, globalObjectMap)

    def ClearWrappers(self):
        return _gmat_py.RHSEquation_ClearWrappers(self)

    def Finalize(self):
        return _gmat_py.RHSEquation_Finalize(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.RHSEquation_RenameRefObject(self, type, oldName, newName)

    def GetWrapperObjectNames(self):
        return _gmat_py.RHSEquation_GetWrapperObjectNames(self)

    def GetFunctionNames(self):
        return _gmat_py.RHSEquation_GetFunctionNames(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RHSEquation_SetClass(base)

# Register RHSEquation in _gmat_py:
_gmat_py.RHSEquation_swigregister(RHSEquation)
class Report(GmatCommand):
    r"""
     Class definition for the Report command.

    The Report command is used to write data to a ReportFile at specific times.

    The ReportFile object is a subscriber used to generate data in an ASCII file.
    Parameters added directly to the ReportFile are written whenever the
    publisher is fed data.  Parmeters that need to be seen only at specific times
    in a script are published using this command.

    Notes: The Publisher does not currently pass text strings correctly.  The
          Report command is set to directly write data to the ReportFile until
          this defect is corrected.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Report

    def __init__(self, *args):
        _gmat_py.Report_swiginit(self, _gmat_py.new_Report(*args))

    def Clone(self):
        return _gmat_py.Report_Clone(self)

    def GetParameterID(self, str):
        return _gmat_py.Report_GetParameterID(self, str)

    def GetStringParameter(self, *args):
        return _gmat_py.Report_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Report_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.Report_GetStringArrayParameter(self, *args)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Report_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Report_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.Report_ClearWrappers(self)

    def GetRefObjectName(self, type):
        return _gmat_py.Report_GetRefObjectName(self, type)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Report_GetRefObjectNameArray(self, type)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Report_RenameRefObject(self, type, oldName, newName)

    def SetRefObject(self, obj, type, name, index):
        return _gmat_py.Report_SetRefObject(self, obj, type, name, index)

    def TakeAction(self, *args):
        return _gmat_py.Report_TakeAction(self, *args)

    def Initialize(self):
        return _gmat_py.Report_Initialize(self)

    def Execute(self):
        return _gmat_py.Report_Execute(self)

    def RunComplete(self):
        return _gmat_py.Report_RunComplete(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Report_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.Report_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Report_SetClass(base)

# Register Report in _gmat_py:
_gmat_py.Report_swigregister(Report)
class RunSolver(PropagationEnabledCommand):
    r"""
    File description here.

    Base class for the commands that drive the solvers.

    This base class manages the single-command versions of the solver state
    machine commands.  The SolverBranchCommand class handles the solver commands
    that use a solver control sequence.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RunSolver

    def InterpretAction(self):
        return _gmat_py.RunSolver_InterpretAction(self)

    def Initialize(self):
        return _gmat_py.RunSolver_Initialize(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.RunSolver_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RunSolver_SetClass(base)

# Register RunSolver in _gmat_py:
_gmat_py.RunSolver_swigregister(RunSolver)
class SaveMission(GmatCommand):
    r"""
    Class declaration for the SaveMission command

    Command used to write whole mission to ASCII files.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SaveMission

    def __init__(self, *args):
        _gmat_py.SaveMission_swiginit(self, _gmat_py.new_SaveMission(*args))

    def Execute(self):
        return _gmat_py.SaveMission_Execute(self)

    def InterpretAction(self):
        return _gmat_py.SaveMission_InterpretAction(self)

    def Clone(self):
        return _gmat_py.SaveMission_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.SaveMission_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.SaveMission_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SaveMission_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SaveMission_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SaveMission_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.SaveMission_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.SaveMission_SetStringParameter(self, *args)

    def GetGeneratingString(self, *args):
        return _gmat_py.SaveMission_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.SaveMission_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SaveMission_SetClass(base)

# Register SaveMission in _gmat_py:
_gmat_py.SaveMission_swigregister(SaveMission)
class Stop(GmatCommand):
    r"""
    Stop function for the command sequence -- typically used while debugging

    Default command used to initialize the command sequence lists in the
    Moderator
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Stop

    def __init__(self, *args):
        _gmat_py.Stop_swiginit(self, _gmat_py.new_Stop(*args))

    def Execute(self):
        return _gmat_py.Stop_Execute(self)

    def Clone(self):
        return _gmat_py.Stop_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Stop_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.Stop_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Stop_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Stop_SetClass(base)

# Register Stop in _gmat_py:
_gmat_py.Stop_swigregister(Stop)
class Target(SolverBranchCommand):
    r"""
    Definition for the Target command class

    Command that manages processing for entry to the targeter loop

    The Target command manages the targeter loop.  All targeters implement a
    state machine that evaluates the current state of the targeting process, and
    provides data to the command sequence about the next step to be taken in the
    targeting process.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Target

    def __init__(self, *args):
        _gmat_py.Target_swiginit(self, _gmat_py.new_Target(*args))

    def Append(self, cmd):
        return _gmat_py.Target_Append(self, cmd)

    def Clone(self):
        return _gmat_py.Target_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.Target_GetGeneratingString(self, mode, prefix, useName)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Target_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.Target_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Target_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Target_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Target_GetParameterTypeString(self, id)

    def GetStringParameter(self, id):
        return _gmat_py.Target_GetStringParameter(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.Target_SetStringParameter(self, id, value)

    def GetBooleanParameter(self, id):
        return _gmat_py.Target_GetBooleanParameter(self, id)

    def GetRefObjectName(self, type):
        return _gmat_py.Target_GetRefObjectName(self, type)

    def SetRefObjectName(self, type, name):
        return _gmat_py.Target_SetRefObjectName(self, type, name)

    def Initialize(self):
        return _gmat_py.Target_Initialize(self)

    def Execute(self):
        return _gmat_py.Target_Execute(self)

    def RunComplete(self):
        return _gmat_py.Target_RunComplete(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Target_SetClass(base)

# Register Target in _gmat_py:
_gmat_py.Target_swigregister(Target)
class Toggle(GmatCommand):
    r"""
    Insert descriptive text here.

    Notes: Any notes here.

    Command used to turn subscribers on and off
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Toggle

    def __init__(self, *args):
        _gmat_py.Toggle_swiginit(self, _gmat_py.new_Toggle(*args))

    def Clone(self):
        return _gmat_py.Toggle_Clone(self)

    def TakeAction(self, *args):
        return _gmat_py.Toggle_TakeAction(self, *args)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Toggle_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Toggle_GetRefObjectNameArray(self, type)

    def IncludeOwnedObjectsInValidation(self):
        return _gmat_py.Toggle_IncludeOwnedObjectsInValidation(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.Toggle_GetGeneratingString(self, mode, prefix, useName)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Toggle_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.Toggle_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Toggle_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Toggle_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Toggle_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.Toggle_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Toggle_SetStringParameter(self, *args)

    def InterpretAction(self):
        return _gmat_py.Toggle_InterpretAction(self)

    def Initialize(self):
        return _gmat_py.Toggle_Initialize(self)

    def Execute(self):
        return _gmat_py.Toggle_Execute(self)

    def HasLocalClones(self):
        return _gmat_py.Toggle_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Toggle_SetClass(base)

# Register Toggle in _gmat_py:
_gmat_py.Toggle_swigregister(Toggle)
class UpdateDynamicData(GmatCommand):
    r"""Declares UpdateDynamicData methods"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.UpdateDynamicData_swiginit(self, _gmat_py.new_UpdateDynamicData(*args))
    __swig_destroy__ = _gmat_py.delete_UpdateDynamicData

    def Clone(self):
        return _gmat_py.UpdateDynamicData_Clone(self)

    def SetRefObject(self, obj, type, name, index):
        return _gmat_py.UpdateDynamicData_SetRefObject(self, obj, type, name, index)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.UpdateDynamicData_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.UpdateDynamicData_GetRefObjectNameArray(self, type)

    def GetParameterID(self, str):
        return _gmat_py.UpdateDynamicData_GetParameterID(self, str)

    def GetStringParameter(self, *args):
        return _gmat_py.UpdateDynamicData_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.UpdateDynamicData_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.UpdateDynamicData_GetStringArrayParameter(self, *args)

    def GetGeneratingString(self, *args):
        return _gmat_py.UpdateDynamicData_GetGeneratingString(self, *args)

    def InterpretAction(self):
        return _gmat_py.UpdateDynamicData_InterpretAction(self)

    def Initialize(self):
        return _gmat_py.UpdateDynamicData_Initialize(self)

    def Execute(self):
        return _gmat_py.UpdateDynamicData_Execute(self)

    def HasLocalClones(self):
        return _gmat_py.UpdateDynamicData_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.UpdateDynamicData_SetClass(base)

# Register UpdateDynamicData in _gmat_py:
_gmat_py.UpdateDynamicData_swigregister(UpdateDynamicData)
class Vary(SolverSequenceCommand):
    r"""
    Definition for the Vary command class

    Command that manages processing for entry to the Varyer loop

    The Vary command manages the Varyer loop.  All Varyers implement a state
    machine that evaluates the current state of the Varying process, and provides
    data to the command sequence about the next step to be taken in the Varying
    process.  As far as the Vary command is concerned, there are 3 possible steps
    to take:

    1.  Fire the Varyer to perform a calculation.

    2.  Run through the Commands in the Varyer loop.

    3.  On convergence, continue with the command sequence following the Varyer loop.


    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Vary

    def __init__(self, *args):
        _gmat_py.Vary_swiginit(self, _gmat_py.new_Vary(*args))

    def Clone(self):
        return _gmat_py.Vary_Clone(self)

    def GetGeneratingString(self, *args):
        return _gmat_py.Vary_GetGeneratingString(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Vary_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Vary_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Vary_GetRefObjectNameArray(self, type)

    def GetParameterText(self, id):
        return _gmat_py.Vary_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Vary_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Vary_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Vary_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Vary_IsParameterReadOnly(self, *args)

    def GetRealParameter(self, id):
        return _gmat_py.Vary_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.Vary_SetRealParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.Vary_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Vary_SetStringParameter(self, *args)

    def SetField(self, id, value):
        return _gmat_py.Vary_SetField(self, id, value)

    def SetNumber(self, label, value):
        return _gmat_py.Vary_SetNumber(self, label, value)

    def GetNumber(self, *args):
        return _gmat_py.Vary_GetNumber(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.Vary_SetRefObject(self, *args)

    def InterpretAction(self):
        return _gmat_py.Vary_InterpretAction(self)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Vary_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Vary_SetElementWrapper(self, toWrapper, withName)

    def ClearWrappers(self):
        return _gmat_py.Vary_ClearWrappers(self)

    def Initialize(self):
        return _gmat_py.Vary_Initialize(self)

    def Execute(self):
        return _gmat_py.Vary_Execute(self)

    def RunComplete(self):
        return _gmat_py.Vary_RunComplete(self)

    def TakeAction(self, *args):
        return _gmat_py.Vary_TakeAction(self, *args)

    def SetInitialValue(self, theSolver):
        return _gmat_py.Vary_SetInitialValue(self, theSolver)

    def SetIsThisLastVaryCommand(self, flag):
        return _gmat_py.Vary_SetIsThisLastVaryCommand(self, flag)

    def IsThisLastVaryCommand(self):
        return _gmat_py.Vary_IsThisLastVaryCommand(self)

    def HasLocalClones(self):
        return _gmat_py.Vary_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Vary_SetClass(base)

# Register Vary in _gmat_py:
_gmat_py.Vary_swigregister(Vary)
class While(ConditionalBranch):
    r"""
    Definition for the While command class

    Command that manages processing for entry to the While statement

    The While command manages the While statement.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.While_swiginit(self, _gmat_py.new_While(*args))
    __swig_destroy__ = _gmat_py.delete_While

    def Append(self, cmd):
        return _gmat_py.While_Append(self, cmd)

    def Initialize(self):
        return _gmat_py.While_Initialize(self)

    def Execute(self):
        return _gmat_py.While_Execute(self)

    def GetParameterText(self, id):
        return _gmat_py.While_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.While_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.While_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.While_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.While_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.While_SetIntegerParameter(self, *args)

    def Clone(self):
        return _gmat_py.While_Clone(self)

    def GetGeneratingString(self, mode, prefix, useName):
        return _gmat_py.While_GetGeneratingString(self, mode, prefix, useName)

    def HasLocalClones(self):
        return _gmat_py.While_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.While_SetClass(base)

# Register While in _gmat_py:
_gmat_py.While_swigregister(While)
class Write(GmatCommand):
    r"""
     Class definition for the Write command.

    The Write command is used to write data to a GUI Message Window.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Write

    def __init__(self, *args):
        _gmat_py.Write_swiginit(self, _gmat_py.new_Write(*args))

    def InterpretAction(self):
        return _gmat_py.Write_InterpretAction(self)

    def SetElementWrapper(self, toWrapper, withName):
        return _gmat_py.Write_SetElementWrapper(self, toWrapper, withName)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Write_GetWrapperObjectNameArray(self, completeSet)

    def ClearWrappers(self):
        return _gmat_py.Write_ClearWrappers(self)

    def TakeAction(self, *args):
        return _gmat_py.Write_TakeAction(self, *args)

    def Initialize(self):
        return _gmat_py.Write_Initialize(self)

    def Execute(self):
        return _gmat_py.Write_Execute(self)

    def RunComplete(self):
        return _gmat_py.Write_RunComplete(self)

    def Clone(self):
        return _gmat_py.Write_Clone(self)

    def GetParameterID(self, str):
        return _gmat_py.Write_GetParameterID(self, str)

    def GetStringParameter(self, *args):
        return _gmat_py.Write_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Write_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.Write_GetStringArrayParameter(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.Write_GetRefObjectName(self, type)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Write_GetRefObjectNameArray(self, type)

    def SetRefObject(self, obj, type, name, index):
        return _gmat_py.Write_SetRefObject(self, obj, type, name, index)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Write_RenameRefObject(self, type, oldName, newName)

    def GetGeneratingString(self, *args):
        return _gmat_py.Write_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.Write_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Write_SetClass(base)

# Register Write in _gmat_py:
_gmat_py.Write_swigregister(Write)
class SpaceObject(SpacePoint):
    r"""Defines the base class used for spacecraft and formations."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SpaceObject

    def GetLastState(self):
        return _gmat_py.SpaceObject_GetLastState(self)

    def GetState(self):
        return _gmat_py.SpaceObject_GetState(self)

    def GetAcceleration(self):
        return _gmat_py.SpaceObject_GetAcceleration(self)

    def SetAcceleration(self, accel):
        return _gmat_py.SpaceObject_SetAcceleration(self, accel)

    def GetEpoch(self):
        return _gmat_py.SpaceObject_GetEpoch(self)

    def GetEpochGT(self):
        return _gmat_py.SpaceObject_GetEpochGT(self)

    def SetEpoch(self, ep):
        return _gmat_py.SpaceObject_SetEpoch(self, ep)

    def SetEpochGT(self, ep):
        return _gmat_py.SpaceObject_SetEpochGT(self, ep)

    def IsManeuvering(self, *args):
        return _gmat_py.SpaceObject_IsManeuvering(self, *args)

    def GetManeuveringMembers(self):
        return _gmat_py.SpaceObject_GetManeuveringMembers(self)

    def ParametersHaveChanged(self, *args):
        return _gmat_py.SpaceObject_ParametersHaveChanged(self, *args)

    def GetGmatTimeParameter(self, *args):
        return _gmat_py.SpaceObject_GetGmatTimeParameter(self, *args)

    def SetGmatTimeParameter(self, *args):
        return _gmat_py.SpaceObject_SetGmatTimeParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.SpaceObject_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.SpaceObject_SetRealParameter(self, *args)

    def SetOriginName(self, cbName):
        r""" TODO: Waiting for CoordinateSystems in Spacecraft, then see if needed"""
        return _gmat_py.SpaceObject_SetOriginName(self, cbName)

    def GetOriginName(self):
        return _gmat_py.SpaceObject_GetOriginName(self)

    def SetOrigin(self, cb):
        return _gmat_py.SpaceObject_SetOrigin(self, cb)

    def GetOrigin(self):
        return _gmat_py.SpaceObject_GetOrigin(self)

    def GetMJ2000State(self, *args):
        return _gmat_py.SpaceObject_GetMJ2000State(self, *args)

    def GetMJ2000Position(self, *args):
        return _gmat_py.SpaceObject_GetMJ2000Position(self, *args)

    def GetMJ2000Velocity(self, *args):
        return _gmat_py.SpaceObject_GetMJ2000Velocity(self, *args)

    def GetMJ2000Acceleration(self, *args):
        return _gmat_py.SpaceObject_GetMJ2000Acceleration(self, *args)

    def ClearLastStopTriggered(self):
        return _gmat_py.SpaceObject_ClearLastStopTriggered(self)

    def SetLastStopTriggered(self, stopCondName):
        return _gmat_py.SpaceObject_SetLastStopTriggered(self, stopCondName)

    def GetLastStopTriggered(self):
        return _gmat_py.SpaceObject_GetLastStopTriggered(self)

    def WasLastStopTriggered(self, stopCondName):
        return _gmat_py.SpaceObject_WasLastStopTriggered(self, stopCondName)

    def SetPrecisionTimeFlag(self, onOff):
        return _gmat_py.SpaceObject_SetPrecisionTimeFlag(self, onOff)

    def HasEphemPropagated(self, *args):
        return _gmat_py.SpaceObject_HasEphemPropagated(self, *args)

    def HasPublished(self, *args):
        return _gmat_py.SpaceObject_HasPublished(self, *args)

    def HasEphemerisFile(self):
        return _gmat_py.SpaceObject_HasEphemerisFile(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SpaceObject_SetClass(base)

# Register SpaceObject in _gmat_py:
_gmat_py.SpaceObject_swigregister(SpaceObject)
class Spacecraft(SpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.Spacecraft_swiginit(self, _gmat_py.new_Spacecraft(*args))
    __swig_destroy__ = _gmat_py.delete_Spacecraft

    def SetSolarSystem(self, ss):
        return _gmat_py.Spacecraft_SetSolarSystem(self, ss)

    def GetSolarSystem(self):
        return _gmat_py.Spacecraft_GetSolarSystem(self)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.Spacecraft_SetInternalCoordSystem(self, cs)

    def GetInternalCoordSystem(self):
        return _gmat_py.Spacecraft_GetInternalCoordSystem(self)

    def GetEphemManager(self):
        return _gmat_py.Spacecraft_GetEphemManager(self)

    def GetModelFile(self):
        return _gmat_py.Spacecraft_GetModelFile(self)

    def GetModelFileFullPath(self):
        return _gmat_py.Spacecraft_GetModelFileFullPath(self)

    def GetModelId(self):
        return _gmat_py.Spacecraft_GetModelId(self)

    def SetModelId(self, id):
        return _gmat_py.Spacecraft_SetModelId(self, id)

    def GetState(self, *args):
        return _gmat_py.Spacecraft_GetState(self, *args)

    def GetStateElementLabels(self, stateType):
        return _gmat_py.Spacecraft_GetStateElementLabels(self, stateType)

    def GetCartesianState(self):
        return _gmat_py.Spacecraft_GetCartesianState(self)

    def GetKeplerianState(self):
        return _gmat_py.Spacecraft_GetKeplerianState(self)

    def GetModifiedKeplerianState(self):
        return _gmat_py.Spacecraft_GetModifiedKeplerianState(self)

    def GetAnomaly(self):
        return _gmat_py.Spacecraft_GetAnomaly(self)

    def GetAnomalyType(self):
        return _gmat_py.Spacecraft_GetAnomalyType(self)

    def HasAttitude(self):
        return _gmat_py.Spacecraft_HasAttitude(self)

    def GetAttitude(self, a1mjdTime):
        return _gmat_py.Spacecraft_GetAttitude(self, a1mjdTime)

    def GetAngularVelocity(self, a1mjdTime):
        return _gmat_py.Spacecraft_GetAngularVelocity(self, a1mjdTime)

    def GetEulerAngleSequence(self):
        return _gmat_py.Spacecraft_GetEulerAngleSequence(self)

    def GetAttitudeRotationMatrix(self, epochGT):
        r""" Rotation matrix from attitude frame to inertial frame (MT matrix)"""
        return _gmat_py.Spacecraft_GetAttitudeRotationMatrix(self, epochGT)

    def GetTotalMass(self):
        return _gmat_py.Spacecraft_GetTotalMass(self)

    def GetSystemCM(self):
        return _gmat_py.Spacecraft_GetSystemCM(self)

    def GetSystemMOI(self):
        return _gmat_py.Spacecraft_GetSystemMOI(self)

    def GetNPlateSRPReflectance(self, *args):
        return _gmat_py.Spacecraft_GetNPlateSRPReflectance(self, *args)

    def GetAttitudeRotationMatrixDerivative(self, epochGT):
        return _gmat_py.Spacecraft_GetAttitudeRotationMatrixDerivative(self, epochGT)

    def GetNPlateSRPReflectanceDerivative(self, sunSC, epochGT):
        return _gmat_py.Spacecraft_GetNPlateSRPReflectanceDerivative(self, sunSC, epochGT)

    def GetSPADSRPArea(self, ep, sunVector):
        return _gmat_py.Spacecraft_GetSPADSRPArea(self, ep, sunVector)

    def GetSPADDragArea(self, ep, velVector):
        return _gmat_py.Spacecraft_GetSPADDragArea(self, ep, velVector)

    def GetPowerGenerated(self):
        r""" Get the total power generated by the power system"""
        return _gmat_py.Spacecraft_GetPowerGenerated(self)

    def GetThrustPower(self):
        r""" Get the power available to the thruster(s)"""
        return _gmat_py.Spacecraft_GetThrustPower(self)

    def GetSpacecraftBusPower(self):
        return _gmat_py.Spacecraft_GetSpacecraftBusPower(self)

    def RecordEphemerisData(self):
        return _gmat_py.Spacecraft_RecordEphemerisData(self)

    def ProvideEphemerisData(self):
        r""" Load the recorded ephemeris and start up another file to continue recording"""
        return _gmat_py.Spacecraft_ProvideEphemerisData(self)

    def Clone(self):
        return _gmat_py.Spacecraft_Clone(self)

    def Copy(self, orig):
        return _gmat_py.Spacecraft_Copy(self, orig)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Spacecraft_RenameRefObject(self, type, oldName, newName)

    def GetAttributeCommentLine(self, index):
        return _gmat_py.Spacecraft_GetAttributeCommentLine(self, index)

    def SetAttributeCommentLine(self, index, comment):
        return _gmat_py.Spacecraft_SetAttributeCommentLine(self, index, comment)

    def GetInlineAttributeComment(self, index):
        return _gmat_py.Spacecraft_GetInlineAttributeComment(self, index)

    def SetInlineAttributeComment(self, index, comment):
        return _gmat_py.Spacecraft_SetInlineAttributeComment(self, index, comment)

    def GetRefObjectName(self, type):
        return _gmat_py.Spacecraft_GetRefObjectName(self, type)

    def HasRefObjectTypeArray(self):
        return _gmat_py.Spacecraft_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Spacecraft_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Spacecraft_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, *args):
        return _gmat_py.Spacecraft_SetRefObjectName(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.Spacecraft_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.Spacecraft_SetRefObject(self, *args)

    def GetRefObjectArray(self, *args):
        return _gmat_py.Spacecraft_GetRefObjectArray(self, *args)

    def GetParameterID(self, str):
        return _gmat_py.Spacecraft_GetParameterID(self, str)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Spacecraft_IsParameterReadOnly(self, *args)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.Spacecraft_IsParameterCommandModeSettable(self, id)

    def ParameterAffectsDynamics(self, id):
        return _gmat_py.Spacecraft_ParameterAffectsDynamics(self, id)

    def ParameterDvInitializesNonzero(self, id, r=0, c=0):
        return _gmat_py.Spacecraft_ParameterDvInitializesNonzero(self, id, r, c)

    def ParameterDvInitialValue(self, id, r=0, c=0):
        return _gmat_py.Spacecraft_ParameterDvInitialValue(self, id, r, c)

    def GetGmatTimeParameter(self, *args):
        return _gmat_py.Spacecraft_GetGmatTimeParameter(self, *args)

    def SetGmatTimeParameter(self, *args):
        return _gmat_py.Spacecraft_SetGmatTimeParameter(self, *args)

    def GetIntegerParameter(self, *args):
        return _gmat_py.Spacecraft_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.Spacecraft_SetIntegerParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.Spacecraft_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.Spacecraft_SetRvectorParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Spacecraft_SetStringParameter(self, *args)

    def GetRmatrixParameter(self, *args):
        return _gmat_py.Spacecraft_GetRmatrixParameter(self, *args)

    def SetRmatrixParameter(self, *args):
        return _gmat_py.Spacecraft_SetRmatrixParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.Spacecraft_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Spacecraft_SetRealParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.Spacecraft_GetStringArrayParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.Spacecraft_GetStringParameter(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.Spacecraft_GetParameterText(self, id)

    def GetParameterType(self, id):
        return _gmat_py.Spacecraft_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Spacecraft_GetParameterTypeString(self, id)

    def GetPropertyObjectType(self, id):
        return _gmat_py.Spacecraft_GetPropertyObjectType(self, id)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.Spacecraft_GetPropertyEnumStrings(self, id)

    def CanAssignStringToObjectProperty(self, id):
        return _gmat_py.Spacecraft_CanAssignStringToObjectProperty(self, id)

    def Validate(self):
        return _gmat_py.Spacecraft_Validate(self)

    def Initialize(self):
        return _gmat_py.Spacecraft_Initialize(self)

    def IsManeuvering(self, mnvrFlag):
        return _gmat_py.Spacecraft_IsManeuvering(self, mnvrFlag)

    def AttitudeAffectsDynamics(self, attFlag):
        return _gmat_py.Spacecraft_AttitudeAffectsDynamics(self, attFlag)

    def TakeAction(self, *args):
        return _gmat_py.Spacecraft_TakeAction(self, *args)

    def IsOwnedObject(self, id):
        return _gmat_py.Spacecraft_IsOwnedObject(self, id)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.Spacecraft_GetOwnedObject(self, whichOne)

    def GetGeneratingString(self, *args):
        return _gmat_py.Spacecraft_GetGeneratingString(self, *args)

    def GetEpochString(self):
        return _gmat_py.Spacecraft_GetEpochString(self)

    def GetUTCEpochString(self):
        return _gmat_py.Spacecraft_GetUTCEpochString(self)

    def SetDateFormat(self, dateType):
        return _gmat_py.Spacecraft_SetDateFormat(self, dateType)

    def SetPrecisionTimeFlag(self, onOff):
        return _gmat_py.Spacecraft_SetPrecisionTimeFlag(self, onOff)

    def SetEpoch(self, *args):
        return _gmat_py.Spacecraft_SetEpoch(self, *args)

    def SetState(self, *args):
        return _gmat_py.Spacecraft_SetState(self, *args)

    def SetAnomaly(self, type, ta):
        return _gmat_py.Spacecraft_SetAnomaly(self, type, ta)

    def GetPropItemID(self, whichItem):
        return _gmat_py.Spacecraft_GetPropItemID(self, whichItem)

    def SetPropItem(self, propItem):
        return _gmat_py.Spacecraft_SetPropItem(self, propItem)

    def GetDefaultPropItems(self):
        return _gmat_py.Spacecraft_GetDefaultPropItems(self)

    def GetPropItem(self, item):
        return _gmat_py.Spacecraft_GetPropItem(self, item)

    def GetPropItemSize(self, item):
        return _gmat_py.Spacecraft_GetPropItemSize(self, item)

    def PropItemNeedsFinalUpdate(self, item):
        return _gmat_py.Spacecraft_PropItemNeedsFinalUpdate(self, item)

    def GetEstimationParameterID(self, param):
        return _gmat_py.Spacecraft_GetEstimationParameterID(self, param)

    def GetParameterNameForEstimationParameter(self, parmName):
        return _gmat_py.Spacecraft_GetParameterNameForEstimationParameter(self, parmName)

    def GetParameterNameFromEstimationParameter(self, parmName):
        return _gmat_py.Spacecraft_GetParameterNameFromEstimationParameter(self, parmName)

    def IsEstimationParameterValid(self, id):
        return _gmat_py.Spacecraft_IsEstimationParameterValid(self, id)

    def GetEstimationParameterSize(self, id):
        return _gmat_py.Spacecraft_GetEstimationParameterSize(self, id)

    def GetEstimationParameterValue(self, id):
        return _gmat_py.Spacecraft_GetEstimationParameterValue(self, id)

    def HasDynamicParameterSTM(self, parameterId):
        return _gmat_py.Spacecraft_HasDynamicParameterSTM(self, parameterId)

    def GetParameterSTM(self, parameterId):
        return _gmat_py.Spacecraft_GetParameterSTM(self, parameterId)

    def GetStmRowId(self, forRow):
        return _gmat_py.Spacecraft_GetStmRowId(self, forRow)

    def HasParameterCovariances(self, parameterId):
        return _gmat_py.Spacecraft_HasParameterCovariances(self, parameterId)

    def GetParameterCovariances(self, parameterId):
        return _gmat_py.Spacecraft_GetParameterCovariances(self, parameterId)

    def MapCovarianceToParameters(self):
        return _gmat_py.Spacecraft_MapCovarianceToParameters(self)

    def HasLocalClones(self):
        return _gmat_py.Spacecraft_HasLocalClones(self)

    def UpdateClonedObject(self, obj):
        return _gmat_py.Spacecraft_UpdateClonedObject(self, obj)

    def UpdateClonedObjectParameter(self, obj, updatedParameterId):
        return _gmat_py.Spacecraft_UpdateClonedObjectParameter(self, obj, updatedParameterId)

    def UpdateElementLabels(self, *args):
        return _gmat_py.Spacecraft_UpdateElementLabels(self, *args)

    def AddExternalStmSetting(self, stmLabel, stmObj, parmIndex, found, size=1):
        return _gmat_py.Spacecraft_AddExternalStmSetting(self, stmLabel, stmObj, parmIndex, found, size)

    def GetCoordinateSystemTransformMatrix(self):
        r""" Get tranformation matrix to convert state from spacecraft's coordinate system to its internal coordinate system"""
        return _gmat_py.Spacecraft_GetCoordinateSystemTransformMatrix(self)

    def SetSRPShapeModel(self, model):
        return _gmat_py.Spacecraft_SetSRPShapeModel(self, model)

    def GetSRPShapeModel(self):
        return _gmat_py.Spacecraft_GetSRPShapeModel(self)

    def SetDragShapeModel(self, model):
        return _gmat_py.Spacecraft_SetDragShapeModel(self, model)

    def GetDragShapeModel(self):
        return _gmat_py.Spacecraft_GetDragShapeModel(self)

    def GetEqualConstrains(self):
        r""" This method is used to get all equality constrains"""
        return _gmat_py.Spacecraft_GetEqualConstrains(self)

    def UpdateValueForConstraints(self):
        return _gmat_py.Spacecraft_UpdateValueForConstraints(self)

    def SetSTMToIdentityMatrix(self):
        return _gmat_py.Spacecraft_SetSTMToIdentityMatrix(self)

    def SetRunningCommandFlag(self, runningCommand):
        return _gmat_py.Spacecraft_SetRunningCommandFlag(self, runningCommand)

    def CreateErrorModelForSignalPath(self, spacecraftName, spacecraftId, measType):
        r""" Used to properly name error models found on Spacecraft receivers"""
        return _gmat_py.Spacecraft_CreateErrorModelForSignalPath(self, spacecraftName, spacecraftId, measType)

    def HasEphemerisFile(self):
        return _gmat_py.Spacecraft_HasEphemerisFile(self)

    def SetEphemerisFileTypes(self, type):
        return _gmat_py.Spacecraft_SetEphemerisFileTypes(self, type)

    def GetEphemerisFileTypes(self):
        return _gmat_py.Spacecraft_GetEphemerisFileTypes(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Spacecraft_SetClass(base)

# Register Spacecraft in _gmat_py:
_gmat_py.Spacecraft_swigregister(Spacecraft)
class Solver(GmatBase):
    r"""
    Base class for Targeters, Optimizers, and other parametric scanning tools.

    Base class for targeters, optimizers, and parameter scanning tools.

    The Solver subsystem provides the numerical engines that adjust input
    parameters (the "variables") and measure the results of these perturbations.
    The system works as a state machine.  The specific path through the state
    machine depends on the solver implementation.  This class defines the state
    values used, and the core methods that use these states and that report on
    the results of the states.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    INITIALIZING = _gmat_py.Solver_INITIALIZING
    NOMINAL = _gmat_py.Solver_NOMINAL
    PERTURBING = _gmat_py.Solver_PERTURBING
    ITERATING = _gmat_py.Solver_ITERATING
    CALCULATING = _gmat_py.Solver_CALCULATING
    ACCUMULATING = _gmat_py.Solver_ACCUMULATING
    ESTIMATING = _gmat_py.Solver_ESTIMATING
    SIMULATING = _gmat_py.Solver_SIMULATING
    PROPAGATING = _gmat_py.Solver_PROPAGATING
    LOCATING = _gmat_py.Solver_LOCATING
    CHECKINGRUN = _gmat_py.Solver_CHECKINGRUN
    RUNEXTERNAL = _gmat_py.Solver_RUNEXTERNAL
    RUNSPECIAL = _gmat_py.Solver_RUNSPECIAL
    FINISHED = _gmat_py.Solver_FINISHED
    UNDEFINED_STATE = _gmat_py.Solver_UNDEFINED_STATE
    NORMAL_STYLE = _gmat_py.Solver_NORMAL_STYLE
    CONCISE_STYLE = _gmat_py.Solver_CONCISE_STYLE
    VERBOSE_STYLE = _gmat_py.Solver_VERBOSE_STYLE
    DEBUG_STYLE = _gmat_py.Solver_DEBUG_STYLE
    MaxStyle = _gmat_py.Solver_MaxStyle
    SOLVE = _gmat_py.Solver_SOLVE
    INITIAL_GUESS = _gmat_py.Solver_INITIAL_GUESS
    RUN_CORRECTED = _gmat_py.Solver_RUN_CORRECTED
    UNKNOWN_MACHINE_MODE = _gmat_py.Solver_UNKNOWN_MACHINE_MODE
    DISCARD = _gmat_py.Solver_DISCARD
    RETAIN = _gmat_py.Solver_RETAIN
    HALT = _gmat_py.Solver_HALT
    UNKNOWN_EXIT_MODE = _gmat_py.Solver_UNKNOWN_EXIT_MODE
    __swig_destroy__ = _gmat_py.delete_Solver

    def IsSolverInternal(self):
        return _gmat_py.Solver_IsSolverInternal(self)

    def RequiresVariables(self):
        return _gmat_py.Solver_RequiresVariables(self)

    def NeedsServerStartup(self):
        return _gmat_py.Solver_NeedsServerStartup(self)

    def GetState(self):
        return _gmat_py.Solver_GetState(self)

    def GetNestedState(self):
        return _gmat_py.Solver_GetNestedState(self)

    def AdvanceState(self):
        return _gmat_py.Solver_AdvanceState(self)

    def AdvanceNestedState(self, vars):
        return _gmat_py.Solver_AdvanceNestedState(self, vars)

    def UpdateSolverGoal(self, id, newValue):
        return _gmat_py.Solver_UpdateSolverGoal(self, id, newValue)

    def UpdateSolverTolerance(self, id, newValue):
        return _gmat_py.Solver_UpdateSolverTolerance(self, id, newValue)

    def GetParameterText(self, id):
        return _gmat_py.Solver_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Solver_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Solver_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Solver_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Solver_IsParameterReadOnly(self, *args)

    def GetIntegerParameter(self, id):
        return _gmat_py.Solver_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.Solver_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.Solver_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Solver_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.Solver_GetStringArrayParameter(self, id)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.Solver_GetPropertyEnumStrings(self, id)

    def GetBooleanParameter(self, *args):
        return _gmat_py.Solver_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.Solver_SetBooleanParameter(self, *args)

    def ReportProgress(self, *args):
        return _gmat_py.Solver_ReportProgress(self, *args)

    def SetDebugString(self, str):
        return _gmat_py.Solver_SetDebugString(self, str)

    def Initialize(self):
        return _gmat_py.Solver_Initialize(self)

    def Finalize(self):
        return _gmat_py.Solver_Finalize(self)

    def SetSolverVariables(self, data, name):
        return _gmat_py.Solver_SetSolverVariables(self, data, name)

    def RefreshSolverVariables(self, data, name):
        return _gmat_py.Solver_RefreshSolverVariables(self, data, name)

    def GetSolverVariable(self, id):
        return _gmat_py.Solver_GetSolverVariable(self, id)

    def SetUnscaledVariable(self, id, value):
        return _gmat_py.Solver_SetUnscaledVariable(self, id, value)

    def GetSolverData(self, type):
        return _gmat_py.Solver_GetSolverData(self, type)

    def SetSolverResults(self, *args):
        r"""
        Sets up the data fields used for the results of an iteration.

        :type data: float
        :param data: An array of data appropriate to the results used in the
                          algorithm (for instance, tolerances for targeter goals).
        :type name: string
        :param name: A label for the data parameter.  Defaults to the empty
                          string.

        :rtype: int
        :return: The ID used for this variable.
        """
        return _gmat_py.Solver_SetSolverResults(self, *args)

    def SetResultValue(self, *args):
        r"""
        Passes in the results obtained from a run in the solver loop.

        :type id: int
        :param id:    The ID used for this result.
        :type value: float
        :param value: The corresponding result.
        """
        return _gmat_py.Solver_SetResultValue(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Solver_SetClass(base)

# Register Solver in _gmat_py:
_gmat_py.Solver_swigregister(Solver)
class Optimizer(Solver):
    r"""Definition for the Optimizer base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Optimizer

    def Initialize(self):
        return _gmat_py.Optimizer_Initialize(self)

    def SetSolverResults(self, *args):
        return _gmat_py.Optimizer_SetSolverResults(self, *args)

    def SetResultValue(self, *args):
        return _gmat_py.Optimizer_SetResultValue(self, *args)

    def SetConstraintValues(self, id, desiredValue, achievedValue, condition=0, within=-1.0):
        return _gmat_py.Optimizer_SetConstraintValues(self, id, desiredValue, achievedValue, condition, within)

    def ReportProgress(self, *args):
        return _gmat_py.Optimizer_ReportProgress(self, *args)

    def GetProgressString(self):
        return _gmat_py.Optimizer_GetProgressString(self)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Optimizer_IsParameterReadOnly(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.Optimizer_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Optimizer_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Optimizer_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Optimizer_GetParameterTypeString(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.Optimizer_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.Optimizer_SetRealParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.Optimizer_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Optimizer_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.Optimizer_GetStringArrayParameter(self, id)

    def GetBooleanParameter(self, *args):
        return _gmat_py.Optimizer_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.Optimizer_SetBooleanParameter(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.Optimizer_TakeAction(self, *args)

    def GetJacobianString(self):
        return _gmat_py.Optimizer_GetJacobianString(self)

    def GetSolverData(self, type):
        return _gmat_py.Optimizer_GetSolverData(self, type)

    def Optimize(self):
        r"""
        This method performs the optimization.

        :rtype: boolean
        :return: success flag.
        """
        return _gmat_py.Optimizer_Optimize(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Optimizer_SetClass(base)

# Register Optimizer in _gmat_py:
_gmat_py.Optimizer_swigregister(Optimizer)
class DerivativeModel(object):
    r"""
    Base class for derivatives used by the Solvers.

    Base class for gradients, Jacobians, Hessians, and so forth.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    FORWARD_DIFFERENCE = _gmat_py.DerivativeModel_FORWARD_DIFFERENCE
    CENTRAL_DIFFERENCE = _gmat_py.DerivativeModel_CENTRAL_DIFFERENCE
    BACKWARD_DIFFERENCE = _gmat_py.DerivativeModel_BACKWARD_DIFFERENCE
    USER_SUPPLIED = _gmat_py.DerivativeModel_USER_SUPPLIED
    __swig_destroy__ = _gmat_py.delete_DerivativeModel

    def SetDifferenceMode(self, mode):
        return _gmat_py.DerivativeModel_SetDifferenceMode(self, mode)

    def Initialize(self, varCount, componentCount=1):
        return _gmat_py.DerivativeModel_Initialize(self, varCount, componentCount)

    def Achieved(self, pertNumber, componentId, dx, value, plusEffect=True):
        return _gmat_py.DerivativeModel_Achieved(self, pertNumber, componentId, dx, value, plusEffect)

    def Calculate(self, arg2):
        return _gmat_py.DerivativeModel_Calculate(self, arg2)

# Register DerivativeModel in _gmat_py:
_gmat_py.DerivativeModel_swigregister(DerivativeModel)
class DifferentialCorrector(Solver):
    r"""
    Definition for the differential corrector targeter.

    This class implements the first targeter in GMAT.

    TODO: refactor this class with the Solver class so that elements common to
          targeting, scanning, estimating and optimizing are all in the base
          class.  This task should be done when the first instance of one of the
          other approaches is implemented.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_DifferentialCorrector

    def __init__(self, *args):
        _gmat_py.DifferentialCorrector_swiginit(self, _gmat_py.new_DifferentialCorrector(*args))

    def Initialize(self):
        return _gmat_py.DifferentialCorrector_Initialize(self)

    def AdvanceState(self):
        return _gmat_py.DifferentialCorrector_AdvanceState(self)

    def ReportProgress(self, *args):
        return _gmat_py.DifferentialCorrector_ReportProgress(self, *args)

    def Clone(self):
        return _gmat_py.DifferentialCorrector_Clone(self)

    def Copy(self, orig):
        return _gmat_py.DifferentialCorrector_Copy(self, orig)

    def GetParameterText(self, id):
        return _gmat_py.DifferentialCorrector_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.DifferentialCorrector_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.DifferentialCorrector_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.DifferentialCorrector_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, id):
        return _gmat_py.DifferentialCorrector_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.DifferentialCorrector_SetIntegerParameter(self, id, value)

    def GetBooleanParameter(self, id):
        return _gmat_py.DifferentialCorrector_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.DifferentialCorrector_SetBooleanParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.DifferentialCorrector_GetStringParameter(self, id)

    def SetStringParameter(self, *args):
        return _gmat_py.DifferentialCorrector_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.DifferentialCorrector_GetStringArrayParameter(self, id)

    def TakeAction(self, *args):
        return _gmat_py.DifferentialCorrector_TakeAction(self, *args)

    def SetSolverResults(self, *args):
        return _gmat_py.DifferentialCorrector_SetSolverResults(self, *args)

    def UpdateSolverGoal(self, id, newValue):
        return _gmat_py.DifferentialCorrector_UpdateSolverGoal(self, id, newValue)

    def UpdateSolverTolerance(self, id, newValue):
        return _gmat_py.DifferentialCorrector_UpdateSolverTolerance(self, id, newValue)

    def SetResultValue(self, *args):
        return _gmat_py.DifferentialCorrector_SetResultValue(self, *args)

    def HasLocalClones(self):
        return _gmat_py.DifferentialCorrector_HasLocalClones(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.DifferentialCorrector_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.DifferentialCorrector_SetClass(base)

# Register DifferentialCorrector in _gmat_py:
_gmat_py.DifferentialCorrector_swigregister(DifferentialCorrector)
class ExternalOptimizer(Optimizer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ExternalOptimizer

    def Initialize(self):
        return _gmat_py.ExternalOptimizer_Initialize(self)

    def GetParameterText(self, id):
        return _gmat_py.ExternalOptimizer_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ExternalOptimizer_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ExternalOptimizer_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ExternalOptimizer_GetParameterTypeString(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.ExternalOptimizer_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ExternalOptimizer_SetStringParameter(self, *args)

    def Optimize(self):
        r"""
        This method performs the optimization.

        :rtype: boolean
        :return: success flag.
        """
        return _gmat_py.ExternalOptimizer_Optimize(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ExternalOptimizer_SetClass(base)

# Register ExternalOptimizer in _gmat_py:
_gmat_py.ExternalOptimizer_swigregister(ExternalOptimizer)
class Gradient(DerivativeModel):
    r"""
    Base class for gradient calculations used by the Solvers.

    Implements gradient calculations using finite differencing in one of three
    modes: forward differenced, central differenced, or backwards differenced.
    The class also makes provision for a user specified gradient.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Gradient

    def __init__(self, *args):
        _gmat_py.Gradient_swiginit(self, _gmat_py.new_Gradient(*args))

    def Initialize(self, varCount, componentCount=1):
        return _gmat_py.Gradient_Initialize(self, varCount, componentCount)

    def Achieved(self, pertNumber, componentId, dx, value, plusEffect=True):
        return _gmat_py.Gradient_Achieved(self, pertNumber, componentId, dx, value, plusEffect)

    def Calculate(self, grad):
        return _gmat_py.Gradient_Calculate(self, grad)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Gradient_SetClass(base)

# Register Gradient in _gmat_py:
_gmat_py.Gradient_swigregister(Gradient)
class InternalOptimizer(Optimizer):
    r"""
    Definition of the internal optimizer.

    Defines the interfaces used by Optimizers that run integral to GMAT.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_InternalOptimizer

    def Initialize(self):
        return _gmat_py.InternalOptimizer_Initialize(self)

    def ReportProgress(self, *args):
        return _gmat_py.InternalOptimizer_ReportProgress(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.InternalOptimizer_SetClass(base)

# Register InternalOptimizer in _gmat_py:
_gmat_py.InternalOptimizer_swigregister(InternalOptimizer)
class Jacobian(DerivativeModel):
    r"""
    Base class for Jacobian calculations used by the Solvers.

    Implements Jacobian calculations using finite differencing in one of three
    modes: forward differenced, central differenced, or backwards differenced.
    The class also makes provision for a user specified Jacobian.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Jacobian

    def __init__(self, *args):
        _gmat_py.Jacobian_swiginit(self, _gmat_py.new_Jacobian(*args))

    def Initialize(self, varCount, componentCount):
        return _gmat_py.Jacobian_Initialize(self, varCount, componentCount)

    def Achieved(self, pertNumber, componentId, dx, value, plusEffect=True):
        return _gmat_py.Jacobian_Achieved(self, pertNumber, componentId, dx, value, plusEffect)

    def Calculate(self, jac):
        return _gmat_py.Jacobian_Calculate(self, jac)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Jacobian_SetClass(base)

# Register Jacobian in _gmat_py:
_gmat_py.Jacobian_swigregister(Jacobian)
class LineSearch(object):
    r"""
    Class for line searches used by the Solvers.

    Definition for the line search class.  This class is not yet implemented.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.LineSearch_swiginit(self, _gmat_py.new_LineSearch())
    __swig_destroy__ = _gmat_py.delete_LineSearch

# Register LineSearch in _gmat_py:
_gmat_py.LineSearch_swigregister(LineSearch)
class PropSetup(GmatBase):
    r"""
    The propagator subsystem interface

    PropSetup is a container class that acts as the interface between the
    propagation subsystem and the rest of GMAT.  The core elements of the class
    are the Propagator, a PropagationStateManager, and, if needed, an ODEModel.

    The PropagationStateManager (PSM) is the interface between GMAT objects that
    move in time in the simulation and the propagation subsystem.  The PSM holds
    the data that is needed to build the state data that is propagated, and to
    configure the corresponding ODEModel for propagators that perform numerical
    integration.  The PSM retrieves current values for the elements that need
    propagation -- examples are the orbital state of a Spacecraft, the State
    Transition Matrix, and tank mass during a finite burn -- and constructs a
    vector that will change as the epoch changes in the simulation.  After a
    propagation step has been taken, the PSM is the interface used to update
    GMAT's objects with the new state data.

    The Propagator performs the actual evolution of the state, changing the
    values in the state vector to match changes in the simulation epoch.  GMAT
    supports three classes of propagators: Numerical Integrators, Analytic
    Propagators (not yet implemented), and ephemeris based propagators (not yet
    implemented).  Of these three classes, the numerical integrators require
    additional configuration in the PropSetup so that the differential equations
    that are integrated are constructed consistently with the propagation state
    vector.  The differential equations are managed in the ODEModel.

    GMAT's ODEModel class is a PhysicalModel that collects other PhysicalModel
    objects and adds up their contributions, generating the total contribution to
    an integrator.  In other words, the ODEModel instance is a container class
    that collects individual objects that supply contributions to the total
    differential equation, and adds these contributions together, generating the
    superposition needed by the integrator.  The ODEModel places these totals
    into a state vector supplied by the PropagationStateManager.  The ODEModel is
    responsible for ensuring that each contribution is assembled in the correct
    element of the state vector.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.PropSetup_swiginit(self, _gmat_py.new_PropSetup(*args))
    __swig_destroy__ = _gmat_py.delete_PropSetup

    def IsInitialized(self):
        return _gmat_py.PropSetup_IsInitialized(self)

    def GetPropagator(self):
        return _gmat_py.PropSetup_GetPropagator(self)

    def GetODEModel(self):
        return _gmat_py.PropSetup_GetODEModel(self)

    def GetPropStateManager(self):
        return _gmat_py.PropSetup_GetPropStateManager(self)

    def SetPropagator(self, propagator, fromGUI=False):
        return _gmat_py.PropSetup_SetPropagator(self, propagator, fromGUI)

    def SetODEModel(self, odeModel):
        return _gmat_py.PropSetup_SetODEModel(self, odeModel)

    def AddForce(self, force):
        return _gmat_py.PropSetup_AddForce(self, force)

    def GetForce(self, index):
        return _gmat_py.PropSetup_GetForce(self, index)

    def GetNumForces(self):
        return _gmat_py.PropSetup_GetNumForces(self)

    def AddPropObject(self, sat):
        return _gmat_py.PropSetup_AddPropObject(self, sat)

    def RemovePropObject(self, sat):
        return _gmat_py.PropSetup_RemovePropObject(self, sat)

    def PrepareInternals(self):
        return _gmat_py.PropSetup_PrepareInternals(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.PropSetup_RenameRefObject(self, type, oldName, newName)

    def SetRefObject(self, *args):
        return _gmat_py.PropSetup_SetRefObject(self, *args)

    def Clone(self):
        return _gmat_py.PropSetup_Clone(self)

    def Copy(self, orig):
        return _gmat_py.PropSetup_Copy(self, orig)

    def HasRefObjectTypeArray(self):
        return _gmat_py.PropSetup_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.PropSetup_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.PropSetup_GetRefObjectNameArray(self, type)

    def GetOwnedObject(self, whichOne):
        return _gmat_py.PropSetup_GetOwnedObject(self, whichOne)

    def IsOwnedObject(self, id):
        return _gmat_py.PropSetup_IsOwnedObject(self, id)

    def GetParameterList(self):
        return _gmat_py.PropSetup_GetParameterList(self)

    def GetParameterCount(self):
        return _gmat_py.PropSetup_GetParameterCount(self)

    def GetParameterType(self, id):
        return _gmat_py.PropSetup_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.PropSetup_GetParameterTypeString(self, id)

    def GetParameterText(self, id):
        return _gmat_py.PropSetup_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.PropSetup_GetParameterID(self, str)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.PropSetup_IsParameterReadOnly(self, *args)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.PropSetup_IsParameterCommandModeSettable(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.PropSetup_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.PropSetup_SetStringParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.PropSetup_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.PropSetup_SetRealParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.PropSetup_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.PropSetup_SetBooleanParameter(self, *args)

    def GetIntegerParameter(self, *args):
        return _gmat_py.PropSetup_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.PropSetup_SetIntegerParameter(self, *args)

    def Initialize(self):
        return _gmat_py.PropSetup_Initialize(self)

    def TakeAction(self, *args):
        return _gmat_py.PropSetup_TakeAction(self, *args)

    def GetGeneratingString(self, *args):
        return _gmat_py.PropSetup_GetGeneratingString(self, *args)

    def HasLocalClones(self):
        return _gmat_py.PropSetup_HasLocalClones(self)

    def UpdateClonedObject(self, obj):
        return _gmat_py.PropSetup_UpdateClonedObject(self, obj)

    def UpdateClonedObjectParameter(self, obj, updatedParameterId):
        return _gmat_py.PropSetup_UpdateClonedObjectParameter(self, obj, updatedParameterId)

    def SetPrecisionTimeFlag(self, onOff):
        return _gmat_py.PropSetup_SetPrecisionTimeFlag(self, onOff)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PropSetup_SetClass(base)

# Register PropSetup in _gmat_py:
_gmat_py.PropSetup_swigregister(PropSetup)
class Propagator(GmatBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Propagator

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Propagator_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.Propagator_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Propagator_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Propagator_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Propagator_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Propagator_IsParameterReadOnly(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.Propagator_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Propagator_SetRealParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.Propagator_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.Propagator_SetBooleanParameter(self, *args)

    def Initialize(self):
        return _gmat_py.Propagator_Initialize(self)

    def SetPhysicalModel(self, pPhysicalModel):
        return _gmat_py.Propagator_SetPhysicalModel(self, pPhysicalModel)

    def SetAsFinalStep(self, fs):
        return _gmat_py.Propagator_SetAsFinalStep(self, fs)

    def Update(self, forwards=True):
        return _gmat_py.Propagator_Update(self, forwards)

    def ResetInitialData(self):
        return _gmat_py.Propagator_ResetInitialData(self)

    def UpdateInitialData(self, dynamicOnly=False, updateEpoch=True):
        return _gmat_py.Propagator_UpdateInitialData(self, dynamicOnly, updateEpoch)

    def AccessOutState(self):
        return _gmat_py.Propagator_AccessOutState(self)

    def GetPropagatorOrder(self):
        return _gmat_py.Propagator_GetPropagatorOrder(self)

    def UsesODEModel(self):
        return _gmat_py.Propagator_UsesODEModel(self)

    def GetPropOriginName(self):
        return _gmat_py.Propagator_GetPropOriginName(self)

    def GetPropOrigin(self):
        return _gmat_py.Propagator_GetPropOrigin(self)

    def SetPropStateManager(self, sm):
        return _gmat_py.Propagator_SetPropStateManager(self, sm)

    def GetDimension(self):
        return _gmat_py.Propagator_GetDimension(self)

    def GetState(self):
        return _gmat_py.Propagator_GetState(self)

    def GetJ2KState(self):
        return _gmat_py.Propagator_GetJ2KState(self)

    def UpdateSpaceObject(self, newEpoch=-1.0):
        return _gmat_py.Propagator_UpdateSpaceObject(self, newEpoch)

    def UpdateSpaceObjectGT(self, newEpoch=-1.0):
        return _gmat_py.Propagator_UpdateSpaceObjectGT(self, newEpoch)

    def UpdateFromSpaceObject(self):
        return _gmat_py.Propagator_UpdateFromSpaceObject(self)

    def RevertSpaceObject(self):
        return _gmat_py.Propagator_RevertSpaceObject(self)

    def BufferState(self):
        return _gmat_py.Propagator_BufferState(self)

    def GetTime(self):
        return _gmat_py.Propagator_GetTime(self)

    def SetTime(self, t):
        return _gmat_py.Propagator_SetTime(self, t)

    def PropagatesForward(self):
        return _gmat_py.Propagator_PropagatesForward(self)

    def SetForwardPropagation(self, tf):
        return _gmat_py.Propagator_SetForwardPropagation(self, tf)

    def GetStepSize(self):
        return _gmat_py.Propagator_GetStepSize(self)

    def SetStepSize(self, newStepSize):
        return _gmat_py.Propagator_SetStepSize(self, newStepSize)

    def SetFollowUpStep(self, setYes):
        return _gmat_py.Propagator_SetFollowUpStep(self, setYes)

    def SetBurning(self, setYes):
        return _gmat_py.Propagator_SetBurning(self, setYes)

    def SetLastBurn(self, setYes):
        return _gmat_py.Propagator_SetLastBurn(self, setYes)

    def GetFollowUpStep(self):
        return _gmat_py.Propagator_GetFollowUpStep(self)

    def GetlastBurn(self):
        return _gmat_py.Propagator_GetlastBurn(self)

    def IsBurning(self):
        return _gmat_py.Propagator_IsBurning(self)

    def GetHasFiniteBurn(self):
        return _gmat_py.Propagator_GetHasFiniteBurn(self)

    def SetHasFiniteBurn(self, yesNo):
        return _gmat_py.Propagator_SetHasFiniteBurn(self, yesNo)

    def LoadSpans(self):
        return _gmat_py.Propagator_LoadSpans(self)

    def IsValidEpoch(self, theTime):
        return _gmat_py.Propagator_IsValidEpoch(self, theTime)

    def TurnDebug(self, debugFlag):
        return _gmat_py.Propagator_TurnDebug(self, debugFlag)

    def UsesErrorControl(self):
        return _gmat_py.Propagator_UsesErrorControl(self)

    def FindTimeStep(self):
        return _gmat_py.Propagator_FindTimeStep(self)

    def SetNoiseStep(self):
        return _gmat_py.Propagator_SetNoiseStep(self)

    def Step(self, *args):
        r"""
        Method to propagate by the default step
        This pure virtual method provides the interface used to advance the state
        by the amount specified in the stepSize parameter.  This is the core
        propagation routine.
        Adaptive step propagators will take the desired step if accuracy permits,
        and then adjust the stepSize parameter to the estimated optimal size for
        the next call.
        """
        return _gmat_py.Propagator_Step(self, *args)

    def GetStepTaken(self):
        r"""Method to report the size of the most recent propagation step."""
        return _gmat_py.Propagator_GetStepTaken(self)

    def RawStep(self, *args):
        return _gmat_py.Propagator_RawStep(self, *args)
    INITIAL_STEP_SIZE = _gmat_py.Propagator_INITIAL_STEP_SIZE
    r""" Stepsize for the propagation"""
    AlwaysUpdateStepsize = _gmat_py.Propagator_AlwaysUpdateStepsize
    PROCESS_NOISE_STEP = _gmat_py.Propagator_PROCESS_NOISE_STEP
    TIME_TO_NEXT_NOISE_STEP = _gmat_py.Propagator_TIME_TO_NEXT_NOISE_STEP
    PropagatorParamCount = _gmat_py.Propagator_PropagatorParamCount
    r""" Count of the parameters for this class"""

    def HasLocalClones(self):
        return _gmat_py.Propagator_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Propagator_SetClass(base)

# Register Propagator in _gmat_py:
_gmat_py.Propagator_swigregister(Propagator)
class Integrator(Propagator):
    r"""
     Base class for numerical integrators

    This class provides the interfaces needed to numerically integrate first
    order differential equations.  The basic equations that are solved must
    have the form

    .. math::

        {{dr^i}\over{dt}} = f(t,r)

    The right hand side of this equation, :math:`f(t,r)`, is provided by the
    PhysicalModel class instance that is passed to the Integrator.  Given this
    instance, the Integrator classes solve the equation above for
    :math:`r^i(t+\delta t)`, given :math:`r^i(t)` and an integration step
    :math:`\delta t`.

    Most Integrators provide the capability to estimate the accuracy of the
    integration and adapt the stepsize accordingly.  The member variable
    tolerance is used to specify the desired integration accuracy.

    Sometimes you want to keep the maximum step taken at some fixed value.  This
    implementation provides a mechanism for specifying a maximum allowed step by
    toggling the useMaxStep parameter.  It can be convenient to request steps of
    a specified size, regardless of the stepsize error control algorithm.  This
    class provides a Boolean flag (useFixedInterval) that can be used for that
    purpose, and a specialized stepping method (StepFixedInterval(dt))to take the
    step.

    This class provides data structures that can be used to run in fixed step
    mode.  These parameters (fixedStep, fixedStepsize) are not used by this base
    class; classes derived from this one use the parameters when implementing
    fixed step propagation.  The recommended approach is to code the Step()
    method so that if the integrator is running in fixed step mode, the system
    takes multiple steps to achieve propagation across the requested
    (fixedStepsize) interval while maintaining the specified integration
    accuracy, as specified by the tolerance variable.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Integrator

    def GetParameterText(self, id):
        return _gmat_py.Integrator_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Integrator_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Integrator_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Integrator_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.Integrator_IsParameterReadOnly(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.Integrator_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Integrator_SetRealParameter(self, *args)

    def GetIntegerParameter(self, *args):
        return _gmat_py.Integrator_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.Integrator_SetIntegerParameter(self, *args)

    def GetBooleanParameter(self, id):
        return _gmat_py.Integrator_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.Integrator_SetBooleanParameter(self, id, value)

    def TakeAction(self, *args):
        return _gmat_py.Integrator_TakeAction(self, *args)

    def SetPhysicalModel(self, pPhysicalModel):
        return _gmat_py.Integrator_SetPhysicalModel(self, pPhysicalModel)

    def GetStepTaken(self):
        return _gmat_py.Integrator_GetStepTaken(self)

    def UsesErrorControl(self):
        return _gmat_py.Integrator_UsesErrorControl(self)

    def Initialize(self):
        r"""
        Method used to initialize the integrator

        Each integrator will have class specific work to do to setup the initial
        data structures and data elements.  This method is provided for that
        purpose.  At a minimum, be sure to call the Propagator::Initialize()
        method.

        :rtype: boolean
        :return: true upon successful initialization.
        """
        return _gmat_py.Integrator_Initialize(self)

    def RawStep(self):
        return _gmat_py.Integrator_RawStep(self)

    def GetPropagatorOrder(self):
        return _gmat_py.Integrator_GetPropagatorOrder(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Integrator_SetClass(base)

# Register Integrator in _gmat_py:
_gmat_py.Integrator_swigregister(Integrator)
class PredictorCorrector(Integrator):
    r"""
    Base class for Predictor-Corrector Integrators

    The predictor-corrector integration method is a multistep method that uses
    data from the current state of the system, along with a number of previous
    states, to predict the next state of the system.  Once this prediction has
    been made, the algorithm uses the predicted state to calculate the
    corresponding derivative information, and then corrects the state using this
    additional information to provide the final result.

    This class implements that mechanism by providing a base class for the
    implementation of predictor-corrector integrators.  Users of the class need
    to implement methods that initialize the system (the SetWeights() method),
    run the startup sequence used to initialize the buffer of history data
    (FireStartupStep()), calculate the extrapolated state (Predict()), update
    this state using the derivative information at the extrapolated state
    (Correct()), and reset the algorithm if the error is outside of the accepted
    range of errors for the implementation (Reset()).

    The estimated error for these algorithms depends on the characteristics of
    the derivation of that algorithm; for that reason, users will also need to
    implement a method that estimates the error in the resulting state
    (EstimateError()).  Typical implementations estimate the error by finding the
    difference between the predicted and corrected states, and then applying an
    implementation specific multiplier to this difference to obtain the error
    estimate.

    This class provides a default mechanism to reset the step if the error
    estimate is out of line with the desired value.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PredictorCorrector

    def Initialize(self):
        return _gmat_py.PredictorCorrector_Initialize(self)

    def Step(self, *args):
        return _gmat_py.PredictorCorrector_Step(self, *args)

    def RawStep(self):
        return _gmat_py.PredictorCorrector_RawStep(self)

    def GetParameterText(self, id):
        return _gmat_py.PredictorCorrector_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.PredictorCorrector_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.PredictorCorrector_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.PredictorCorrector_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.PredictorCorrector_IsParameterReadOnly(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.PredictorCorrector_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.PredictorCorrector_SetRealParameter(self, *args)

    def GetIntegerParameter(self, id):
        return _gmat_py.PredictorCorrector_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.PredictorCorrector_SetIntegerParameter(self, id, value)

    def GetBooleanParameter(self, id):
        return _gmat_py.PredictorCorrector_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.PredictorCorrector_SetBooleanParameter(self, id, value)

    def BufferHistory(self):
        return _gmat_py.PredictorCorrector_BufferHistory(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PredictorCorrector_SetClass(base)

# Register PredictorCorrector in _gmat_py:
_gmat_py.PredictorCorrector_swigregister(PredictorCorrector)
class RungeKutta(Integrator):
    r"""
    Base class for Adaptive Runge-Kutta integrators

     The Runge-Kutta integration scheme is a single step method used to solve
     differential equations for :math:`n` coupled variables of the form

     .. math::

         {{dr^i}\over{dt}} = f(t,r)

     (The superscript in this discussion refers to the variables; hence :math:`f^i`
     is the :math:`i^{th}` variable, and :math:`r^{(n)}` refers to all :math:`n`
     variables.)  The method takes an integration step, :math:`h`, by breaking the
     interval into several stages (usually of smaller size) and calculating
     estimates of the integration result at each stage.  The later stages use the
     results of the earlier stages.  The cumulative effect of the integration is
     an approximate total step :math:`\delta t`, accurate to a given order in the
     series expansion of the differential equation, for the state variables
     :math:`r_i(t+\delta t)` given the state :math:`r_i(t)`.

     The time increment for a given stage is given as a multiple :math:`a_i` of the
     total time step desired; thus for the :math:`i^{th}` stage the interval used
     for the calculation is :math:`a_i \delta t`; the estimate of the integrated
     state at this stage is given by

     .. math::

         k_i^{(n)} = \delta t f(t+a_i\delta t, r^{(n)}(t) +
                          \sum_{j=1}^{i-1}b_{ij}k_j^{(n)})

     where :math:`b_{ij}` contains a set of coefficients specific to the Runge-Kutta
     instance being calculated.  Given the results of the stage calculations, the
     total integration step can be calculated using another set of coefficients,
     :math:`c_j` and the formula

     .. math::

         r^{(n)}(t+\delta t) = r^{(n)}(t) + \sum_{j=1}^{stages}c_j k_j^{(n)}

     The error control for these propagators is implemented by comparing the
     results of two different orders of integration.  The difference between the
     two steps provides an estimate of the accuracy of the step; a second set of
     coefficients corresponding to this second integration scheme can be used to
     obtain a solution

     .. math::

         r'^{(n)}(t+\delta t) = r^{(n)}(t) + \sum_{j=1}^{stages}c_j^* k_j^{*(n)}

     With care, the stage estimates :math:`k_j` and :math:`k_j^*` can be selected so
     that they are the same; in that case, the estimate of the error in the
     integration :math:`\Delta^{(n)}` can be written

     .. math::

         \Delta^{(n)} =
                          \left| \sum_{j=1}^{stages}(c_j - c_j^*) k_j^{(n)} \right|

     (The difference between the coefficients :math:`c_j - c_j^*` is the array of
     error estimate coefficients (ee) in this code.)

     Once the estimated error has been calculated, the size of the integration
     step can be adapted to a size more appropriate to the desired accuracy of the
     integration.  If the step results in a solution that is not accurate enough,
     the step needs to be recalculated with a smaller step size.  Labeling the
     desired accuracy :math:`\alpha` and the obtained accuracy :math:`\epsilon`
     (calculated, for instance, as the largest element of the array :math:`\Delta`),
     the new step used by the Runge-Kutta integrator is

     .. math::

         \delta t_{new}=
                     \sigma\delta t\left({{\alpha}\over{\epsilon}}\right)^{1/(m-1)}

     where :math:`m` is the order of truncation of the series expansion of the
     differential equations being solved.  The factor :math:`\sigma` is a safety
     factor incorporated into the calculation to avoid unnecessary iteration over
     attempted steps.  Common practice is to set this factor to 0.9; that is the
     default value used in this implementation.

     Similarly, if the step taken does not result in the desired accuracy, you may
     want to increase the step size parameter for the next integration step.  The
     new estimate for the desired stepsize is given by

     .. math::

         \delta t_{new}=
                     \sigma\delta t\left({{\alpha}\over{\epsilon}}\right)^{1/(m)}

     Sometimes you do not want to increase the stepsize in this manner; for example,
     you may want to keep the maximum step taken at some fixed value.  This
     implementation provides a mechanism for specifying a maximum allowed step.

     Sometimes it is convenient to request steps of a specified size, regardless
     of the stepsize control algorithm or the calculation of the "best step"
     described above.  This implementation accomplishes that task by taking
     multiple error controlled steps is necessary to step across the requested
     interval.

     Both of these features are implemented using the boolean flags described in
     the base class for the integrators.  See the documentation for the Integrator
     class for more information about these flags.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RungeKutta

    def SetPhysicalModel(self, pPhysicalModel):
        return _gmat_py.RungeKutta_SetPhysicalModel(self, pPhysicalModel)

    def Initialize(self):
        return _gmat_py.RungeKutta_Initialize(self)

    def Step(self, *args):
        return _gmat_py.RungeKutta_Step(self, *args)

    def RawStep(self):
        return _gmat_py.RungeKutta_RawStep(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RungeKutta_SetClass(base)

# Register RungeKutta in _gmat_py:
_gmat_py.RungeKutta_swigregister(RungeKutta)
class RungeKuttaNystrom(RungeKutta):
    r"""
    Base class for Adaptive Runge-Kutta-Nystrom integrators

     The Runge-Kutta-Nystrom integration scheme is an adaptation of the
     Runge-Kutta integration method taylored to work with second order
     differential equations.  The equations solved by this integration class have
     the form

     .. math::

         {{d^2\vec r^i}\over{dt^2}} = \vec g(t,\vec r)

     (The superscript in this discussion refers to the variables; hence :math:`f^i`
     is the :math:`i^{th}` variable, and :math:`r^{(n)}` refers to all :math:`n`
     variables.)  The method works similarly to the Runge-Kutta method; refer to
     that discussion for details of the methodology.  Note that the equation of
     motion given here is independent of teh first dervative information.  This is
     a necessary condition for Nystrom methods (though small contributions from
     first derivative terms can be accommodated with care).

     The Nystrom integrators use the following equations to propagate the state
     variables.  The intermediate stages are given by

     .. math::

         \vec k_i = \vec g\left(t_0 + a_i h, \vec r_0 + a_i h \vec{\dot r_0} + 
                           h^2 \sum_{j=0}^{i-1}b_{ij} \vec k_j\right)

     These stage calculations are then accumulated to give the estimated state
     after time :math:`h`:

     .. math::

         \vec r(t_0 + h) = \vec r(t_0) + \sum_{i=0}^{n-1} c_j \vec k_j

     where :math:`n` is the number of stages set for the integrator.  The state
     parameters for the first derivative data (e.g. the velocity data) are given
     using a separate set of coefficients:

     .. math::

         \vec{\dot r}(t_0 + h) = \vec{\dot r}(t_0) + 
                                      \sum_{i=0}^{n-1} \dot c_j \vec k_j

     The Runge-Kutta-Nystrom integrators need to know the mapping between the
     state variables and their first derivatives in order to calculate the
     intermediate stages.  The mapping data is obtained from the associated
     PhysicalModel class pointer (phys) through a call to GetComponentMap().
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RungeKuttaNystrom

    def Initialize(self):
        return _gmat_py.RungeKuttaNystrom_Initialize(self)

    def Step(self, *args):
        return _gmat_py.RungeKuttaNystrom_Step(self, *args)

    def RawStep(self):
        return _gmat_py.RungeKuttaNystrom_RawStep(self)

    def GetPropagatorOrder(self):
        return _gmat_py.RungeKuttaNystrom_GetPropagatorOrder(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RungeKuttaNystrom_SetClass(base)

# Register RungeKuttaNystrom in _gmat_py:
_gmat_py.RungeKuttaNystrom_swigregister(RungeKuttaNystrom)
class AdamsBashforthMoulton(PredictorCorrector):
    r"""
    Implementation of the Adams-Bashford-Moulton Predictor-Corrector

    This code implements a fourth-order Adams-Bashford predictor / Adams-Moulton
    corrector pair to integrate a set of first order differential equations.  The
    algorithm is found at
    http://chemical.caeds.eng.uml.edu/onlinec/white/math/s1/s1num/s1num.html
    or in Bate, Mueller and White, pp. 415-417.

    The predictor step extrapolates the next state :math:`r_{i+1}` of the variables
    using the the derivative information :math:`(f)` at the current state and three
    previous states of the variables, by applying the equation

    .. math::

        r_{i+1}^{*j} = r_i^j + {{h}\over{24}}\left[55 f_n^j - 59 f_{n-1}^j 
                        + 37 f_{n-2}^j - 9 f_{n-3}^j \right]

    The corrector uses derivative information evaluated for this state, along
    with the derivative information at the original state and two preceding
    states, to tune this state, giving the final, corrected state:

    .. math::

        r_{i+1}^{j} = r_i^j + {{h}\over{24}}\left[9 f_{n+1}^{*j} + 19 f_{n}^j 
                        - 5 f_{n-1}^j + 1 f_{n-2}^j \right]

    Bate, Mueller and White give the estimated accuracy of this solution to be

    .. math::

        ee = {{19}\over{270}} \left|r_{i+1}^{*j} - r_{i+1}^{j}\right|
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_AdamsBashforthMoulton

    def __init__(self, *args):
        _gmat_py.AdamsBashforthMoulton_swiginit(self, _gmat_py.new_AdamsBashforthMoulton(*args))

    def Clone(self):
        return _gmat_py.AdamsBashforthMoulton_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.AdamsBashforthMoulton_SetClass(base)

# Register AdamsBashforthMoulton in _gmat_py:
_gmat_py.AdamsBashforthMoulton_swigregister(AdamsBashforthMoulton)
class DormandElMikkawyPrince68(RungeKuttaNystrom):
    r"""
    The 6(8) Nystrom integrator found by Dormand, El-Mikkawy and Prince

     This class implements the Runge-Kutta-Nystrom integrator from the 1987 paper
     by Dormand, El-Mikkawy and Prince, with corrections noted 1n 1991.  The
     integrator is a 9-stage Nystrom integrator, with error control on both the
     dependent variables and their derivatives.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_DormandElMikkawyPrince68

    def __init__(self, *args):
        _gmat_py.DormandElMikkawyPrince68_swiginit(self, _gmat_py.new_DormandElMikkawyPrince68(*args))

    def Clone(self):
        return _gmat_py.DormandElMikkawyPrince68_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.DormandElMikkawyPrince68_SetClass(base)

# Register DormandElMikkawyPrince68 in _gmat_py:
_gmat_py.DormandElMikkawyPrince68_swigregister(DormandElMikkawyPrince68)
class PrinceDormand45(RungeKutta):
    r"""
    This class implements a Runge-Kutta integrator using the coefficients derived
    by Prince and Dormand.  This particular set of coefficients implements the
    fifth order integrator with fourth order error control.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PrinceDormand45

    def __init__(self, *args):
        _gmat_py.PrinceDormand45_swiginit(self, _gmat_py.new_PrinceDormand45(*args))

    def Clone(self):
        return _gmat_py.PrinceDormand45_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PrinceDormand45_SetClass(base)

# Register PrinceDormand45 in _gmat_py:
_gmat_py.PrinceDormand45_swigregister(PrinceDormand45)
class PrinceDormand78(RungeKutta):
    r"""
    This class implements a Runge-Kutta integrator using the coefficients derived
    by Prince and Dormand.  This particular set of coefficients implements the
    eighth order integrator with seventh order error control.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PrinceDormand78

    def __init__(self, *args):
        _gmat_py.PrinceDormand78_swiginit(self, _gmat_py.new_PrinceDormand78(*args))

    def Clone(self):
        return _gmat_py.PrinceDormand78_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PrinceDormand78_SetClass(base)

# Register PrinceDormand78 in _gmat_py:
_gmat_py.PrinceDormand78_swigregister(PrinceDormand78)
class PropagationStateManager(StateManager):
    r"""
    Definition of the PropagationStateManager base class.  This is the class for
    state managers used in GMAT's propagators and solvers.

    The state manager used in the propagation subsystem.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PropagationStateManager

    def __init__(self, *args):
        _gmat_py.PropagationStateManager_swiginit(self, _gmat_py.new_PropagationStateManager(*args))

    def GetCount(self, *args):
        return _gmat_py.PropagationStateManager_GetCount(self, *args)

    def SetObject(self, theObject):
        return _gmat_py.PropagationStateManager_SetObject(self, theObject)

    def RemoveObject(self, theObject):
        return _gmat_py.PropagationStateManager_RemoveObject(self, theObject)

    def SetProperty(self, *args):
        return _gmat_py.PropagationStateManager_SetProperty(self, *args)

    def BuildState(self):
        return _gmat_py.PropagationStateManager_BuildState(self)

    def MapObjectsToVector(self):
        return _gmat_py.PropagationStateManager_MapObjectsToVector(self)

    def MapVectorToObjects(self):
        return _gmat_py.PropagationStateManager_MapVectorToObjects(self)

    def RequiresCompletion(self):
        return _gmat_py.PropagationStateManager_RequiresCompletion(self)

    def ObjectEpochsMatch(self):
        return _gmat_py.PropagationStateManager_ObjectEpochsMatch(self)

    def GetCompletionCount(self):
        return _gmat_py.PropagationStateManager_GetCompletionCount(self)

    def GetCompletionIndex(self, which):
        return _gmat_py.PropagationStateManager_GetCompletionIndex(self, which)

    def GetCompletionSize(self, which):
        return _gmat_py.PropagationStateManager_GetCompletionSize(self, which)

    def GetSTMIndex(self, forParameterID, scObj):
        return _gmat_py.PropagationStateManager_GetSTMIndex(self, forParameterID, scObj)

    def PropagateCovarianceMatrix(self, indexNum, oldSTMMat, propagatedCovarianceWithNoise):
        return _gmat_py.PropagationStateManager_PropagateCovarianceMatrix(self, indexNum, oldSTMMat, propagatedCovarianceWithNoise)

    def UpdateProcessNoiseCholesky(self, stm, cov, indexNum, pBar):
        return _gmat_py.PropagationStateManager_UpdateProcessNoiseCholesky(self, stm, cov, indexNum, pBar)

    def UpdateProcessNoiseStandard(self, stm, cov, indexNum, pBar):
        return _gmat_py.PropagationStateManager_UpdateProcessNoiseStandard(self, stm, cov, indexNum, pBar)

    def UpdateProcessNoiseQMAtrix(self, indexNum, Q):
        return _gmat_py.PropagationStateManager_UpdateProcessNoiseQMAtrix(self, indexNum, Q)

    def thinQR(self, mat1, mat2, QR):
        return _gmat_py.PropagationStateManager_thinQR(self, mat1, mat2, QR)

    def Symmetrize(self, mat):
        return _gmat_py.PropagationStateManager_Symmetrize(self, mat)

    def SatHasCovariance(self):
        return _gmat_py.PropagationStateManager_SatHasCovariance(self)

    def ElementMapForSat(self):
        return _gmat_py.PropagationStateManager_ElementMapForSat(self)

    def GetSTMParameterName(self, index):
        return _gmat_py.PropagationStateManager_GetSTMParameterName(self, index)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PropagationStateManager_SetClass(base)

# Register PropagationStateManager in _gmat_py:
_gmat_py.PropagationStateManager_swigregister(PropagationStateManager)
class RungeKutta89(RungeKutta):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RungeKutta89

    def __init__(self, *args):
        _gmat_py.RungeKutta89_swiginit(self, _gmat_py.new_RungeKutta89(*args))

    def Clone(self):
        return _gmat_py.RungeKutta89_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RungeKutta89_SetClass(base)

# Register RungeKutta89 in _gmat_py:
_gmat_py.RungeKutta89_swigregister(RungeKutta89)
class RungeKuttaFehlberg56(RungeKutta):
    r"""
    Implementation of the Runge-Kutta-Fehlberg 5(6) integrator

     This class implements a Runge-Kutta integrator using the coefficients derived
     by Fehlberg.  This particular set of coefficients implements the
     sixth order integrator with fifth order error control.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_RungeKuttaFehlberg56

    def __init__(self, *args):
        _gmat_py.RungeKuttaFehlberg56_swiginit(self, _gmat_py.new_RungeKuttaFehlberg56(*args))

    def Clone(self):
        return _gmat_py.RungeKuttaFehlberg56_Clone(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.RungeKuttaFehlberg56_SetClass(base)

# Register RungeKuttaFehlberg56 in _gmat_py:
_gmat_py.RungeKuttaFehlberg56_swigregister(RungeKuttaFehlberg56)
class Hardware(GmatBase):
    r"""
    Class definition for the Hardware base class.

    Base class used for spacecraft hardware.

    This class is the base class for spacecraft fuel tanks, thrusters, and other
    hardware elements that can be added to a spacecraft in GMAT.  It contains
    data structures that locate the center of the element in the spacecraft's
    body coordinate system (BCS) and that orient the elements in the same system.

    This class has been modified (May 2019) to allow modeling fields of view.
    FOV modeling includes determining whether a unit vector is in the FOV, and
    returning the field of view mask for graphics display.

    Notes: The current builds of GMAT do not model torques or moments of inertia,
    so the parameter access for those pieces is commented out.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Hardware

    def HasFOV(self):
        r""" Field of View Operations"""
        return _gmat_py.Hardware_HasFOV(self)

    def GetRotationMatrix(self):
        return _gmat_py.Hardware_GetRotationMatrix(self)

    def GetLocation(self):
        return _gmat_py.Hardware_GetLocation(self)

    def GetDirection(self):
        return _gmat_py.Hardware_GetDirection(self)

    def GetSecondDirection(self):
        return _gmat_py.Hardware_GetSecondDirection(self)

    def GetParameterText(self, id):
        return _gmat_py.Hardware_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Hardware_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Hardware_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Hardware_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Hardware_IsParameterReadOnly(self, *args)

    def IsParameterVisible(self, id):
        return _gmat_py.Hardware_IsParameterVisible(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.Hardware_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Hardware_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.Hardware_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Hardware_SetStringParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.Hardware_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.Hardware_SetRvectorParameter(self, *args)

    def GetRmatrixParameter(self, *args):
        return _gmat_py.Hardware_GetRmatrixParameter(self, *args)

    def SetRmatrixParameter(self, *args):
        return _gmat_py.Hardware_SetRmatrixParameter(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.Hardware_GetRefObjectName(self, type)

    def HasRefObjectTypeArray(self):
        return _gmat_py.Hardware_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Hardware_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Hardware_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, *args):
        return _gmat_py.Hardware_SetRefObjectName(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Hardware_RenameRefObject(self, type, oldName, newName)

    def GetRefObject(self, *args):
        return _gmat_py.Hardware_GetRefObject(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.Hardware_SetRefObject(self, *args)

    def Initialize(self):
        r""" initialize body to sensor rotation"""
        return _gmat_py.Hardware_Initialize(self)

    def HasLocalClones(self):
        return _gmat_py.Hardware_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Hardware_SetClass(base)

# Register Hardware in _gmat_py:
_gmat_py.Hardware_swigregister(Hardware)
class Imager(Hardware):
    r"""
    Imager intermediate class used to isolate FoV using hardware from other
    hardware components
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Imager

    def __init__(self, *args):
        _gmat_py.Imager_swiginit(self, _gmat_py.new_Imager(*args))

    def Clone(self):
        return _gmat_py.Imager_Clone(self)

    def Initialize(self):
        return _gmat_py.Imager_Initialize(self)

    def GetParameterText(self, id):
        return _gmat_py.Imager_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Imager_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Imager_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Imager_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.Imager_IsParameterReadOnly(self, *args)

    def IsParameterVisible(self, id):
        return _gmat_py.Imager_IsParameterVisible(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.Imager_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.Imager_SetIntegerParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.Imager_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Imager_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.Imager_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Imager_SetStringParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.Imager_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.Imager_SetRvectorParameter(self, *args)

    def GetRefObjectName(self, type):
        return _gmat_py.Imager_GetRefObjectName(self, type)

    def HasRefObjectTypeArray(self):
        return _gmat_py.Imager_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Imager_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Imager_GetRefObjectNameArray(self, type)

    def SetRefObjectName(self, *args):
        return _gmat_py.Imager_SetRefObjectName(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Imager_RenameRefObject(self, type, oldName, newName)

    def GetRefObject(self, *args):
        return _gmat_py.Imager_GetRefObject(self, *args)

    def SetRefObject(self, *args):
        return _gmat_py.Imager_SetRefObject(self, *args)

    def CheckTargetVisibility(self, target):
        return _gmat_py.Imager_CheckTargetVisibility(self, target)

    def GetMaskConeAngles(self):
        return _gmat_py.Imager_GetMaskConeAngles(self)

    def GetMaskClockAngles(self):
        return _gmat_py.Imager_GetMaskClockAngles(self)

    def GetFieldOfView(self):
        return _gmat_py.Imager_GetFieldOfView(self)

    def HasFOV(self):
        return _gmat_py.Imager_HasFOV(self)

    def HasLocalClones(self):
        return _gmat_py.Imager_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Imager_SetClass(base)

# Register Imager in _gmat_py:
_gmat_py.Imager_swigregister(Imager)
class FuelTank(Hardware):
    r"""
    Class definition for the Fuel Tank base class.

    Basic fuel tank model used in finite maneuvers.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_FuelTank

    def GetParameterText(self, id):
        return _gmat_py.FuelTank_GetParameterText(self, id)

    def GetParameterUnit(self, id):
        return _gmat_py.FuelTank_GetParameterUnit(self, id)

    def GetParameterID(self, str):
        return _gmat_py.FuelTank_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.FuelTank_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.FuelTank_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.FuelTank_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.FuelTank_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.FuelTank_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.FuelTank_SetRealParameter(self, *args)

    def GetBooleanParameter(self, id):
        return _gmat_py.FuelTank_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.FuelTank_SetBooleanParameter(self, id, value)

    def Initialize(self):
        return _gmat_py.FuelTank_Initialize(self)

    def Validate(self):
        return _gmat_py.FuelTank_Validate(self)

    def SetFlowWithoutThruster(self, directFlowAllowed):
        return _gmat_py.FuelTank_SetFlowWithoutThruster(self, directFlowAllowed)

    def NoThrusterNeeded(self):
        return _gmat_py.FuelTank_NoThrusterNeeded(self)

    def GetFuelMass(self):
        return _gmat_py.FuelTank_GetFuelMass(self)

    def GetFuelCM_BCS(self):
        return _gmat_py.FuelTank_GetFuelCM_BCS(self)

    def GetFuelMOI_BCS(self, SC_Cm):
        return _gmat_py.FuelTank_GetFuelMOI_BCS(self, SC_Cm)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.FuelTank_RenameRefObject(self, type, oldName, newName)
    ALLOW_NEGATIVE_FUEL_MASS = _gmat_py.FuelTank_ALLOW_NEGATIVE_FUEL_MASS
    FUEL_MASS = _gmat_py.FuelTank_FUEL_MASS
    FUEL_CM_X = _gmat_py.FuelTank_FUEL_CM_X
    FUEL_CM_Y = _gmat_py.FuelTank_FUEL_CM_Y
    FUEL_CM_Z = _gmat_py.FuelTank_FUEL_CM_Z
    FUEL_MOI_XX = _gmat_py.FuelTank_FUEL_MOI_XX
    FUEL_MOI_XY = _gmat_py.FuelTank_FUEL_MOI_XY
    FUEL_MOI_XZ = _gmat_py.FuelTank_FUEL_MOI_XZ
    FUEL_MOI_YY = _gmat_py.FuelTank_FUEL_MOI_YY
    FUEL_MOI_YZ = _gmat_py.FuelTank_FUEL_MOI_YZ
    FUEL_MOI_ZZ = _gmat_py.FuelTank_FUEL_MOI_ZZ
    FUEL_CM_X_BCS = _gmat_py.FuelTank_FUEL_CM_X_BCS
    FUEL_CM_Y_BCS = _gmat_py.FuelTank_FUEL_CM_Y_BCS
    FUEL_CM_Z_BCS = _gmat_py.FuelTank_FUEL_CM_Z_BCS
    FUEL_MOI_XX_BCS = _gmat_py.FuelTank_FUEL_MOI_XX_BCS
    FUEL_MOI_XY_BCS = _gmat_py.FuelTank_FUEL_MOI_XY_BCS
    FUEL_MOI_XZ_BCS = _gmat_py.FuelTank_FUEL_MOI_XZ_BCS
    FUEL_MOI_YY_BCS = _gmat_py.FuelTank_FUEL_MOI_YY_BCS
    FUEL_MOI_YZ_BCS = _gmat_py.FuelTank_FUEL_MOI_YZ_BCS
    FUEL_MOI_ZZ_BCS = _gmat_py.FuelTank_FUEL_MOI_ZZ_BCS
    FuelTankParamCount = _gmat_py.FuelTank_FuelTankParamCount

    @staticmethod
    def SetClass(base):
        return _gmat_py.FuelTank_SetClass(base)

# Register FuelTank in _gmat_py:
_gmat_py.FuelTank_swigregister(FuelTank)
FuelTank.PARAMETER_TEXT = _gmat_py.cvar.FuelTank_PARAMETER_TEXT
FuelTank.PARAMETER_TYPE = _gmat_py.cvar.FuelTank_PARAMETER_TYPE

class PowerSystem(Hardware):
    r"""Basic power system model attached to Spacecraft."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_PowerSystem

    def Initialize(self):
        r""" Initialize the PowerSystem"""
        return _gmat_py.PowerSystem_Initialize(self)

    def Copy(self, arg2):
        return _gmat_py.PowerSystem_Copy(self, arg2)

    def SetSolarSystem(self, ss):
        r""" Set reference objects"""
        return _gmat_py.PowerSystem_SetSolarSystem(self, ss)

    def SetSpacecraft(self, sc):
        return _gmat_py.PowerSystem_SetSpacecraft(self, sc)

    def TakeAction(self, *args):
        return _gmat_py.PowerSystem_TakeAction(self, *args)

    def GetBasePower(self):
        r""" Return computed quantities"""
        return _gmat_py.PowerSystem_GetBasePower(self)

    def GetPowerGenerated(self):
        return _gmat_py.PowerSystem_GetPowerGenerated(self)

    def GetSpacecraftBusPower(self):
        return _gmat_py.PowerSystem_GetSpacecraftBusPower(self)

    def GetThrustPower(self):
        return _gmat_py.PowerSystem_GetThrustPower(self)

    def SetEpoch(self, ep):
        return _gmat_py.PowerSystem_SetEpoch(self, ep)

    def GetEpochString(self):
        return _gmat_py.PowerSystem_GetEpochString(self)

    def GetParameterText(self, id):
        return _gmat_py.PowerSystem_GetParameterText(self, id)

    def GetParameterUnit(self, id):
        return _gmat_py.PowerSystem_GetParameterUnit(self, id)

    def GetParameterID(self, str):
        return _gmat_py.PowerSystem_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.PowerSystem_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.PowerSystem_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.PowerSystem_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.PowerSystem_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.PowerSystem_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.PowerSystem_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.PowerSystem_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.PowerSystem_SetStringParameter(self, *args)

    @staticmethod
    def SetClass(base):
        return _gmat_py.PowerSystem_SetClass(base)

# Register PowerSystem in _gmat_py:
_gmat_py.PowerSystem_swigregister(PowerSystem)
class Thruster(Hardware):
    r"""Thruster model used for finite maneuvers"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    AXES_COUNT = _gmat_py.Thruster_AXES_COUNT
    __swig_destroy__ = _gmat_py.delete_Thruster

    def GetMassFlowRate(self):
        return _gmat_py.Thruster_GetMassFlowRate(self)

    def GetThrustMagnitude(self):
        return _gmat_py.Thruster_GetThrustMagnitude(self)

    def GetIsp(self):
        return _gmat_py.Thruster_GetIsp(self)

    def GetParameterText(self, id):
        return _gmat_py.Thruster_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Thruster_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Thruster_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Thruster_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.Thruster_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.Thruster_IsParameterCommandModeSettable(self, id)

    def GetStringParameter(self, *args):
        return _gmat_py.Thruster_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Thruster_SetStringParameter(self, *args)

    def GetBooleanParameter(self, id):
        return _gmat_py.Thruster_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.Thruster_SetBooleanParameter(self, id, value)

    def GetRealParameter(self, *args):
        return _gmat_py.Thruster_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Thruster_SetRealParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.Thruster_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.Thruster_SetRvectorParameter(self, *args)

    def GetStringArrayParameter(self, id):
        return _gmat_py.Thruster_GetStringArrayParameter(self, id)

    def GetPropertyEnumStrings(self, *args):
        return _gmat_py.Thruster_GetPropertyEnumStrings(self, *args)

    def GetPropertyObjectType(self, id):
        return _gmat_py.Thruster_GetPropertyObjectType(self, id)

    def GetRefObjectName(self, type):
        return _gmat_py.Thruster_GetRefObjectName(self, type)

    def GetRefObjectTypeArray(self):
        return _gmat_py.Thruster_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.Thruster_GetRefObjectNameArray(self, type)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Thruster_RenameRefObject(self, type, oldName, newName)

    def SetRefObject(self, *args):
        return _gmat_py.Thruster_SetRefObject(self, *args)

    def GetRefObjectArray(self, *args):
        return _gmat_py.Thruster_GetRefObjectArray(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.Thruster_TakeAction(self, *args)

    def SetSolarSystem(self, ss):
        return _gmat_py.Thruster_SetSolarSystem(self, ss)

    def Initialize(self):
        return _gmat_py.Thruster_Initialize(self)

    def SetDerivativeState(self, state, origin):
        return _gmat_py.Thruster_SetDerivativeState(self, state, origin)

    def SetPower(self, allocatedPower):
        return _gmat_py.Thruster_SetPower(self, allocatedPower)

    def CalculateMassFlow(self):
        return _gmat_py.Thruster_CalculateMassFlow(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.Thruster_SetClass(base)

# Register Thruster in _gmat_py:
_gmat_py.Thruster_swigregister(Thruster)
class ChemicalTank(FuelTank):
    r"""
    Class definition for the Chemical Fuel Tank class.  Code was pulled
    from the original FuleTank class.

    Chemical fuel tank model used in finite maneuvers.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ChemicalTank

    def __init__(self, *args):
        _gmat_py.ChemicalTank_swiginit(self, _gmat_py.new_ChemicalTank(*args))

    def GetParameterText(self, id):
        return _gmat_py.ChemicalTank_GetParameterText(self, id)

    def GetParameterUnit(self, id):
        return _gmat_py.ChemicalTank_GetParameterUnit(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ChemicalTank_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ChemicalTank_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ChemicalTank_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.ChemicalTank_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.ChemicalTank_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.ChemicalTank_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.ChemicalTank_SetRealParameter(self, *args)

    def GetBooleanParameter(self, id):
        return _gmat_py.ChemicalTank_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.ChemicalTank_SetBooleanParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.ChemicalTank_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ChemicalTank_SetStringParameter(self, *args)

    def GetPropertyEnumStrings(self, *args):
        return _gmat_py.ChemicalTank_GetPropertyEnumStrings(self, *args)

    def Clone(self):
        return _gmat_py.ChemicalTank_Clone(self)

    def Copy(self, orig):
        return _gmat_py.ChemicalTank_Copy(self, orig)

    def Initialize(self):
        return _gmat_py.ChemicalTank_Initialize(self)

    def Validate(self):
        return _gmat_py.ChemicalTank_Validate(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ChemicalTank_RenameRefObject(self, type, oldName, newName)
    PRESSURE = _gmat_py.ChemicalTank_PRESSURE
    TEMPERATURE = _gmat_py.ChemicalTank_TEMPERATURE
    REFERENCE_TEMPERATURE = _gmat_py.ChemicalTank_REFERENCE_TEMPERATURE
    VOLUME = _gmat_py.ChemicalTank_VOLUME
    FUEL_DENSITY = _gmat_py.ChemicalTank_FUEL_DENSITY
    PRESSURE_MODEL = _gmat_py.ChemicalTank_PRESSURE_MODEL
    PRESSURE_REGULATED = _gmat_py.ChemicalTank_PRESSURE_REGULATED
    ChemicalTankParamCount = _gmat_py.ChemicalTank_ChemicalTankParamCount

    @staticmethod
    def SetClass(base):
        return _gmat_py.ChemicalTank_SetClass(base)

# Register ChemicalTank in _gmat_py:
_gmat_py.ChemicalTank_swigregister(ChemicalTank)
ChemicalTank.PARAMETER_TEXT = _gmat_py.cvar.ChemicalTank_PARAMETER_TEXT
ChemicalTank.PARAMETER_TYPE = _gmat_py.cvar.ChemicalTank_PARAMETER_TYPE

class ChemicalThruster(Thruster):
    r"""
    Class definition for the ChemicalThrusters.
    Code pulled from original Thruster class.

    ChemicalThruster model used for finite maneuvers
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    COEFFICIENT_COUNT = _gmat_py.ChemicalThruster_COEFFICIENT_COUNT
    __swig_destroy__ = _gmat_py.delete_ChemicalThruster

    def __init__(self, *args):
        _gmat_py.ChemicalThruster_swiginit(self, _gmat_py.new_ChemicalThruster(*args))

    def Clone(self):
        return _gmat_py.ChemicalThruster_Clone(self)

    def Copy(self, inst):
        return _gmat_py.ChemicalThruster_Copy(self, inst)

    def GetParameterText(self, id):
        return _gmat_py.ChemicalThruster_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ChemicalThruster_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ChemicalThruster_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ChemicalThruster_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.ChemicalThruster_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.ChemicalThruster_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.ChemicalThruster_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.ChemicalThruster_SetRealParameter(self, id, value)

    def GetStringArrayParameter(self, id):
        return _gmat_py.ChemicalThruster_GetStringArrayParameter(self, id)

    def Initialize(self):
        return _gmat_py.ChemicalThruster_Initialize(self)

    def CalculateMassFlow(self):
        return _gmat_py.ChemicalThruster_CalculateMassFlow(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ChemicalThruster_SetClass(base)

# Register ChemicalThruster in _gmat_py:
_gmat_py.ChemicalThruster_swigregister(ChemicalThruster)
class ElectricTank(FuelTank):
    r"""
    Class definition for the Electric Fuel Tank class.

    Chemical fuel tank model used in finite maneuvers.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ElectricTank

    def __init__(self, *args):
        _gmat_py.ElectricTank_swiginit(self, _gmat_py.new_ElectricTank(*args))

    def Clone(self):
        return _gmat_py.ElectricTank_Clone(self)

    def Copy(self, orig):
        return _gmat_py.ElectricTank_Copy(self, orig)

    def Initialize(self):
        return _gmat_py.ElectricTank_Initialize(self)

    def Validate(self):
        return _gmat_py.ElectricTank_Validate(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ElectricTank_RenameRefObject(self, type, oldName, newName)
    ElectricTankParamCount = _gmat_py.ElectricTank_ElectricTankParamCount

    @staticmethod
    def SetClass(base):
        return _gmat_py.ElectricTank_SetClass(base)

# Register ElectricTank in _gmat_py:
_gmat_py.ElectricTank_swigregister(ElectricTank)
class ElectricThruster(Thruster):
    r"""
    Class definition for the electric thrusters.

    Electric Thruster model used for finite maneuvers
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ELECTRIC_COEFF_COUNT = _gmat_py.ElectricThruster_ELECTRIC_COEFF_COUNT
    __swig_destroy__ = _gmat_py.delete_ElectricThruster

    def __init__(self, *args):
        _gmat_py.ElectricThruster_swiginit(self, _gmat_py.new_ElectricThruster(*args))

    def Clone(self):
        return _gmat_py.ElectricThruster_Clone(self)

    def Copy(self, inst):
        return _gmat_py.ElectricThruster_Copy(self, inst)

    def GetParameterText(self, id):
        return _gmat_py.ElectricThruster_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ElectricThruster_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ElectricThruster_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ElectricThruster_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.ElectricThruster_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.ElectricThruster_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, id):
        return _gmat_py.ElectricThruster_GetRealParameter(self, id)

    def SetRealParameter(self, id, value):
        return _gmat_py.ElectricThruster_SetRealParameter(self, id, value)

    def GetStringParameter(self, id):
        return _gmat_py.ElectricThruster_GetStringParameter(self, id)

    def SetStringParameter(self, id, value):
        return _gmat_py.ElectricThruster_SetStringParameter(self, id, value)

    def GetStringArrayParameter(self, id):
        return _gmat_py.ElectricThruster_GetStringArrayParameter(self, id)

    def GetPropertyEnumStrings(self, *args):
        return _gmat_py.ElectricThruster_GetPropertyEnumStrings(self, *args)

    def Initialize(self):
        return _gmat_py.ElectricThruster_Initialize(self)

    def SetPower(self, allocatedPower):
        return _gmat_py.ElectricThruster_SetPower(self, allocatedPower)

    def CalculateMassFlow(self):
        return _gmat_py.ElectricThruster_CalculateMassFlow(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ElectricThruster_SetClass(base)

# Register ElectricThruster in _gmat_py:
_gmat_py.ElectricThruster_swigregister(ElectricThruster)
class NuclearPowerSystem(PowerSystem):
    r"""
    Base class definition for the NuclearPowerSystem.

    Basic nuclear power system model attached to Spacecraft.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_NuclearPowerSystem

    def __init__(self, *args):
        _gmat_py.NuclearPowerSystem_swiginit(self, _gmat_py.new_NuclearPowerSystem(*args))

    def Initialize(self):
        return _gmat_py.NuclearPowerSystem_Initialize(self)

    def Clone(self):
        return _gmat_py.NuclearPowerSystem_Clone(self)

    def GetPowerGenerated(self):
        return _gmat_py.NuclearPowerSystem_GetPowerGenerated(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.NuclearPowerSystem_RenameRefObject(self, type, oldName, newName)

    @staticmethod
    def SetClass(base):
        return _gmat_py.NuclearPowerSystem_SetClass(base)

# Register NuclearPowerSystem in _gmat_py:
_gmat_py.NuclearPowerSystem_swigregister(NuclearPowerSystem)
class SolarPowerSystem(PowerSystem):
    r"""
    Base class definition for the SolarPowerSystem.

    Basic solar power system model attached to Spacecraft.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_SolarPowerSystem

    def __init__(self, *args):
        _gmat_py.SolarPowerSystem_swiginit(self, _gmat_py.new_SolarPowerSystem(*args))

    def Initialize(self):
        return _gmat_py.SolarPowerSystem_Initialize(self)

    def Clone(self):
        return _gmat_py.SolarPowerSystem_Clone(self)

    def Copy(self, arg2):
        return _gmat_py.SolarPowerSystem_Copy(self, arg2)

    def SetSpacecraft(self, sc):
        return _gmat_py.SolarPowerSystem_SetSpacecraft(self, sc)

    def TakeAction(self, *args):
        return _gmat_py.SolarPowerSystem_TakeAction(self, *args)

    def GetPowerGenerated(self):
        return _gmat_py.SolarPowerSystem_GetPowerGenerated(self)

    def GetParameterText(self, id):
        return _gmat_py.SolarPowerSystem_GetParameterText(self, id)

    def GetParameterUnit(self, id):
        return _gmat_py.SolarPowerSystem_GetParameterUnit(self, id)

    def GetParameterID(self, str):
        return _gmat_py.SolarPowerSystem_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.SolarPowerSystem_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.SolarPowerSystem_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.SolarPowerSystem_IsParameterReadOnly(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.SolarPowerSystem_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.SolarPowerSystem_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.SolarPowerSystem_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.SolarPowerSystem_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.SolarPowerSystem_GetStringArrayParameter(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.SolarPowerSystem_RenameRefObject(self, type, oldName, newName)

    def WriteEmptyStringArray(self, id):
        return _gmat_py.SolarPowerSystem_WriteEmptyStringArray(self, id)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SolarPowerSystem_SetClass(base)

# Register SolarPowerSystem in _gmat_py:
_gmat_py.SolarPowerSystem_swigregister(SolarPowerSystem)
MAX_LONG_MESSAGE_VALUE = _gmat_py.MAX_LONG_MESSAGE_VALUE
MAX_SHORT_MESSAGE_VALUE = _gmat_py.MAX_SHORT_MESSAGE_VALUE
class SpiceInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsValidKernel(fileName, ofType):
        r""" static method to check for valid kernels"""
        return _gmat_py.SpiceInterface_IsValidKernel(fileName, ofType)

    def __init__(self, *args):
        _gmat_py.SpiceInterface_swiginit(self, _gmat_py.new_SpiceInterface(*args))
    __swig_destroy__ = _gmat_py.delete_SpiceInterface

    def Clone(self):
        return _gmat_py.SpiceInterface_Clone(self)

    def LoadKernel(self, fileName):
        return _gmat_py.SpiceInterface_LoadKernel(self, fileName)

    def LoadKernels(self, fileNames):
        return _gmat_py.SpiceInterface_LoadKernels(self, fileNames)

    def UnloadKernel(self, fileName):
        return _gmat_py.SpiceInterface_UnloadKernel(self, fileName)

    def UnloadKernels(self, fileNames):
        return _gmat_py.SpiceInterface_UnloadKernels(self, fileNames)

    def UnloadAllKernels(self):
        return _gmat_py.SpiceInterface_UnloadAllKernels(self)

    def IsLoaded(self, fileName):
        return _gmat_py.SpiceInterface_IsLoaded(self, fileName)

    def GetValidAberrationCorrectionFlags(self):
        return _gmat_py.SpiceInterface_GetValidAberrationCorrectionFlags(self)

    def GetValidFrames(self):
        return _gmat_py.SpiceInterface_GetValidFrames(self)

    def SetLeapSecondKernel(self, lsk):
        return _gmat_py.SpiceInterface_SetLeapSecondKernel(self, lsk)

    def GetNaifID(self, forObj, popupMsg=True):
        return _gmat_py.SpiceInterface_GetNaifID(self, forObj, popupMsg)

    def SpiceTimeToA1(self, spiceTime):
        return _gmat_py.SpiceInterface_SpiceTimeToA1(self, spiceTime)

    def A1ToSpiceTime(self, a1Time):
        return _gmat_py.SpiceInterface_A1ToSpiceTime(self, a1Time)

# Register SpiceInterface in _gmat_py:
_gmat_py.SpiceInterface_swigregister(SpiceInterface)
SpiceInterface.DEFAULT_NAIF_ID = _gmat_py.cvar.SpiceInterface_DEFAULT_NAIF_ID
SpiceInterface.DEFAULT_NAIF_ID_REF_FRAME = _gmat_py.cvar.SpiceInterface_DEFAULT_NAIF_ID_REF_FRAME

class SpiceKernelReader(SpiceInterface):
    r"""
    Definition of the SpiceKernelReader, which reads SPICE data (kernel) files.
    This class calls the JPL-supplied CSPICE routines to read the specified
    SPICE file(s) and return the requested data.
    Kernels that may be loaded (and read by child classes) are:
     planetary ephemeris (SPK)
     spacecraft ephemeris (SPK)
     spacecraft pointing (CK)
     planetary constants (PcK)   < future >
     instrument (IK)             < future >

    This is the base class for readers.  Classes inheriting from this one handle
    the reading of specific types of data (orbit, attitude, ...).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.SpiceKernelReader_swiginit(self, _gmat_py.new_SpiceKernelReader(*args))
    __swig_destroy__ = _gmat_py.delete_SpiceKernelReader

    @staticmethod
    def SetClass(base):
        return _gmat_py.SpiceKernelReader_SetClass(base)

# Register SpiceKernelReader in _gmat_py:
_gmat_py.SpiceKernelReader_swigregister(SpiceKernelReader)
class SpiceOrbitKernelReader(SpiceKernelReader):
    r"""
    Definition of the SpiceOrbitKernelReader, which reads SPICE SPK (kernel) files.
    This class calls the JPL-supplied CSPICE routines to read the specified
    SPICE file(s) and return the requested data.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.SpiceOrbitKernelReader_swiginit(self, _gmat_py.new_SpiceOrbitKernelReader(*args))
    __swig_destroy__ = _gmat_py.delete_SpiceOrbitKernelReader

    def Clone(self):
        return _gmat_py.SpiceOrbitKernelReader_Clone(self)

    def GetCoverageStartAndEnd(self, kernels, forNaifId, start, end):
        r"""
        method to return the earliest and latest times of orbit data
        coverage for the specified object, over the specified list of
        SPK kernels (non-SPK kernels in the list will be ignored).
        """
        return _gmat_py.SpiceOrbitKernelReader_GetCoverageStartAndEnd(self, kernels, forNaifId, start, end)

    def GetCoverageSpans(self, kernels, forNaifId, start, end):
        return _gmat_py.SpiceOrbitKernelReader_GetCoverageSpans(self, kernels, forNaifId, start, end)

    def GetTargetState(self, *args):
        return _gmat_py.SpiceOrbitKernelReader_GetTargetState(self, *args)

    def GetRotationMatrix(self, fromFrame, toFrame, atTime):
        return _gmat_py.SpiceOrbitKernelReader_GetRotationMatrix(self, fromFrame, toFrame, atTime)

    def GetRotationMatrix33(self, fromFrame, toFrame, atTime):
        return _gmat_py.SpiceOrbitKernelReader_GetRotationMatrix33(self, fromFrame, toFrame, atTime)

    @staticmethod
    def SetClass(base):
        return _gmat_py.SpiceOrbitKernelReader_SetClass(base)

# Register SpiceOrbitKernelReader in _gmat_py:
_gmat_py.SpiceOrbitKernelReader_swigregister(SpiceOrbitKernelReader)
class EventLocator(GmatBase):
    r"""
    Base class for the event locators.

    EventLocators are classes determine event times and durations of a
    specified type (e.g. eclipses)
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_EventLocator

    def GetParameterText(self, id):
        return _gmat_py.EventLocator_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.EventLocator_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.EventLocator_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.EventLocator_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, *args):
        return _gmat_py.EventLocator_IsParameterReadOnly(self, *args)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.EventLocator_IsParameterCommandModeSettable(self, id)

    def GetRealParameter(self, *args):
        return _gmat_py.EventLocator_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.EventLocator_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.EventLocator_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.EventLocator_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.EventLocator_GetStringArrayParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.EventLocator_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.EventLocator_SetBooleanParameter(self, *args)

    def TakeAction(self, *args):
        return _gmat_py.EventLocator_TakeAction(self, *args)

    def GetPropertyObjectType(self, id):
        return _gmat_py.EventLocator_GetPropertyObjectType(self, id)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.EventLocator_GetPropertyEnumStrings(self, id)

    def GetTypesForList(self, *args):
        return _gmat_py.EventLocator_GetTypesForList(self, *args)

    def SetEpoch(self, ep, id):
        return _gmat_py.EventLocator_SetEpoch(self, ep, id)

    def GetEpochString(self, *args):
        return _gmat_py.EventLocator_GetEpochString(self, *args)

    def SetAppend(self, appendIt):
        return _gmat_py.EventLocator_SetAppend(self, appendIt)

    def SetSolarSystem(self, ss):
        return _gmat_py.EventLocator_SetSolarSystem(self, ss)

    def HasRefObjectTypeArray(self):
        return _gmat_py.EventLocator_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.EventLocator_GetRefObjectTypeArray(self)

    def GetRefObjectName(self, type):
        return _gmat_py.EventLocator_GetRefObjectName(self, type)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.EventLocator_GetRefObjectNameArray(self, type)

    def SetRefObject(self, obj, type, name):
        return _gmat_py.EventLocator_SetRefObject(self, obj, type, name)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EventLocator_RenameRefObject(self, type, oldName, newName)

    def Initialize(self):
        return _gmat_py.EventLocator_Initialize(self)

    def ReportEventData(self, *args):
        return _gmat_py.EventLocator_ReportEventData(self, *args)

    def LocateEvents(self, *args):
        return _gmat_py.EventLocator_LocateEvents(self, *args)

    def FileWasWritten(self):
        return _gmat_py.EventLocator_FileWasWritten(self)

    def IsInAutomaticMode(self):
        return _gmat_py.EventLocator_IsInAutomaticMode(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EventLocator_SetClass(base)

# Register EventLocator in _gmat_py:
_gmat_py.EventLocator_swigregister(EventLocator)
class LocatedEvent(object):
    r"""
    Definition for the Event base class.

    Base LocatedEvent class
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_LocatedEvent

    def GetDuration(self):
        r""" Return computed quantities"""
        return _gmat_py.LocatedEvent_GetDuration(self)

    def GetStart(self):
        return _gmat_py.LocatedEvent_GetStart(self)

    def GetEnd(self):
        return _gmat_py.LocatedEvent_GetEnd(self)

    def GetReportString(self):
        r"""
        Report string - abstract method to return the report string
        for the event
        """
        return _gmat_py.LocatedEvent_GetReportString(self)

    def SetStart(self, epoch1):
        return _gmat_py.LocatedEvent_SetStart(self, epoch1)

    def SetEnd(self, epoch2):
        return _gmat_py.LocatedEvent_SetEnd(self, epoch2)

# Register LocatedEvent in _gmat_py:
_gmat_py.LocatedEvent_swigregister(LocatedEvent)
class StopCondition(GmatBase):
    r"""Declares StopCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gmat_py.StopCondition_swiginit(self, _gmat_py.new_StopCondition(*args))
    __swig_destroy__ = _gmat_py.delete_StopCondition

    def Initialize(self):
        return _gmat_py.StopCondition_Initialize(self)

    def Validate(self):
        return _gmat_py.StopCondition_Validate(self)

    def Evaluate(self):
        return _gmat_py.StopCondition_Evaluate(self)

    def IsTimeCondition(self):
        return _gmat_py.StopCondition_IsTimeCondition(self)

    def AddToBuffer(self, isInitialPoint):
        return _gmat_py.StopCondition_AddToBuffer(self, isInitialPoint)

    def GetStopEpoch(self):
        return _gmat_py.StopCondition_GetStopEpoch(self)

    def Reset(self):
        return _gmat_py.StopCondition_Reset(self)

    def GetStopInterval(self):
        return _gmat_py.StopCondition_GetStopInterval(self)

    def IsInitialized(self):
        return _gmat_py.StopCondition_IsInitialized(self)

    def GetBufferSize(self):
        return _gmat_py.StopCondition_GetBufferSize(self)

    def GetDescription(self):
        return _gmat_py.StopCondition_GetDescription(self)

    def GetEpochParameter(self):
        return _gmat_py.StopCondition_GetEpochParameter(self)

    def GetStopParameter(self):
        return _gmat_py.StopCondition_GetStopParameter(self)

    def GetGoalParameter(self):
        return _gmat_py.StopCondition_GetGoalParameter(self)

    def GetInterpolator(self):
        return _gmat_py.StopCondition_GetInterpolator(self)

    def SetDescription(self, desc):
        return _gmat_py.StopCondition_SetDescription(self, desc)

    def SetPropDirection(self, dir):
        return _gmat_py.StopCondition_SetPropDirection(self, dir)

    def SetSolarSystem(self, solarSystem):
        return _gmat_py.StopCondition_SetSolarSystem(self, solarSystem)

    def SetInterpolator(self, interp):
        return _gmat_py.StopCondition_SetInterpolator(self, interp)

    def SetEpochParameter(self, param):
        return _gmat_py.StopCondition_SetEpochParameter(self, param)

    def SetStopParameter(self, param):
        return _gmat_py.StopCondition_SetStopParameter(self, param)

    def SetGoalParameter(self, param):
        return _gmat_py.StopCondition_SetGoalParameter(self, param)

    def SetLhsString(self, str):
        return _gmat_py.StopCondition_SetLhsString(self, str)

    def SetRhsString(self, str):
        return _gmat_py.StopCondition_SetRhsString(self, str)

    def GetLhsString(self):
        return _gmat_py.StopCondition_GetLhsString(self)

    def GetRhsString(self):
        return _gmat_py.StopCondition_GetRhsString(self)

    def SetLhsWrapper(self, toWrapper):
        return _gmat_py.StopCondition_SetLhsWrapper(self, toWrapper)

    def SetRhsWrapper(self, toWrapper):
        return _gmat_py.StopCondition_SetRhsWrapper(self, toWrapper)

    def ClearWrappers(self):
        return _gmat_py.StopCondition_ClearWrappers(self)

    def SetSpacecrafts(self, propSats, stopSats):
        return _gmat_py.StopCondition_SetSpacecrafts(self, propSats, stopSats)

    def Clone(self):
        return _gmat_py.StopCondition_Clone(self)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.StopCondition_RenameRefObject(self, type, oldName, newName)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.StopCondition_GetRefObjectNameArray(self, type)

    def SetRefObject(self, *args):
        return _gmat_py.StopCondition_SetRefObject(self, *args)

    def GetParameterText(self, id):
        return _gmat_py.StopCondition_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.StopCondition_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.StopCondition_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.StopCondition_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, *args):
        return _gmat_py.StopCondition_GetIntegerParameter(self, *args)

    def SetIntegerParameter(self, *args):
        return _gmat_py.StopCondition_SetIntegerParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.StopCondition_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.StopCondition_SetRealParameter(self, *args)

    def GetStringParameter(self, *args):
        return _gmat_py.StopCondition_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.StopCondition_SetStringParameter(self, *args)

    def GetStopValue(self):
        return _gmat_py.StopCondition_GetStopValue(self)

    def GetStopDifference(self):
        return _gmat_py.StopCondition_GetStopDifference(self)

    def GetStopGoal(self):
        return _gmat_py.StopCondition_GetStopGoal(self)

    def GetStopTime(self):
        return _gmat_py.StopCondition_GetStopTime(self)

    def GetTimeMultiplier(self):
        return _gmat_py.StopCondition_GetTimeMultiplier(self)

    def IsCyclicParameter(self):
        return _gmat_py.StopCondition_IsCyclicParameter(self)

    def GetRange(self, min, max):
        return _gmat_py.StopCondition_GetRange(self, min, max)

    def PutInRange(self, value, min, max, isReflection=False):
        return _gmat_py.StopCondition_PutInRange(self, value, min, max, isReflection)

    def SkipEvaluation(self, shouldSkip):
        return _gmat_py.StopCondition_SkipEvaluation(self, shouldSkip)

    def UpdateBuffer(self):
        return _gmat_py.StopCondition_UpdateBuffer(self)

    def HasLocalClones(self):
        return _gmat_py.StopCondition_HasLocalClones(self)

    @staticmethod
    def SetClass(base):
        return _gmat_py.StopCondition_SetClass(base)

# Register StopCondition in _gmat_py:
_gmat_py.StopCondition_swigregister(StopCondition)
StopCondition.STOP_COND_TOL = _gmat_py.cvar.StopCondition_STOP_COND_TOL

class Subscriber(GmatBase):
    r"""Definition for the Subscriber base class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Subscriber

    def Initialize(self):
        return _gmat_py.Subscriber_Initialize(self)

    def IsInitialized(self):
        return _gmat_py.Subscriber_IsInitialized(self)

    def ReceiveData(self, *args):
        return _gmat_py.Subscriber_ReceiveData(self, *args)

    def FlushData(self, endOfDataBlock=True):
        return _gmat_py.Subscriber_FlushData(self, endOfDataBlock)

    def SetEndOfRun(self):
        return _gmat_py.Subscriber_SetEndOfRun(self)

    def SetRunState(self, rs):
        return _gmat_py.Subscriber_SetRunState(self, rs)

    def SetManeuvering(self, *args):
        return _gmat_py.Subscriber_SetManeuvering(self, *args)

    def SetSpacecraftPropertyChanged(self, originator, epoch, satName, desc):
        return _gmat_py.Subscriber_SetSpacecraftPropertyChanged(self, originator, epoch, satName, desc)

    def SetOrbitColorChanged(self, originator, newColor, objName, desc):
        return _gmat_py.Subscriber_SetOrbitColorChanged(self, originator, newColor, objName, desc)

    def SetTargetColorChanged(self, originator, newColor, objName, desc):
        return _gmat_py.Subscriber_SetTargetColorChanged(self, originator, newColor, objName, desc)

    def SetSegmentOrbitColor(self, originator, overrideColor, orbitColor, objNames):
        return _gmat_py.Subscriber_SetSegmentOrbitColor(self, originator, overrideColor, orbitColor, objNames)

    def Next(self):
        return _gmat_py.Subscriber_Next(self)

    def Add(self, s):
        return _gmat_py.Subscriber_Add(self, s)

    def Remove(self, s, _del):
        return _gmat_py.Subscriber_Remove(self, s, _del)

    def Activate(self, state=True):
        return _gmat_py.Subscriber_Activate(self, state)

    def IsActive(self):
        return _gmat_py.Subscriber_IsActive(self)

    def SetProviderId(self, id):
        return _gmat_py.Subscriber_SetProviderId(self, id)

    def GetProviderId(self):
        return _gmat_py.Subscriber_GetProviderId(self)

    def SetProvider(self, provider, epochInMjd=-999.999):
        return _gmat_py.Subscriber_SetProvider(self, provider, epochInMjd)

    def SetDataLabels(self, elements):
        return _gmat_py.Subscriber_SetDataLabels(self, elements)

    def SetPropagationDirection(self, propDir):
        return _gmat_py.Subscriber_SetPropagationDirection(self, propDir)

    def ClearDataLabels(self):
        return _gmat_py.Subscriber_ClearDataLabels(self)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.Subscriber_SetInternalCoordSystem(self, cs)

    def SetDataCoordSystem(self, cs):
        return _gmat_py.Subscriber_SetDataCoordSystem(self, cs)

    def SetDataMJ2000EqOrigin(self, cb):
        return _gmat_py.Subscriber_SetDataMJ2000EqOrigin(self, cb)

    def SetSolarSystem(self, ss):
        return _gmat_py.Subscriber_SetSolarSystem(self, ss)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.Subscriber_GetWrapperObjectNameArray(self, completeSet)

    def SetElementWrapper(self, toWrapper, name):
        return _gmat_py.Subscriber_SetElementWrapper(self, toWrapper, name)

    def ClearWrappers(self, clearX=False, clearY=True):
        return _gmat_py.Subscriber_ClearWrappers(self, clearX, clearY)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.Subscriber_RenameRefObject(self, type, oldName, newName)

    def IsParameterReadOnly(self, id):
        return _gmat_py.Subscriber_IsParameterReadOnly(self, id)

    def IsParameterVisible(self, *args):
        return _gmat_py.Subscriber_IsParameterVisible(self, *args)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.Subscriber_IsParameterCommandModeSettable(self, id)

    def GetParameterText(self, id):
        return _gmat_py.Subscriber_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.Subscriber_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.Subscriber_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.Subscriber_GetParameterTypeString(self, id)

    def GetIntegerParameter(self, id):
        return _gmat_py.Subscriber_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.Subscriber_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.Subscriber_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.Subscriber_SetStringParameter(self, *args)

    def GetBooleanParameter(self, *args):
        return _gmat_py.Subscriber_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.Subscriber_SetBooleanParameter(self, *args)

    def GetOnOffParameter(self, *args):
        return _gmat_py.Subscriber_GetOnOffParameter(self, *args)

    def SetOnOffParameter(self, *args):
        return _gmat_py.Subscriber_SetOnOffParameter(self, *args)

    def GetRealParameter(self, *args):
        return _gmat_py.Subscriber_GetRealParameter(self, *args)

    def SetRealParameter(self, *args):
        return _gmat_py.Subscriber_SetRealParameter(self, *args)

    def GetRvectorParameter(self, *args):
        return _gmat_py.Subscriber_GetRvectorParameter(self, *args)

    def SetRvectorParameter(self, *args):
        return _gmat_py.Subscriber_SetRvectorParameter(self, *args)

    def HasLocalClones(self):
        return _gmat_py.Subscriber_HasLocalClones(self)
    SI_ALL = _gmat_py.Subscriber_SI_ALL
    SI_CURRENT = _gmat_py.Subscriber_SI_CURRENT
    SI_NONE = _gmat_py.Subscriber_SI_NONE
    SolverIterOptionCount = _gmat_py.Subscriber_SolverIterOptionCount
    SOLVER_ITERATIONS = _gmat_py.Subscriber_SOLVER_ITERATIONS
    TARGET_STATUS = _gmat_py.Subscriber_TARGET_STATUS
    UPPER_LEFT = _gmat_py.Subscriber_UPPER_LEFT
    SIZE = _gmat_py.Subscriber_SIZE
    RELATIVE_Z_ORDER = _gmat_py.Subscriber_RELATIVE_Z_ORDER
    MINIMIZED = _gmat_py.Subscriber_MINIMIZED
    MAXIMIZED = _gmat_py.Subscriber_MAXIMIZED
    SubscriberParamCount = _gmat_py.Subscriber_SubscriberParamCount
    solverIterOptions = property(_gmat_py.Subscriber_solverIterOptions_get, _gmat_py.Subscriber_solverIterOptions_set)

    def GetPropertyEnumStrings(self, *args):
        return _gmat_py.Subscriber_GetPropertyEnumStrings(self, *args)

    @staticmethod
    def GetSolverIterOptionCount():
        return _gmat_py.Subscriber_GetSolverIterOptionCount()

    @staticmethod
    def GetSolverIterOptionList():
        return _gmat_py.Subscriber_GetSolverIterOptionList()

    @staticmethod
    def SetClass(base):
        return _gmat_py.Subscriber_SetClass(base)

# Register Subscriber in _gmat_py:
_gmat_py.Subscriber_swigregister(Subscriber)
Subscriber.PARAMETER_TYPE = _gmat_py.cvar.Subscriber_PARAMETER_TYPE
Subscriber.PARAMETER_TEXT = _gmat_py.cvar.Subscriber_PARAMETER_TEXT

class EphemManager(object):
    r"""Manager for ephemeris recording for the specified object"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SPK = _gmat_py.EphemManager_SPK
    FK = _gmat_py.EphemManager_FK
    CK = _gmat_py.EphemManager_CK
    CCSDS = _gmat_py.EphemManager_CCSDS
    __swig_destroy__ = _gmat_py.delete_EphemManager

    def __init__(self, *args):
        _gmat_py.EphemManager_swiginit(self, _gmat_py.new_EphemManager(*args))

    def Initialize(self):
        r""" Initialize the EphemManager"""
        return _gmat_py.EphemManager_Initialize(self)

    def RecordEphemerisData(self):
        r""" Create the EphemerisFile and set to begin recording"""
        return _gmat_py.EphemManager_RecordEphemerisData(self)

    def ProvideEphemerisData(self):
        r""" Load the created file and set up to continue (with a new EphemerisFile)"""
        return _gmat_py.EphemManager_ProvideEphemerisData(self)

    def StopRecording(self, done=True):
        r"""
        Stop recording - load the last ephem data - this must be called
        at the end of the run for the last-written SPK to be loaded correctly
        """
        return _gmat_py.EphemManager_StopRecording(self, done)

    def GetOccultationIntervals(self, occType, frontBody, frontShape, frontFrame, backBody, backShape, backFrame, abCorrection, s, e, useEntireIntvl, stepSize, numIntervals, starts, ends):
        r""" method to determine occultation intervals"""
        return _gmat_py.EphemManager_GetOccultationIntervals(self, occType, frontBody, frontShape, frontFrame, backBody, backShape, backFrame, abCorrection, s, e, useEntireIntvl, stepSize, numIntervals, starts, ends)

    def GetContactIntervals(self, observerID, minElevation, obsFrameName, occultingBodyNames, abCorrection, s, e, useEntireIntvl, useLightTime, transmit, stepSize, numIntervals, starts, ends, contactForImager, idForInstrument, maxEl):
        return _gmat_py.EphemManager_GetContactIntervals(self, observerID, minElevation, obsFrameName, occultingBodyNames, abCorrection, s, e, useEntireIntvl, useLightTime, transmit, stepSize, numIntervals, starts, ends, contactForImager, idForInstrument, maxEl)

    def GetIntrusionIntervals(self, instName, targetName, targetShape, abCorrection, occultingBodyNames, minPhase, s, e, useEntireIntvl, useLightTime, stepSize, numIntervals, starts, ends):
        return _gmat_py.EphemManager_GetIntrusionIntervals(self, instName, targetName, targetShape, abCorrection, occultingBodyNames, minPhase, s, e, useEntireIntvl, useLightTime, stepSize, numIntervals, starts, ends)

    def GetCoverage(self, s, e, useEntireIntvl, includeAll, intvlStart, intvlStop, cvrStart, cvrStop):
        return _gmat_py.EphemManager_GetCoverage(self, s, e, useEntireIntvl, includeAll, intvlStart, intvlStop, cvrStart, cvrStop)

    def GetTargetPosition(self, epoch, targetName, refFrameName, abCorrection, targPos, lightTime):
        return _gmat_py.EphemManager_GetTargetPosition(self, epoch, targetName, refFrameName, abCorrection, targPos, lightTime)

    def GetTargetState(self, targetNaif, epoch, refFrameName, abCorrection, observerNaif, state):
        return _gmat_py.EphemManager_GetTargetState(self, targetNaif, epoch, refFrameName, abCorrection, observerNaif, state)

    def GetPhaseAngle(self, epoch, targetName, illmnName, abCorrection):
        return _gmat_py.EphemManager_GetPhaseAngle(self, epoch, targetName, illmnName, abCorrection)

    def SetObject(self, obj):
        r""" Set reference objects"""
        return _gmat_py.EphemManager_SetObject(self, obj)

    def SetEphemType(self, eType):
        return _gmat_py.EphemManager_SetEphemType(self, eType)

    def SetCoordinateSystem(self, cs):
        return _gmat_py.EphemManager_SetCoordinateSystem(self, cs)

    def SetSolarSystem(self, ss):
        return _gmat_py.EphemManager_SetSolarSystem(self, ss)

# Register EphemManager in _gmat_py:
_gmat_py.EphemManager_swigregister(EphemManager)
class EphemerisFile(Subscriber):
    r"""Base class for writing spacecraft orbit states to an ephemeris file."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_EphemerisFile

    def __init__(self, *args):
        _gmat_py.EphemerisFile_swiginit(self, _gmat_py.new_EphemerisFile(*args))

    def GetProperFileName(self, fName, fType, saveFileName):
        return _gmat_py.EphemerisFile_GetProperFileName(self, fName, fType, saveFileName)

    def SetBackgroundGeneration(self, inBackground):
        return _gmat_py.EphemerisFile_SetBackgroundGeneration(self, inBackground)

    def CloseEphemerisFile(self, done=True, writeMetaData=True):
        return _gmat_py.EphemerisFile_CloseEphemerisFile(self, done, writeMetaData)

    def InsufficientDataPoints(self):
        return _gmat_py.EphemerisFile_InsufficientDataPoints(self)

    def SetProvider(self, provider, epochInMjd=-999.999):
        return _gmat_py.EphemerisFile_SetProvider(self, provider, epochInMjd)

    def Validate(self):
        return _gmat_py.EphemerisFile_Validate(self)

    def Initialize(self):
        return _gmat_py.EphemerisFile_Initialize(self)

    def Clone(self):
        return _gmat_py.EphemerisFile_Clone(self)

    def Copy(self, orig):
        return _gmat_py.EphemerisFile_Copy(self, orig)

    def TakeAction(self, *args):
        return _gmat_py.EphemerisFile_TakeAction(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.EphemerisFile_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.EphemerisFile_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.EphemerisFile_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.EphemerisFile_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.EphemerisFile_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.EphemerisFile_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.EphemerisFile_IsParameterCommandModeSettable(self, id)

    def IsParameterCloaked(self, id):
        return _gmat_py.EphemerisFile_IsParameterCloaked(self, id)

    def GetPropertyObjectType(self, id):
        return _gmat_py.EphemerisFile_GetPropertyObjectType(self, id)

    def GetPropertyEnumStrings(self, id):
        return _gmat_py.EphemerisFile_GetPropertyEnumStrings(self, id)

    def GetBooleanParameter(self, id):
        return _gmat_py.EphemerisFile_GetBooleanParameter(self, id)

    def SetBooleanParameter(self, id, value):
        return _gmat_py.EphemerisFile_SetBooleanParameter(self, id, value)

    def GetIntegerParameter(self, id):
        return _gmat_py.EphemerisFile_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.EphemerisFile_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.EphemerisFile_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.EphemerisFile_SetStringParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.EphemerisFile_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.EphemerisFile_SetRefObject(self, *args)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.EphemerisFile_GetRefObjectNameArray(self, type)

    def StartNewSegment(self, comments, saveEpochInfo, writeAfterData, ignoreBlankComments):
        return _gmat_py.EphemerisFile_StartNewSegment(self, comments, saveEpochInfo, writeAfterData, ignoreBlankComments)

    @staticmethod
    def SetClass(base):
        return _gmat_py.EphemerisFile_SetClass(base)

# Register EphemerisFile in _gmat_py:
_gmat_py.EphemerisFile_swigregister(EphemerisFile)
class ReportFile(Subscriber):
    r"""Definition for the ReportFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_ReportFile

    def __init__(self, *args):
        _gmat_py.ReportFile_swiginit(self, _gmat_py.new_ReportFile(*args))

    def GetDefaultFileName(self):
        return _gmat_py.ReportFile_GetDefaultFileName(self)

    def GetFullPathFileName(self):
        return _gmat_py.ReportFile_GetFullPathFileName(self)

    def GetNumParameters(self):
        return _gmat_py.ReportFile_GetNumParameters(self)

    def AddParameter(self, paramName, index):
        return _gmat_py.ReportFile_AddParameter(self, paramName, index)

    def WriteData(self, dataArray, parsable=False):
        return _gmat_py.ReportFile_WriteData(self, dataArray, parsable)

    def Initialize(self):
        return _gmat_py.ReportFile_Initialize(self)

    def Clone(self):
        return _gmat_py.ReportFile_Clone(self)

    def Copy(self, orig):
        return _gmat_py.ReportFile_Copy(self, orig)

    def TakeAction(self, *args):
        return _gmat_py.ReportFile_TakeAction(self, *args)

    def RenameRefObject(self, type, oldName, newName):
        return _gmat_py.ReportFile_RenameRefObject(self, type, oldName, newName)

    def GetParameterText(self, id):
        return _gmat_py.ReportFile_GetParameterText(self, id)

    def GetParameterID(self, str):
        return _gmat_py.ReportFile_GetParameterID(self, str)

    def GetParameterType(self, id):
        return _gmat_py.ReportFile_GetParameterType(self, id)

    def GetParameterTypeString(self, id):
        return _gmat_py.ReportFile_GetParameterTypeString(self, id)

    def IsParameterReadOnly(self, id):
        return _gmat_py.ReportFile_IsParameterReadOnly(self, id)

    def IsParameterCommandModeSettable(self, id):
        return _gmat_py.ReportFile_IsParameterCommandModeSettable(self, id)

    def GetBooleanParameter(self, *args):
        return _gmat_py.ReportFile_GetBooleanParameter(self, *args)

    def SetBooleanParameter(self, *args):
        return _gmat_py.ReportFile_SetBooleanParameter(self, *args)

    def GetIntegerParameter(self, id):
        return _gmat_py.ReportFile_GetIntegerParameter(self, id)

    def SetIntegerParameter(self, id, value):
        return _gmat_py.ReportFile_SetIntegerParameter(self, id, value)

    def GetStringParameter(self, *args):
        return _gmat_py.ReportFile_GetStringParameter(self, *args)

    def SetStringParameter(self, *args):
        return _gmat_py.ReportFile_SetStringParameter(self, *args)

    def GetStringArrayParameter(self, *args):
        return _gmat_py.ReportFile_GetStringArrayParameter(self, *args)

    def GetOnOffParameter(self, *args):
        return _gmat_py.ReportFile_GetOnOffParameter(self, *args)

    def SetOnOffParameter(self, *args):
        return _gmat_py.ReportFile_SetOnOffParameter(self, *args)

    def GetRefObject(self, type, name):
        return _gmat_py.ReportFile_GetRefObject(self, type, name)

    def SetRefObject(self, *args):
        return _gmat_py.ReportFile_SetRefObject(self, *args)

    def HasRefObjectTypeArray(self):
        return _gmat_py.ReportFile_HasRefObjectTypeArray(self)

    def GetRefObjectTypeArray(self):
        return _gmat_py.ReportFile_GetRefObjectTypeArray(self)

    def GetRefObjectNameArray(self, type):
        return _gmat_py.ReportFile_GetRefObjectNameArray(self, type)

    def GetWrapperObjectNameArray(self, completeSet=False):
        return _gmat_py.ReportFile_GetWrapperObjectNameArray(self, completeSet)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ReportFile_SetClass(base)

# Register ReportFile in _gmat_py:
_gmat_py.ReportFile_swigregister(ReportFile)
class Interpreter(object):
    r"""
    Interpreter is the base class for the GMAT Interpreter subsystem.

    Interpreter defines the interfaces used to parse the text files that control
    execution in GMAT.  It also provides the interfaces to write text files out,
    either to the file system, the screen, or the GUI.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_Interpreter

    def Interpret(self):
        r"""
        Retrieves text input from a stream and translate it into GMAT objects and
        actions.

        This method gets overridden by derived classes.

        :rtype: boolean
        :return: true on success, false on failure.
        """
        return _gmat_py.Interpreter_Interpret(self)

    def Build(self, mode):
        r"""
        Accesses GMAT objects and actions and writes them to a stream.

        This method gets overridden by derived classes.

        :rtype: boolean
        :return: true on success, false on failure.
        """
        return _gmat_py.Interpreter_Build(self, mode)

    def CreateSystemParameter(self, str):
        return _gmat_py.Interpreter_CreateSystemParameter(self, str)

    def CreateParameter(self, *args):
        return _gmat_py.Interpreter_CreateParameter(self, *args)

    def GetListOfObjects(self, *args):
        return _gmat_py.Interpreter_GetListOfObjects(self, *args)

    def GetListOfViewableSubtypesOf(self, type):
        return _gmat_py.Interpreter_GetListOfViewableSubtypesOf(self, type)

    def GetListOfViewableCommands(self):
        return _gmat_py.Interpreter_GetListOfViewableCommands(self)

    def GetConfiguredObject(self, *args):
        return _gmat_py.Interpreter_GetConfiguredObject(self, *args)

    def FindObject(self, *args):
        return _gmat_py.Interpreter_FindObject(self, *args)

    def CreateObject(self, type, name, manage=1, createDefault=False, includeLineOnError=True, showWarning=True):
        return _gmat_py.Interpreter_CreateObject(self, type, name, manage, createDefault, includeLineOnError, showWarning)

    def SetConfiguredObjectMap(self):
        return _gmat_py.Interpreter_SetConfiguredObjectMap(self)

    def SetSolarSystemInUse(self, ss):
        return _gmat_py.Interpreter_SetSolarSystemInUse(self, ss)

    def GetSolarSystemInUse(self):
        return _gmat_py.Interpreter_GetSolarSystemInUse(self)

    def SetObjectMap(self, objMap, forFunction=False):
        return _gmat_py.Interpreter_SetObjectMap(self, objMap, forFunction)

    def GetObjectMap(self):
        return _gmat_py.Interpreter_GetObjectMap(self)

    def SetFunction(self, func):
        return _gmat_py.Interpreter_SetFunction(self, func)

    def GetFunction(self):
        return _gmat_py.Interpreter_GetFunction(self)

    def CheckForMethod(self, objectName, methodName):
        return _gmat_py.Interpreter_CheckForMethod(self, objectName, methodName)

    def SetContinueOnError(self, flag):
        return _gmat_py.Interpreter_SetContinueOnError(self, flag)

    def GetContinueOnError(self):
        return _gmat_py.Interpreter_GetContinueOnError(self)

    def IsInCommandMode(self):
        return _gmat_py.Interpreter_IsInCommandMode(self)

    def FoundBeginMissionSequence(self):
        return _gmat_py.Interpreter_FoundBeginMissionSequence(self)

    def GetErrorList(self):
        return _gmat_py.Interpreter_GetErrorList(self)

    def SetHeaderComment(self, comment):
        return _gmat_py.Interpreter_SetHeaderComment(self, comment)

    def SetFooterComment(self, comment):
        return _gmat_py.Interpreter_SetFooterComment(self, comment)

    def IsObjectType(self, *args):
        return _gmat_py.Interpreter_IsObjectType(self, *args)

    def IsCommandType(self, *args):
        return _gmat_py.Interpreter_IsCommandType(self, *args)

    def GetObjectType(self, type):
        return _gmat_py.Interpreter_GetObjectType(self, type)

    def ValidateCommand(self, cmd):
        return _gmat_py.Interpreter_ValidateCommand(self, cmd)

    def ValidateSubscriber(self, obj):
        return _gmat_py.Interpreter_ValidateSubscriber(self, obj)

    def SetForceModelProperty(self, obj, prop, value, fromObj):
        return _gmat_py.Interpreter_SetForceModelProperty(self, obj, prop, value, fromObj)

    def SetDragForceProperty(self, obj, pmType, pmField, value):
        return _gmat_py.Interpreter_SetDragForceProperty(self, obj, pmType, pmField, value)

    def SetMeasurementModelProperty(self, obj, prop, value):
        return _gmat_py.Interpreter_SetMeasurementModelProperty(self, obj, prop, value)

    def SetTrackingDataProperty(self, obj, prop, value):
        return _gmat_py.Interpreter_SetTrackingDataProperty(self, obj, prop, value)

    def SetTrackingSystemProperty(self, obj, prop, value):
        return _gmat_py.Interpreter_SetTrackingSystemProperty(self, obj, prop, value)

    def SetDataStreamProperty(self, obj, property, value):
        return _gmat_py.Interpreter_SetDataStreamProperty(self, obj, property, value)

    def FindOwnedObject(self, owner, toProp, ownedObj, id, type):
        return _gmat_py.Interpreter_FindOwnedObject(self, owner, toProp, ownedObj, id, type)

    def FindPropertyID(self, *args):
        return _gmat_py.Interpreter_FindPropertyID(self, *args)

    def BuildCreatableObjectMaps(self, finalBuild=False):
        return _gmat_py.Interpreter_BuildCreatableObjectMaps(self, finalBuild)

    def GetCreatableList(self, *args):
        return _gmat_py.Interpreter_GetCreatableList(self, *args)

    def SetInputFocus(self):
        return _gmat_py.Interpreter_SetInputFocus(self)

    def NotifyRunCompleted(self):
        return _gmat_py.Interpreter_NotifyRunCompleted(self)

    def UpdateView(self, type=7):
        return _gmat_py.Interpreter_UpdateView(self, type)

    def CloseCurrentProject(self):
        return _gmat_py.Interpreter_CloseCurrentProject(self)

    def StartMatlabServer(self):
        return _gmat_py.Interpreter_StartMatlabServer(self)

    def ResetIconFile(self):
        return _gmat_py.Interpreter_ResetIconFile(self)

    def GetMatlabInterface(self):
        return _gmat_py.Interpreter_GetMatlabInterface(self)

    def OpenMatlabEngine(self):
        return _gmat_py.Interpreter_OpenMatlabEngine(self)

    def CloseMatlabEngine(self):
        return _gmat_py.Interpreter_CloseMatlabEngine(self)

    def GetErrorLines(self):
        return _gmat_py.Interpreter_GetErrorLines(self)

    def GetWarningLines(self):
        return _gmat_py.Interpreter_GetWarningLines(self)

# Register Interpreter in _gmat_py:
_gmat_py.Interpreter_swigregister(Interpreter)
class ScriptInterpreter(Interpreter):
    r"""
    Class definition for the ScriptInterpreter

    The ScriptInterpreter class manages the script reading and writing process.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.ScriptInterpreter_Instance()

    def Clear(self):
        return _gmat_py.ScriptInterpreter_Clear(self)

    def Interpret(self, *args):
        return _gmat_py.ScriptInterpreter_Interpret(self, *args)

    def InterpretGmatFunction(self, *args):
        return _gmat_py.ScriptInterpreter_InterpretGmatFunction(self, *args)

    def ReadFirstPass(self):
        return _gmat_py.ScriptInterpreter_ReadFirstPass(self)

    def Build(self, *args):
        return _gmat_py.ScriptInterpreter_Build(self, *args)

    def SetInStream(self, istrm):
        return _gmat_py.ScriptInterpreter_SetInStream(self, istrm)

    def SetOutStream(self, ostrm):
        return _gmat_py.ScriptInterpreter_SetOutStream(self, ostrm)

    def GetMainScriptFileName(self):
        return _gmat_py.ScriptInterpreter_GetMainScriptFileName(self)

    def IncludeFoundInResource(self):
        return _gmat_py.ScriptInterpreter_IncludeFoundInResource(self)

    def ChangeRunState(self, state, sandboxNum=1):
        return _gmat_py.ScriptInterpreter_ChangeRunState(self, state, sandboxNum)

    @staticmethod
    def SetClass(base):
        return _gmat_py.ScriptInterpreter_SetClass(base)

# Register ScriptInterpreter in _gmat_py:
_gmat_py.ScriptInterpreter_swigregister(ScriptInterpreter)
class Validator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.Validator_Instance()

    def SetInterpreter(self, interp):
        return _gmat_py.Validator_SetInterpreter(self, interp)

    def SetSolarSystem(self, ss):
        return _gmat_py.Validator_SetSolarSystem(self, ss)

    def SetObjectMap(self, objMap):
        return _gmat_py.Validator_SetObjectMap(self, objMap)

    def SetFunction(self, func):
        return _gmat_py.Validator_SetFunction(self, func)

    def StartMatlabServer(self, cmd):
        return _gmat_py.Validator_StartMatlabServer(self, cmd)

    def CheckUndefinedReference(self, obj, contOnError=True):
        return _gmat_py.Validator_CheckUndefinedReference(self, obj, contOnError)

    def ValidateCommand(self, cmd, contOnError=True, manage=1):
        return _gmat_py.Validator_ValidateCommand(self, cmd, contOnError, manage)

    def ValidateEquation(self, eq):
        return _gmat_py.Validator_ValidateEquation(self, eq)

    def HandleCcsdsEphemerisFile(self, objMap, deleteOld=False):
        return _gmat_py.Validator_HandleCcsdsEphemerisFile(self, objMap, deleteOld)

    def CreateElementWrapper(self, desc, parametersFirst=False, manage=1):
        return _gmat_py.Validator_CreateElementWrapper(self, desc, parametersFirst, manage)

    def GetErrorList(self):
        return _gmat_py.Validator_GetErrorList(self)

    def ClearErrorList(self):
        return _gmat_py.Validator_ClearErrorList(self)

    def FindObject(self, *args):
        return _gmat_py.Validator_FindObject(self, *args)

    def GetParameter(self, name):
        return _gmat_py.Validator_GetParameter(self, name)

    def CreateParameter(self, *args):
        return _gmat_py.Validator_CreateParameter(self, *args)

    def CreateAutoParameter(self, *args):
        return _gmat_py.Validator_CreateAutoParameter(self, *args)

    def CreateArray(self, arrayStr, manage=1):
        return _gmat_py.Validator_CreateArray(self, arrayStr, manage)

    def CreateSystemParameter(self, paramCreated, str, manage=1):
        return _gmat_py.Validator_CreateSystemParameter(self, paramCreated, str, manage)

    def CreateAxisSystem(self, type, owner):
        return _gmat_py.Validator_CreateAxisSystem(self, type, owner)

    def IsParameterType(self, desc):
        return _gmat_py.Validator_IsParameterType(self, desc)

    def ValidateParameter(self, refNames, obj):
        return _gmat_py.Validator_ValidateParameter(self, refNames, obj)

    def ValidateSaveCommand(self, obj):
        return _gmat_py.Validator_ValidateSaveCommand(self, obj)

    def UpdateLists(self):
        return _gmat_py.Validator_UpdateLists(self)

# Register Validator in _gmat_py:
_gmat_py.Validator_swigregister(Validator)
class DynamicLibrary(object):
    r"""
    The DynamicLibrary class defines the interfaces that are needed to build a
    GMAT plug-in library.  GMAT plugins usually include one or more classes
    derived from GmatBase, one or more factories that create instances of these
    classes, and three C-style functions that are accessed to import the Factory
    into GMAT.  The functions required in the plugin library are defined as
    follows:

       Integer     GetFactoryCount();
       Factory*    GetFactoryPointer(Integer index);
       void        SetMessageReceiver(MessageReceiver* mr);

    The use of the first two functions matches the calls defined for this class.
    The MessageReceiver is set using the SetMessageReceiver function when the
    library is loaded into memory.

    Plugin libraries may also optionally create and use TriggerManagers.  A
    TriggerManager is an engine-level component that exists at the scope of the
    Sandbox.  Each unique TriggerManager is a singleton in the Sandbox, and is
    used to trigger specific Mission Control Sequence actions during a run.  The
    prototypical TriggerManager option is event location for shadow entry and
    exit epoch calculations during a run.

    Plugin libraries that include TriggerManagers need to implement the following
    two functions:

       Integer           GetTriggerManagerCount();
       TriggerManager*   GetTriggerManager(Integer index);

    If these functions are not implemented, the library will load but no
    TriggerManager will be loaded.  In other words, if your code does not need a
    TriggerManager, there is no need to implement these functions.

    Plugin libraries that include resources that should appear on a ResourceTree
    should implement the following function:

       Integer               GetMenuEntryCount();
       Gmat::PluginResource* GetMenuEntry(Integer index);

    The parameter, index, for the 2nd function is the index of the new entry that
    should be placed to the tree.  Factories that supply resources that already
    have tree nodes should not implement this method; it is used to register
    new types of objects with the resource tree.

    The PluginResource returned from this function provides four pieces of
    information used to manage objects in the user interface:

         std::string nodeName;         // Identifier for the resource
         std::string parentNodeName;   // Optional owning type identifier
         UnsignedInt type;             // Core type
         std::string subtype;          // Optional subtype off of the core

    The nodeName and type enumeration are required parameters.  If the new tree
    node should appear at the resource level in the tree, the parentNodeName
    should be set to the empty string.  If the new node should appear as a
    subnode of an existing node, the name of the existing node should be set in
    the parentNodeName string.  If the new object type is derived from an
    extendible object type, the subtype name is passed in in the subtype field.
    For example, GMAT has two subtypes of built in Solvers as of this writing:
    Boundary Value Solvers and Optimizers.  If a new type of solver is added
    through a plugin, the scripted subtype parameter is set in the subtype
    field.  So, for example, a simulator subtype would set this field to the
    string "Simulator".  The subtype field should be set to the empty string if
    it is not needed.

    If these functions are not implemented, the library will load but no
    ResourceTree updates will be loaded.  In other words, if your code does not
    need any new ResourceTree items, there is no need to implement these
    functions.

    Finally, plugins that implement GUI controls (panels, dialog boxes, etc)
    should implement the following functions:

       std::string GetGuiToolkitName();
       Integer GetGuiFactoryCount();
       GuiFactory* GetGuiFactory();

    The first method here, GetGuiToolkitName, returns a string identifying the
    toolkit used for the GUI components.  Normal usage in GMAT would be to return
    "wxWidgets" from this call.  Some third party groups may want to use this
    structure to support other toolkits.  The design here is intended to allow
    such extensions.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_DynamicLibrary

    def __init__(self, *args):
        _gmat_py.DynamicLibrary_swiginit(self, _gmat_py.new_DynamicLibrary(*args))

    def LoadDynamicLibrary(self):
        return _gmat_py.DynamicLibrary_LoadDynamicLibrary(self)

    def GetFunction(self, funName):
        return _gmat_py.DynamicLibrary_GetFunction(self, funName)

    def GetFactoryCount(self):
        return _gmat_py.DynamicLibrary_GetFactoryCount(self)

    def GetGmatFactory(self, index=0):
        return _gmat_py.DynamicLibrary_GetGmatFactory(self, index)

    def GetTriggerManagerCount(self):
        return _gmat_py.DynamicLibrary_GetTriggerManagerCount(self)

    def GetTriggerManager(self, index=0):
        return _gmat_py.DynamicLibrary_GetTriggerManager(self, index)

    def GetMenuEntryCount(self):
        return _gmat_py.DynamicLibrary_GetMenuEntryCount(self)

    def GetMenuEntry(self, index):
        return _gmat_py.DynamicLibrary_GetMenuEntry(self, index)

    def GetGuiToolkitName(self):
        return _gmat_py.DynamicLibrary_GetGuiToolkitName(self)

    def GetGuiFactoryCount(self):
        return _gmat_py.DynamicLibrary_GetGuiFactoryCount(self)

    def GetGuiFactory(self, whichOne):
        return _gmat_py.DynamicLibrary_GetGuiFactory(self, whichOne)

# Register DynamicLibrary in _gmat_py:
_gmat_py.DynamicLibrary_swigregister(DynamicLibrary)
class ConfigManager(object):
    r"""Class used to manage configured objects prior to cloning into the Sandbox."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.ConfigManager_Instance()

    def GetNewName(self, name, startCount):
        return _gmat_py.ConfigManager_GetNewName(self, name, startCount)

    def AddObject(self, objType, obj):
        return _gmat_py.ConfigManager_AddObject(self, objType, obj)

    def AddPhysicalModel(self, pm):
        return _gmat_py.ConfigManager_AddPhysicalModel(self, pm)

    def AddPropagator(self, prop):
        return _gmat_py.ConfigManager_AddPropagator(self, prop)

    def AddODEModel(self, fm):
        return _gmat_py.ConfigManager_AddODEModel(self, fm)

    def AddSubscriber(self, subs):
        return _gmat_py.ConfigManager_AddSubscriber(self, subs)

    def AddSolarSystem(self, solarSys):
        return _gmat_py.ConfigManager_AddSolarSystem(self, solarSys)

    def AddPropSetup(self, propSetup):
        return _gmat_py.ConfigManager_AddPropSetup(self, propSetup)

    def AddSpacecraft(self, sc):
        return _gmat_py.ConfigManager_AddSpacecraft(self, sc)

    def AddSpacePoint(self, sp):
        return _gmat_py.ConfigManager_AddSpacePoint(self, sp)

    def AddPlate(self, pl):
        return _gmat_py.ConfigManager_AddPlate(self, pl)

    def AddHardware(self, hw):
        return _gmat_py.ConfigManager_AddHardware(self, hw)

    def AddFieldOfView(self, fov):
        return _gmat_py.ConfigManager_AddFieldOfView(self, fov)

    def AddStopCondition(self, stopCond):
        return _gmat_py.ConfigManager_AddStopCondition(self, stopCond)

    def AddParameter(self, parameter):
        return _gmat_py.ConfigManager_AddParameter(self, parameter)

    def AddBurn(self, burn):
        return _gmat_py.ConfigManager_AddBurn(self, burn)

    def AddSolver(self, solver):
        return _gmat_py.ConfigManager_AddSolver(self, solver)

    def AddAtmosphereModel(self, atmosModel):
        return _gmat_py.ConfigManager_AddAtmosphereModel(self, atmosModel)

    def AddFunction(self, function):
        return _gmat_py.ConfigManager_AddFunction(self, function)

    def AddCoordinateSystem(self, cs):
        return _gmat_py.ConfigManager_AddCoordinateSystem(self, cs)

    def AddCalculatedPoint(self, cp):
        return _gmat_py.ConfigManager_AddCalculatedPoint(self, cp)

    def SetDefaultSolarSystem(self, ss):
        return _gmat_py.ConfigManager_SetDefaultSolarSystem(self, ss)

    def SetSolarSystemInUse(self, *args):
        return _gmat_py.ConfigManager_SetSolarSystemInUse(self, *args)

    def AddMeasurementModel(self, mModel):
        return _gmat_py.ConfigManager_AddMeasurementModel(self, mModel)

    def AddErrorModel(self, meas):
        return _gmat_py.ConfigManager_AddErrorModel(self, meas)

    def AddDataFilter(self, filter):
        return _gmat_py.ConfigManager_AddDataFilter(self, filter)

    def AddDataFile(self, meas):
        return _gmat_py.ConfigManager_AddDataFile(self, meas)

    def AddObType(self, meas):
        return _gmat_py.ConfigManager_AddObType(self, meas)

    def AddEventLocator(self, el):
        return _gmat_py.ConfigManager_AddEventLocator(self, el)

    def GetListOfAllItems(self):
        return _gmat_py.ConfigManager_GetListOfAllItems(self)

    def GetListOfItems(self, *args):
        return _gmat_py.ConfigManager_GetListOfItems(self, *args)

    def GetListOfItemsHas(self, type, name, includeSysParam=True):
        return _gmat_py.ConfigManager_GetListOfItemsHas(self, type, name, includeSysParam)

    def AddClone(self, name, cloneName):
        return _gmat_py.ConfigManager_AddClone(self, name, cloneName)

    def GetFirstItemUsing(self, type, name, includeSysParam=True):
        return _gmat_py.ConfigManager_GetFirstItemUsing(self, type, name, includeSysParam)

    def GetItem(self, name):
        return _gmat_py.ConfigManager_GetItem(self, name)

    def ChangeMappingName(self, itemType, oldName, newName, mapObj):
        return _gmat_py.ConfigManager_ChangeMappingName(self, itemType, oldName, newName, mapObj)

    def RenameItem(self, itemType, oldName, newName):
        return _gmat_py.ConfigManager_RenameItem(self, itemType, oldName, newName)

    def RelatedNameChange(self, itemType, oldName, newName):
        return _gmat_py.ConfigManager_RelatedNameChange(self, itemType, oldName, newName)

    def RemoveAllItems(self):
        return _gmat_py.ConfigManager_RemoveAllItems(self)

    def RemoveItem(self, type, name, removeAssociatedSysParam=False):
        return _gmat_py.ConfigManager_RemoveItem(self, type, name, removeAssociatedSysParam)

    def ReconfigureItem(self, newobj, name):
        return _gmat_py.ConfigManager_ReconfigureItem(self, newobj, name)

    def GetPhysicalModel(self, name):
        return _gmat_py.ConfigManager_GetPhysicalModel(self, name)

    def GetPropagator(self, name):
        return _gmat_py.ConfigManager_GetPropagator(self, name)

    def GetODEModel(self, name):
        return _gmat_py.ConfigManager_GetODEModel(self, name)

    def GetSpacecraft(self, name):
        return _gmat_py.ConfigManager_GetSpacecraft(self, name)

    def GetSpacePoint(self, name):
        return _gmat_py.ConfigManager_GetSpacePoint(self, name)

    def GetPlate(self, name):
        return _gmat_py.ConfigManager_GetPlate(self, name)

    def GetHardware(self, name):
        return _gmat_py.ConfigManager_GetHardware(self, name)

    def GetFieldOfView(self, name):
        return _gmat_py.ConfigManager_GetFieldOfView(self, name)

    def GetPropSetup(self, name):
        return _gmat_py.ConfigManager_GetPropSetup(self, name)

    def GetSubscriber(self, name):
        return _gmat_py.ConfigManager_GetSubscriber(self, name)

    def GetDefaultSolarSystem(self):
        return _gmat_py.ConfigManager_GetDefaultSolarSystem(self)

    def GetSolarSystemInUse(self, *args):
        return _gmat_py.ConfigManager_GetSolarSystemInUse(self, *args)

    def GetStopCondition(self, name):
        return _gmat_py.ConfigManager_GetStopCondition(self, name)

    def GetParameter(self, name):
        return _gmat_py.ConfigManager_GetParameter(self, name)

    def GetBurn(self, name):
        return _gmat_py.ConfigManager_GetBurn(self, name)

    def GetSolver(self, name):
        return _gmat_py.ConfigManager_GetSolver(self, name)

    def GetAtmosphereModel(self, name):
        return _gmat_py.ConfigManager_GetAtmosphereModel(self, name)

    def GetFunction(self, name):
        return _gmat_py.ConfigManager_GetFunction(self, name)

    def GetCoordinateSystem(self, name):
        return _gmat_py.ConfigManager_GetCoordinateSystem(self, name)

    def GetCalculatedPoint(self, name):
        return _gmat_py.ConfigManager_GetCalculatedPoint(self, name)

    def GetMeasurementModel(self, name):
        return _gmat_py.ConfigManager_GetMeasurementModel(self, name)

    def GetErrorModel(self, name):
        return _gmat_py.ConfigManager_GetErrorModel(self, name)

    def GetDataFilter(self, name):
        return _gmat_py.ConfigManager_GetDataFilter(self, name)

    def GetDataStream(self, name):
        return _gmat_py.ConfigManager_GetDataStream(self, name)

    def GetEventLocator(self, name):
        return _gmat_py.ConfigManager_GetEventLocator(self, name)

    def HasConfigurationChanged(self):
        return _gmat_py.ConfigManager_HasConfigurationChanged(self)

    def ConfigurationChanged(self, tf):
        return _gmat_py.ConfigManager_ConfigurationChanged(self, tf)

    def GetObjectMap(self):
        return _gmat_py.ConfigManager_GetObjectMap(self)

# Register ConfigManager in _gmat_py:
_gmat_py.ConfigManager_swigregister(ConfigManager)
class Publisher(object):
    r"""Definition for the Publisher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.Publisher_Instance()
    __swig_destroy__ = _gmat_py.delete_Publisher

    def Subscribe(self, s):
        return _gmat_py.Publisher_Subscribe(self, s)

    def Unsubscribe(self, s):
        return _gmat_py.Publisher_Unsubscribe(self, s)

    def UnsubscribeAll(self):
        return _gmat_py.Publisher_UnsubscribeAll(self)

    def Publish(self, *args):
        return _gmat_py.Publisher_Publish(self, *args)

    def Ping(self):
        return _gmat_py.Publisher_Ping(self)

    def FlushBuffers(self, endOfDataBlock=True):
        return _gmat_py.Publisher_FlushBuffers(self, endOfDataBlock)

    def NotifyEndOfRun(self):
        return _gmat_py.Publisher_NotifyEndOfRun(self)

    def GetSubscriberList(self):
        return _gmat_py.Publisher_GetSubscriberList(self)

    def RegisterPublishedData(self, provider, id, owners, elements):
        return _gmat_py.Publisher_RegisterPublishedData(self, provider, id, owners, elements)

    def UnregisterPublishedData(self, provider):
        return _gmat_py.Publisher_UnregisterPublishedData(self, provider)

    def ClearPublishedData(self):
        return _gmat_py.Publisher_ClearPublishedData(self)

    def GetStringArrayParameter(self, type):
        return _gmat_py.Publisher_GetStringArrayParameter(self, type)

    def SetInternalCoordSystem(self, cs):
        return _gmat_py.Publisher_SetInternalCoordSystem(self, cs)

    def SetDataCoordSystem(self, cs):
        return _gmat_py.Publisher_SetDataCoordSystem(self, cs)

    def SetDataMJ2000EqOrigin(self, cb):
        return _gmat_py.Publisher_SetDataMJ2000EqOrigin(self, cb)

    def SetRunState(self, state):
        return _gmat_py.Publisher_SetRunState(self, state)

    def SetManeuvering(self, *args):
        return _gmat_py.Publisher_SetManeuvering(self, *args)

    def GetManeuvering(self):
        return _gmat_py.Publisher_GetManeuvering(self)

    def SetSpacecraftPropertyChanged(self, originator, epoch, satName, desc):
        return _gmat_py.Publisher_SetSpacecraftPropertyChanged(self, originator, epoch, satName, desc)

    def SetOrbitColorChanged(self, originator, newColor, objName, desc):
        return _gmat_py.Publisher_SetOrbitColorChanged(self, originator, newColor, objName, desc)

    def SetTargetColorChanged(self, originator, newColor, objName, desc):
        return _gmat_py.Publisher_SetTargetColorChanged(self, originator, newColor, objName, desc)

    def SetSegmentOrbitColor(self, originator, overrideColor, orbitColor, objNames):
        return _gmat_py.Publisher_SetSegmentOrbitColor(self, originator, overrideColor, orbitColor, objNames)

    def GetInternalCoordSystem(self):
        return _gmat_py.Publisher_GetInternalCoordSystem(self)

    def GetDataCoordSystem(self):
        return _gmat_py.Publisher_GetDataCoordSystem(self)

    def GetDataMJ2000EqOrigin(self):
        return _gmat_py.Publisher_GetDataMJ2000EqOrigin(self)

    def GetRunState(self):
        return _gmat_py.Publisher_GetRunState(self)

# Register Publisher in _gmat_py:
_gmat_py.Publisher_swigregister(Publisher)
class Sandbox(object):
    r"""The GMAT workspace for running missions"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gmat_py.Sandbox_swiginit(self, _gmat_py.new_Sandbox())
    __swig_destroy__ = _gmat_py.delete_Sandbox

    def AddObject(self, obj):
        return _gmat_py.Sandbox_AddObject(self, obj)

    def AddFunctionToGlobalObjectMap(self, func):
        return _gmat_py.Sandbox_AddFunctionToGlobalObjectMap(self, func)

    def AddCommand(self, cmd):
        return _gmat_py.Sandbox_AddCommand(self, cmd)

    def AddSolarSystem(self, ss):
        return _gmat_py.Sandbox_AddSolarSystem(self, ss)

    def AddTriggerManagers(self, trigs):
        return _gmat_py.Sandbox_AddTriggerManagers(self, trigs)

    def AddSubscriber(self, sub):
        return _gmat_py.Sandbox_AddSubscriber(self, sub)

    def SetInternalCoordSystem(self, ss):
        return _gmat_py.Sandbox_SetInternalCoordSystem(self, ss)

    def SetPublisher(self, pub=None):
        return _gmat_py.Sandbox_SetPublisher(self, pub)

    def GetInternalObject(self, *args):
        return _gmat_py.Sandbox_GetInternalObject(self, *args)

    def GetObjectMap(self):
        return _gmat_py.Sandbox_GetObjectMap(self)

    def GetGlobalObjectMap(self):
        return _gmat_py.Sandbox_GetGlobalObjectMap(self)

    def Initialize(self):
        return _gmat_py.Sandbox_Initialize(self)

    def Execute(self):
        return _gmat_py.Sandbox_Execute(self)

    def Interrupt(self):
        return _gmat_py.Sandbox_Interrupt(self)

    def Clear(self):
        return _gmat_py.Sandbox_Clear(self)

    def SetWidgetCreator(self, creatorFun):
        return _gmat_py.Sandbox_SetWidgetCreator(self, creatorFun)

# Register Sandbox in _gmat_py:
_gmat_py.Sandbox_swigregister(Sandbox)

def Help(*args):
    r"""Functions that provide the top level GMAT API interfaces."""
    return _gmat_py.Help(*args)

def ShowObjectsForID(*args):
    return _gmat_py.ShowObjectsForID(*args)

def ShowClassesForID(*args):
    return _gmat_py.ShowClassesForID(*args)

def ShowObjects(*args):
    return _gmat_py.ShowObjects(*args)

def ShowClasses(*args):
    return _gmat_py.ShowClasses(*args)

def Exists(objectName):
    return _gmat_py.Exists(objectName)

def GetObject(objectname):
    val = _gmat_py.GetObject(objectname)

    typestr = val.GetTypeName()
    if (typestr == "ForceModel"):
       typestr = "ODEModel"

    evalstr = typestr + ".SetClass(val)"
    try:
       val = eval(evalstr)
    except:
       pass


    return val

def GetSolarSystem():
    return _gmat_py.GetSolarSystem()

def GetCommands(*args):
    return _gmat_py.GetCommands(*args)

def GetNestedCommands(*args):
    return _gmat_py.GetNestedCommands(*args)

def Execute(sandboxNum=1):
    return _gmat_py.Execute(sandboxNum)

def LoadScript(filename):
    return _gmat_py.LoadScript(filename)

def LoadInclude(filename):
    return _gmat_py.LoadInclude(filename)

def RunScript():
    return _gmat_py.RunScript()

def SaveScript(filename):
    return _gmat_py.SaveScript(filename)

def GetRuntimeObject(objectname):
    return _gmat_py.GetRuntimeObject(objectname)

def GetRunSummary():
    return _gmat_py.GetRunSummary()

def Setup(*args):
    return _gmat_py.Setup(*args)

def Construct(*args):
    val = _gmat_py.Construct(*args)

    typestr = val.GetTypeName()
    if (typestr == "ForceModel"):
       typestr = "ODEModel"

    evalstr = typestr + ".SetClass(val)"
    try:
       val = eval(evalstr)
    except:
       pass

    val.thisown = 0


    return val

def Copy(*args):
    val = _gmat_py.Copy(*args)

    typestr = val.GetTypeName()
    if (typestr == "ForceModel"):
       typestr = "ODEModel"

    evalstr = typestr + ".SetClass(val)"
    try:
       val = eval(evalstr)
    except:
       pass

    val.thisown = 0


    return val

def Initialize(*args):
    return _gmat_py.Initialize(*args)

def Update(*args):
    return _gmat_py.Update(*args)

def Clear(*args):
    return _gmat_py.Clear(*args)

def UseLogFile(*args):
    return _gmat_py.UseLogFile(*args)

def EchoLogFile(echo=True):
    return _gmat_py.EchoLogFile(echo)

def Command(*args):
    return _gmat_py.Command(*args)

def DeleteCommand(cmd, sandboxNum=1):
    return _gmat_py.DeleteCommand(cmd, sandboxNum)
class APIException(BaseException):
    r"""Exception class to be wrapped by SWIG for the GMAT API."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gmat_py.delete_APIException

    def __init__(self, *args):
        _gmat_py.APIException_swiginit(self, _gmat_py.new_APIException(*args))

# Register APIException in _gmat_py:
_gmat_py.APIException_swigregister(APIException)
class HelpSystem(object):
    r"""
    Help system accessible for the GMAT API


    The manager for the API help system
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance(*args):
        return _gmat_py.HelpSystem_Instance(*args)

    def Help(self, *args):
        return _gmat_py.HelpSystem_Help(self, *args)

# Register HelpSystem in _gmat_py:
_gmat_py.HelpSystem_swigregister(HelpSystem)
class Moderator(object):
    r"""
    The GMAT Moderator

    The Moderator singleton is the central communications manager for a running
    GMAT application.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _gmat_py.Moderator_Instance()

    def OverridePublisher(self, otherPublisher):
        return _gmat_py.Moderator_OverridePublisher(self, otherPublisher)

    def Initialize(self, *args):
        return _gmat_py.Moderator_Initialize(self, *args)

    def IsInitialized(self):
        return _gmat_py.Moderator_IsInitialized(self)

    def UpdateDataFiles(self):
        return _gmat_py.Moderator_UpdateDataFiles(self)

    def Finalize(self):
        return _gmat_py.Moderator_Finalize(self)

    def SetRunReady(self, flag=True):
        return _gmat_py.Moderator_SetRunReady(self, flag)

    def GetExitCode(self):
        return _gmat_py.Moderator_GetExitCode(self)

    def __str__(self):
        return _gmat_py.Moderator___str__(self)

    def IsFromGui(self):
        return _gmat_py.Moderator_IsFromGui(self)

    def GetMatlabInterface(self):
        return _gmat_py.Moderator_GetMatlabInterface(self)

    def OpenMatlabEngine(self):
        return _gmat_py.Moderator_OpenMatlabEngine(self)

    def CloseMatlabEngine(self):
        return _gmat_py.Moderator_CloseMatlabEngine(self)

    def LoadPlugins(self):
        return _gmat_py.Moderator_LoadPlugins(self)

    def LoadAPlugin(self, pluginName):
        return _gmat_py.Moderator_LoadAPlugin(self, pluginName)

    def LoadLibrary(self, libraryName):
        return _gmat_py.Moderator_LoadLibrary(self, libraryName)

    def IsLibraryLoaded(self, libName):
        return _gmat_py.Moderator_IsLibraryLoaded(self, libName)

    def GetDynamicFunction(self, funName, libraryName):
        return _gmat_py.Moderator_GetDynamicFunction(self, funName, libraryName)

    def RetrieveGuiFactories(self):
        return _gmat_py.Moderator_RetrieveGuiFactories(self)

    def GetObjectTypeString(self, type):
        return _gmat_py.Moderator_GetObjectTypeString(self, type)

    @staticmethod
    def GetUiInterpreter():
        return _gmat_py.Moderator_GetUiInterpreter()

    @staticmethod
    def GetScriptInterpreter():
        return _gmat_py.Moderator_GetScriptInterpreter()

    @staticmethod
    def SetUiInterpreter(uiInterp):
        return _gmat_py.Moderator_SetUiInterpreter(uiInterp)

    @staticmethod
    def SetScriptInterpreter(scriptInterp):
        return _gmat_py.Moderator_SetScriptInterpreter(scriptInterp)

    def SetInterpreterMapAndSS(self, interp):
        return _gmat_py.Moderator_SetInterpreterMapAndSS(self, interp)

    def SetObjectMap(self, objMap):
        return _gmat_py.Moderator_SetObjectMap(self, objMap)

    def SetObjectManageOption(self, option):
        return _gmat_py.Moderator_SetObjectManageOption(self, option)

    def GetObjectManageOption(self):
        return _gmat_py.Moderator_GetObjectManageOption(self)

    def ResetObjectPointer(self, objMap, newobj, name):
        return _gmat_py.Moderator_ResetObjectPointer(self, objMap, newobj, name)

    def GetListOfFactoryItems(self, *args):
        return _gmat_py.Moderator_GetListOfFactoryItems(self, *args)

    def GetListOfAllFactoryItems(self):
        return _gmat_py.Moderator_GetListOfAllFactoryItems(self)

    def GetListOfAllFactoryItemsExcept(self, types):
        return _gmat_py.Moderator_GetListOfAllFactoryItemsExcept(self, types)

    def GetListOfViewableItems(self, type):
        return _gmat_py.Moderator_GetListOfViewableItems(self, type)

    def GetListOfUnviewableItems(self, type):
        return _gmat_py.Moderator_GetListOfUnviewableItems(self, type)

    def GetAllObjectTypeArrayMap(self):
        return _gmat_py.Moderator_GetAllObjectTypeArrayMap(self)

    def DoesObjectTypeMatchSubtype(self, coreType, theType, theSubtype):
        return _gmat_py.Moderator_DoesObjectTypeMatchSubtype(self, coreType, theType, theSubtype)

    def GetConfiguredObjectMap(self):
        return _gmat_py.Moderator_GetConfiguredObjectMap(self)

    def GetListOfObjects(self, *args):
        return _gmat_py.Moderator_GetListOfObjects(self, *args)

    def GetConfiguredObject(self, name):
        return _gmat_py.Moderator_GetConfiguredObject(self, name)

    def AddClone(self, name, newName):
        return _gmat_py.Moderator_AddClone(self, name, newName)

    def ReconfigureItem(self, newobj, name):
        return _gmat_py.Moderator_ReconfigureItem(self, newobj, name)

    def GetNewName(self, name, startCount):
        return _gmat_py.Moderator_GetNewName(self, name, startCount)

    def RenameObject(self, type, oldName, newName):
        return _gmat_py.Moderator_RenameObject(self, type, oldName, newName)

    def RemoveObject(self, type, name, delOnlyIfNotUsed):
        return _gmat_py.Moderator_RemoveObject(self, type, name, delOnlyIfNotUsed)

    def HasConfigurationChanged(self, sandboxNum=1):
        return _gmat_py.Moderator_HasConfigurationChanged(self, sandboxNum)

    def ConfigurationChanged(self, obj, tf):
        return _gmat_py.Moderator_ConfigurationChanged(self, obj, tf)

    def ResetConfigurationChanged(self, resetResource=True, resetCommands=True, sandboxNum=1):
        return _gmat_py.Moderator_ResetConfigurationChanged(self, resetResource, resetCommands, sandboxNum)

    def GetDefaultSolarSystem(self):
        return _gmat_py.Moderator_GetDefaultSolarSystem(self)

    def CreateSolarSystem(self, name):
        return _gmat_py.Moderator_CreateSolarSystem(self, name)

    def GetSolarSystemInUse(self, manage=1):
        return _gmat_py.Moderator_GetSolarSystemInUse(self, manage)

    def SetInternalSolarSystem(self, ss):
        return _gmat_py.Moderator_SetInternalSolarSystem(self, ss)

    def SetSolarSystemInUse(self, *args):
        return _gmat_py.Moderator_SetSolarSystemInUse(self, *args)

    def CreateCalculatedPoint(self, type, name, addDefaultBodies=True):
        return _gmat_py.Moderator_CreateCalculatedPoint(self, type, name, addDefaultBodies)

    def GetCalculatedPoint(self, name):
        return _gmat_py.Moderator_GetCalculatedPoint(self, name)

    def CreateCelestialBody(self, type, name):
        return _gmat_py.Moderator_CreateCelestialBody(self, type, name)

    def GetCelestialBody(self, name):
        return _gmat_py.Moderator_GetCelestialBody(self, name)

    def CreateSpacecraft(self, type, name, createDefault=False):
        return _gmat_py.Moderator_CreateSpacecraft(self, type, name, createDefault)

    def GetSpacecraft(self, name):
        return _gmat_py.Moderator_GetSpacecraft(self, name)

    def GetSpacecraftNotInFormation(self):
        return _gmat_py.Moderator_GetSpacecraftNotInFormation(self)

    def CreateSpacePoint(self, type, name):
        return _gmat_py.Moderator_CreateSpacePoint(self, type, name)

    def GetSpacePoint(self, name):
        return _gmat_py.Moderator_GetSpacePoint(self, name)

    def CreatePlate(self, type, name):
        return _gmat_py.Moderator_CreatePlate(self, type, name)

    def GetPlate(self, name):
        return _gmat_py.Moderator_GetPlate(self, name)

    def CreateHardware(self, type, name):
        return _gmat_py.Moderator_CreateHardware(self, type, name)

    def GetHardware(self, name):
        return _gmat_py.Moderator_GetHardware(self, name)

    def CreateFieldOfView(self, type, name):
        return _gmat_py.Moderator_CreateFieldOfView(self, type, name)

    def GetFieldOfView(self, name):
        return _gmat_py.Moderator_GetFieldOfView(self, name)

    def CreatePropagator(self, type, name):
        return _gmat_py.Moderator_CreatePropagator(self, type, name)

    def GetPropagator(self, name):
        return _gmat_py.Moderator_GetPropagator(self, name)

    def CreateDefaultPhysicalModel(self, name):
        return _gmat_py.Moderator_CreateDefaultPhysicalModel(self, name)

    def CreatePhysicalModel(self, type, name):
        return _gmat_py.Moderator_CreatePhysicalModel(self, type, name)

    def GetPhysicalModel(self, name):
        return _gmat_py.Moderator_GetPhysicalModel(self, name)

    def CreateAtmosphereModel(self, type, name):
        return _gmat_py.Moderator_CreateAtmosphereModel(self, type, name)

    def GetAtmosphereModel(self, name):
        return _gmat_py.Moderator_GetAtmosphereModel(self, name)

    def CreateBurn(self, type, name, createDefault=False):
        return _gmat_py.Moderator_CreateBurn(self, type, name, createDefault)

    def GetBurn(self, name):
        return _gmat_py.Moderator_GetBurn(self, name)

    def IsParameter(self, type):
        return _gmat_py.Moderator_IsParameter(self, type)

    def CreateAutoParameter(self, *args):
        return _gmat_py.Moderator_CreateAutoParameter(self, *args)

    def CreateParameter(self, *args):
        return _gmat_py.Moderator_CreateParameter(self, *args)

    def GetParameter(self, name):
        return _gmat_py.Moderator_GetParameter(self, name)

    def SetParameterRefObject(self, param, type, name, ownerName, depName, manage):
        return _gmat_py.Moderator_SetParameterRefObject(self, param, type, name, ownerName, depName, manage)

    def CreateODEModel(self, type, name):
        return _gmat_py.Moderator_CreateODEModel(self, type, name)

    def GetODEModel(self, name):
        return _gmat_py.Moderator_GetODEModel(self, name)

    def AddToODEModel(self, odeModelName, forceName):
        return _gmat_py.Moderator_AddToODEModel(self, odeModelName, forceName)

    def CreateSolver(self, type, name):
        return _gmat_py.Moderator_CreateSolver(self, type, name)

    def GetSolver(self, name):
        return _gmat_py.Moderator_GetSolver(self, name)

    def CreateDefaultPropSetup(self, name):
        return _gmat_py.Moderator_CreateDefaultPropSetup(self, name)

    def CreatePropSetup(self, name):
        return _gmat_py.Moderator_CreatePropSetup(self, name)

    def GetPropSetup(self, name):
        return _gmat_py.Moderator_GetPropSetup(self, name)

    def CreateMeasurementModel(self, type, name):
        return _gmat_py.Moderator_CreateMeasurementModel(self, type, name)

    def GetMeasurementModel(self, name):
        return _gmat_py.Moderator_GetMeasurementModel(self, name)

    def CreateDataFile(self, type, name):
        return _gmat_py.Moderator_CreateDataFile(self, type, name)

    def GetDataFile(self, name):
        return _gmat_py.Moderator_GetDataFile(self, name)

    def CreateObType(self, type, name):
        return _gmat_py.Moderator_CreateObType(self, type, name)

    def GetObType(self, name):
        return _gmat_py.Moderator_GetObType(self, name)

    def CreateEventLocator(self, type, name, createDefault=False):
        return _gmat_py.Moderator_CreateEventLocator(self, type, name, createDefault)

    def GetEventLocator(self, name):
        return _gmat_py.Moderator_GetEventLocator(self, name)

    def CreateInterpolator(self, type, name):
        return _gmat_py.Moderator_CreateInterpolator(self, type, name)

    def GetInterpolator(self, name):
        return _gmat_py.Moderator_GetInterpolator(self, name)

    def CreateCoordinateSystem(self, name, createDefault=False, internal=False, manage=1):
        return _gmat_py.Moderator_CreateCoordinateSystem(self, name, createDefault, internal, manage)

    def GetCoordinateSystem(self, name):
        return _gmat_py.Moderator_GetCoordinateSystem(self, name)

    def GetDefaultCoordinateSystemNames(self):
        return _gmat_py.Moderator_GetDefaultCoordinateSystemNames(self)

    def IsDefaultCoordinateSystem(self, name):
        return _gmat_py.Moderator_IsDefaultCoordinateSystem(self, name)

    def CreateSubscriber(self, type, name, createDefault=False):
        return _gmat_py.Moderator_CreateSubscriber(self, type, name, createDefault)

    def GetSubscriber(self, name):
        return _gmat_py.Moderator_GetSubscriber(self, name)

    def GetNumberOfActivePlots(self):
        return _gmat_py.Moderator_GetNumberOfActivePlots(self)

    def CreateEphemerisFile(self, type, name):
        return _gmat_py.Moderator_CreateEphemerisFile(self, type, name)

    def GetEphemerisFile(self, name):
        return _gmat_py.Moderator_GetEphemerisFile(self, name)

    def HandleCcsdsEphemerisFile(self, objMap, deleteOld=False):
        return _gmat_py.Moderator_HandleCcsdsEphemerisFile(self, objMap, deleteOld)

    def CreateFunction(self, type, name, manage=1):
        return _gmat_py.Moderator_CreateFunction(self, type, name, manage)

    def GetFunction(self, name):
        return _gmat_py.Moderator_GetFunction(self, name)

    def CreateObject(self, objTypeId, type, name, createDefault=False):
        return _gmat_py.Moderator_CreateObject(self, objTypeId, type, name, createDefault)

    def CreateOtherObject(self, objTypeId, type, name, createDefault=False):
        return _gmat_py.Moderator_CreateOtherObject(self, objTypeId, type, name, createDefault)

    def CreateStopCondition(self, type, name):
        return _gmat_py.Moderator_CreateStopCondition(self, type, name)

    def CreateAxisSystem(self, type, name, manage=1):
        return _gmat_py.Moderator_CreateAxisSystem(self, type, name, manage)

    def CreateMathNode(self, *args):
        return _gmat_py.Moderator_CreateMathNode(self, *args)

    def CreateAttitude(self, type, name):
        return _gmat_py.Moderator_CreateAttitude(self, type, name)

    def InterpretGmatFunction(self, *args):
        return _gmat_py.Moderator_InterpretGmatFunction(self, *args)

    def CreateCommand(self, type, name, retFlag):
        return _gmat_py.Moderator_CreateCommand(self, type, name, retFlag)

    def CreateDefaultCommand(self, *args):
        return _gmat_py.Moderator_CreateDefaultCommand(self, *args)

    def DeleteCommand(self, cmd, sandboxNum=1):
        return _gmat_py.Moderator_DeleteCommand(self, cmd, sandboxNum)

    def GetFirstCommand(self, sanboxNum=1):
        return _gmat_py.Moderator_GetFirstCommand(self, sanboxNum)

    def AppendCommand(self, *args):
        return _gmat_py.Moderator_AppendCommand(self, *args)

    def InsertCommand(self, cmd, prevCmd, sandboxNum=1):
        return _gmat_py.Moderator_InsertCommand(self, cmd, prevCmd, sandboxNum)

    def SetCommandsUnchanged(self, whichList=0):
        return _gmat_py.Moderator_SetCommandsUnchanged(self, whichList)

    def ValidateCommand(self, cmd):
        return _gmat_py.Moderator_ValidateCommand(self, cmd)

    def GetInternalCoordinateSystem(self):
        return _gmat_py.Moderator_GetInternalCoordinateSystem(self)

    def GetPlanetarySourceTypes(self):
        return _gmat_py.Moderator_GetPlanetarySourceTypes(self)

    def GetPlanetarySourceNames(self):
        return _gmat_py.Moderator_GetPlanetarySourceNames(self)

    def GetPlanetarySourceTypesInUse(self):
        return _gmat_py.Moderator_GetPlanetarySourceTypesInUse(self)

    def SetPlanetarySourceName(self, sourceType, fileName):
        return _gmat_py.Moderator_SetPlanetarySourceName(self, sourceType, fileName)

    def SetPlanetarySourceTypesInUse(self, sourceTypes):
        return _gmat_py.Moderator_SetPlanetarySourceTypesInUse(self, sourceTypes)

    def GetPlanetarySourceId(self, sourceType):
        return _gmat_py.Moderator_GetPlanetarySourceId(self, sourceType)

    def GetPlanetarySourceName(self, sourceType):
        return _gmat_py.Moderator_GetPlanetarySourceName(self, sourceType)

    def GetCurrentPlanetarySource(self):
        return _gmat_py.Moderator_GetCurrentPlanetarySource(self)

    def GetPotentialFileName(self, fileType):
        return _gmat_py.Moderator_GetPotentialFileName(self, fileType)

    def GetFileName(self, fileType, getFullpath=False, forInput=True, writeWarning=False, writeInfo=False):
        return _gmat_py.Moderator_GetFileName(self, fileType, getFullpath, forInput, writeWarning, writeInfo)

    def LoadDefaultMission(self):
        return _gmat_py.Moderator_LoadDefaultMission(self)

    def ClearResource(self):
        return _gmat_py.Moderator_ClearResource(self)

    def LoadMinimumResource(self):
        return _gmat_py.Moderator_LoadMinimumResource(self)

    def ClearCommandSeq(self, leaveFirstCmd=True, callRunComplete=True, sandboxNum=1):
        return _gmat_py.Moderator_ClearCommandSeq(self, leaveFirstCmd, callRunComplete, sandboxNum)

    def ClearAllSandboxes(self):
        return _gmat_py.Moderator_ClearAllSandboxes(self)

    def GetSandbox(self, sandboxNum=1):
        return _gmat_py.Moderator_GetSandbox(self, sandboxNum)

    def GetInternalObject(self, name, sandboxNum=1):
        return _gmat_py.Moderator_GetInternalObject(self, name, sandboxNum)

    def RunMission(self, sandboxNum=1):
        return _gmat_py.Moderator_RunMission(self, sandboxNum)

    def ChangeRunState(self, state, sandboxNum=1):
        return _gmat_py.Moderator_ChangeRunState(self, state, sandboxNum)

    def GetUserInterrupt(self):
        return _gmat_py.Moderator_GetUserInterrupt(self)

    def GetRunState(self):
        return _gmat_py.Moderator_GetRunState(self)

    def GetDetailedRunState(self, sandboxNum=1):
        return _gmat_py.Moderator_GetDetailedRunState(self, sandboxNum)

    def GetMainScriptFileName(self):
        return _gmat_py.Moderator_GetMainScriptFileName(self)

    def ClearScript(self):
        return _gmat_py.Moderator_ClearScript(self)

    def InterpretScript(self, *args):
        return _gmat_py.Moderator_InterpretScript(self, *args)

    def SaveScript(self, *args):
        return _gmat_py.Moderator_SaveScript(self, *args)

    def GetScript(self, *args):
        return _gmat_py.Moderator_GetScript(self, *args)

    def RunScript(self, sandboxNum=1):
        return _gmat_py.Moderator_RunScript(self, sandboxNum)

    def StartMatlabServer(self):
        return _gmat_py.Moderator_StartMatlabServer(self)

    def GetPluginResourceList(self):
        return _gmat_py.Moderator_GetPluginResourceList(self)

    def SetWidgetCreator(self, creatorFun):
        return _gmat_py.Moderator_SetWidgetCreator(self, creatorFun)

    def IsSequenceStarter(self, commandType):
        return _gmat_py.Moderator_IsSequenceStarter(self, commandType)

    def GetStarterStringList(self):
        return _gmat_py.Moderator_GetStarterStringList(self)

    def CreateDefaultParameters(self):
        return _gmat_py.Moderator_CreateDefaultParameters(self)

# Register Moderator in _gmat_py:
_gmat_py.Moderator_swigregister(Moderator)
MAX_SANDBOX = cvar.MAX_SANDBOX


def Help(foritem = ""):
   helpstr = _gmat_py.HelpSystem_Instance().Help(foritem);
   print(helpstr)

def GetRunSummary():
   summary = _gmat_py.GetRunSummary();
   print(summary)

def ShowObjects(ofType = ""):
   olist = _gmat_py.ShowObjects(ofType);
   print(olist)

def ShowClasses(ofType = ""):
   olist = _gmat_py.ShowClasses(ofType);
   print(olist)


